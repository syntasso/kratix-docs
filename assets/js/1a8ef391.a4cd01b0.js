"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[8158],{1498:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var i=r(5893),s=r(1151);const t={title:"SKE Operator",description:"Documentation about the SKE Operator"},a=void 0,o={id:"ske/kratix/ske-operator",title:"SKE Operator",description:"Documentation about the SKE Operator",source:"@site/docs/ske/01-kratix/05-ske-operator.mdx",sourceDirName:"ske/01-kratix",slug:"/ske/kratix/ske-operator",permalink:"/ske/kratix/ske-operator",draft:!1,unlisted:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/ske/01-kratix/05-ske-operator.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"SKE Operator",description:"Documentation about the SKE Operator"},sidebar:"skeSidebar",previous:{title:"Setup for Air-Gapped Environments",permalink:"/ske/kratix/configuring-ske/air-gapped"},next:{title:"Introduction",permalink:"/ske/integrations/intro"}},l={},c=[{value:"Features",id:"features",level:2},{value:"The Kratix Custom Resource Definition (CRD)",id:"the-kratix-custom-resource-definition-crd",level:2},{value:"Managing Kratix via the SKE Operator",id:"managing-kratix-via-the-ske-operator",level:2},{value:"Install",id:"install",level:3},{value:"Upgrade",id:"upgrade",level:3},{value:"Pre-upgrade checks",id:"pre-upgrade-checks",level:4},{value:"Post-upgrade checks",id:"post-upgrade-checks",level:4},{value:"Handling failures",id:"handling-failures",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The SKE Operator provides full lifecycle support for Syntasso Kratix Enterprise (SKE) and is the\nrecommended approach for installing and managing your SKE installation."}),"\n",(0,i.jsxs)(n.p,{children:["The operator has its own ",(0,i.jsx)(n.a,{href:"../releases/ske-operator",children:"releases"})," and it manages instances of\nSKE as defined by a ",(0,i.jsx)(n.a,{href:"#the-kratix-custom-resource-definition-crd",children:"Kratix Custom Resource"}),"."]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["While SKE is can be installed directly via the ",(0,i.jsx)(n.a,{href:"../releases/ske#overview",children:"released SKE distribution\nmanifests"}),", we ",(0,i.jsx)(n.strong,{children:"highly recommend"})," that you use the SKE Operator."]}),(0,i.jsx)(n.p,{children:"Using the Operator will reduce the workload of maintaining SKE, and all future operational\nfeatures will only be available via the Operator."})]}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsx)(n.p,{children:"The SKE Operator will:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Install a Kratix instance into your cluster, including dependencies"}),"\n",(0,i.jsxs)(n.li,{children:["Prevent drift of Kratix resources by continuously reconciling them against the declared\n",(0,i.jsx)(n.a,{href:"../releases/ske#overview",children:"SKE distribution"})]}),"\n",(0,i.jsx)(n.li,{children:"Validate SKE is in a healthy state before upgrading with pre-upgrade checks"}),"\n",(0,i.jsx)(n.li,{children:"Roll out an upgrade to the next minor version at the latest patch"}),"\n",(0,i.jsx)(n.li,{children:"Validate an upgrade works with post-upgrade checks"}),"\n",(0,i.jsx)(n.li,{children:"Provide information about the status of the upgrade"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"the-kratix-custom-resource-definition-crd",children:"The Kratix Custom Resource Definition (CRD)"}),"\n",(0,i.jsx)(n.p,{children:"The Kratix CRD is the resource definition corresponding to a Kratix installation. This\nresource is managed by the SKE Operator."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: platform.syntasso.io/v1alpha1\nkind: Kratix\nmetadata:\n  name: my-kratix\nspec:\n  version: vX.Y.Z # The desired version of SKE, can be set to latest\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The Kratix resource is the owner of all resources installed as part of the ",(0,i.jsx)(n.a,{href:"../releases/ske#overview",children:"SKE\ndistribution"}),", and ensures that their state always matches the\ndefinition in the distribution manifest."]}),"\n",(0,i.jsx)(n.h2,{id:"managing-kratix-via-the-ske-operator",children:"Managing Kratix via the SKE Operator"}),"\n",(0,i.jsx)(n.h3,{id:"install",children:"Install"}),"\n",(0,i.jsxs)(n.p,{children:["Syntasso Kratix Enterprise supports many ways of installing a Kratix instance. See\n",(0,i.jsx)(n.a,{href:"./configuring-ske/intro",children:"Configuring SKE"})," for details."]}),"\n",(0,i.jsx)(n.h3,{id:"upgrade",children:"Upgrade"}),"\n",(0,i.jsx)(n.p,{children:"To upgrade the SKE instance, you can apply a new version to the Kratix CRD:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: platform.syntasso.io/v1alpha1\nkind: Kratix\nmetadata:\n  name: my-kratix\nspec:\n  version: v0.100.0 # New desired version\n"})}),"\n",(0,i.jsx)(n.p,{children:"By default, the SKE Operator will perform the following steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Run the ",(0,i.jsx)(n.a,{href:"#pre-upgrade-checks",children:"pre-upgrade checks"})," to check that Kratix is safe to upgrade in its current state."]}),"\n",(0,i.jsx)(n.li,{children:"Upgrade your Kratix Deployment to the new version."}),"\n",(0,i.jsx)(n.li,{children:"Wait for the Kratix Deployment to become healthy (ready and available)."}),"\n",(0,i.jsxs)(n.li,{children:["Trigger ",(0,i.jsx)(n.a,{href:"#post-upgrade-checks",children:"post-upgrade-checks"})," and wait for them to complete."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"pre-upgrade-checks",children:"Pre-upgrade checks"}),"\n",(0,i.jsx)(n.p,{children:"The following pre-upgrade checks will run by default:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Check that the current Kratix installation is in ",(0,i.jsx)(n.code,{children:"Ready"})," state."]}),"\n",(0,i.jsx)(n.li,{children:"Check that there are no Kratix workflows in progress."}),"\n",(0,i.jsxs)(n.li,{children:["Check that all Promises are in an ",(0,i.jsx)(n.code,{children:"Available"})," state."]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["An additional check that the desired version is an allowed upgrade path is ",(0,i.jsx)(n.strong,{children:"always"}),"\nperformed."]}),(0,i.jsx)(n.p,{children:"This check passes when the new version is:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"On the same major version as the current version"}),"\n",(0,i.jsx)(n.li,{children:"At most 1 minor version ahead of the current version"}),"\n"]}),(0,i.jsx)(n.p,{children:"Patch versions on the same minor can be upgraded without restrictions."})]}),"\n",(0,i.jsx)(n.h4,{id:"post-upgrade-checks",children:"Post-upgrade checks"}),"\n",(0,i.jsx)(n.p,{children:"The following post-upgrade checks will run by default:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Retrigger Promise Configure workflows and check they run successfully."}),"\n",(0,i.jsx)(n.li,{children:"Retrigger Resource Configure workflows and check they run successfully."}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"All Promises and Resources which are installed at the time the upgrade starts will\nhave their Configure workflows retriggered during the post-upgrade checks."})}),"\n",(0,i.jsxs)(n.p,{children:["The status of the post-upgrade checks can be monitored via the Kratix status, under the\n",(0,i.jsx)(n.code,{children:".status.postUpgradeStatus"})," key:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: platform.syntasso.io/v1alpha1\nkind: Kratix\nmetadata:\n  name: my-kratix\n  ...\nspec:\n  version: v0.10.0\nstatus:\n  conditions:\n  - lastTransitionTime: "2024-12-04T23:00:22Z"\n    message: ""\n    reason: AllReplicasAvailable\n    status: "True"\n    type: KratixDeploymentReady\n  lastAppliedVersion: v0.10.0\n  #highlight-start\n  postUpgradeStatus:\n    lastTransitionTime: "2024-12-04T23:00:53Z"\n    promiseConfigureWorkflowsCheck:\n      status: Succeeded\n    resourceConfigureWorkflowsCheck:\n      resourceConfigureWorkflows:\n      - promiseName: cicd\n        resourceGVK: marketplace.kratix.io/v1alpha1, Kind=Jenkins\n        resourceName: first-jenkins\n        resourceNamespace: default\n        status: Succeeded\n      - promiseName: cicd\n        resourceGVK: marketplace.kratix.io/v1alpha1, Kind=Jenkins\n        resourceName: second-jenkins\n        resourceNamespace: default\n        status: InProgress\n      status: InProgress\n    status: InProgress\n  #highlight-end\n  ready: false\n  upgradedDeploymentReadyAt: "2024-12-04T23:00:22Z"\n'})}),"\n",(0,i.jsx)(n.p,{children:"The post-upgrade status will be continually updated as the post-upgrade checks progress."}),"\n",(0,i.jsx)(n.h4,{id:"handling-failures",children:"Handling failures"}),"\n",(0,i.jsx)(n.p,{children:"If any upgrade step fails, the SKE Operator will continue looping its reconciliation of\nthe Kratix resource awaiting manual intervention."}),"\n",(0,i.jsx)(n.p,{children:"Once the failure is fixed, the upgrade will proceed to the next step."}),"\n",(0,i.jsx)(n.p,{children:"An example upgrade scenario might be:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Kratix is upgraded and the Deployment becomes healthy, but a Promise Configure workflow\nfails."}),"\n",(0,i.jsx)(n.li,{children:"The failing workflow is manually fixed and successfully rerun."}),"\n",(0,i.jsx)(n.li,{children:"The SKE Operator picks up the successful Promise Configure workflow, and proceeds with\nthe remaining upgrade step."}),"\n",(0,i.jsx)(n.li,{children:"The upgrade succeeds when all steps have completed successfully."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>a});var i=r(7294);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);