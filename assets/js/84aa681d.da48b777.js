"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[2992],{9793:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var n=a(5893),s=a(1151);const r={description:"Learn more about how Kratix works with Backstage",title:"Kratix and Backstage",id:"backstage"},i=void 0,o={id:"main/how-kratix-complements/backstage",title:"Kratix and Backstage",description:"Learn more about how Kratix works with Backstage",source:"@site/docs/main/90-how-kratix-complements/04-kratix-and-backstage.md",sourceDirName:"main/90-how-kratix-complements",slug:"/main/how-kratix-complements/backstage",permalink:"/main/how-kratix-complements/backstage",draft:!1,unlisted:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/main/90-how-kratix-complements/04-kratix-and-backstage.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Learn more about how Kratix works with Backstage",title:"Kratix and Backstage",id:"backstage"},sidebar:"mainSidebar",previous:{title:"Kratix and Crossplane",permalink:"/main/how-kratix-complements/crossplane"},next:{title:"Troubleshooting",permalink:"/main/troubleshooting"}},c={},l=[{value:"What",id:"what",level:2},{value:"Why",id:"why",level:2},{value:"How",id:"how",level:2},{value:"Setting up Kratix with Backstage",id:"setting-up-kratix-with-backstage",level:3},{value:"Create Backstage Resources with Kratix",id:"create-backstage-resources-with-kratix",level:3},{value:"Support",id:"support",level:3}];function h(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.em,{children:[(0,n.jsx)(t.a,{href:"https://backstage.io/",children:"Backstage"})," is a framework for building developer portals. Kratix is a framework for building platforms. It's as if they were made for each other."]})}),"\n",(0,n.jsx)("img",{align:"right",src:a(6098).Z,style:{float:"right",width:"400px",margin:"20px 0 40px 40px"},alt:"Kratix logo and Backstage logo"}),"\n",(0,n.jsx)(t.h2,{id:"what",children:"What"}),"\n",(0,n.jsx)(t.p,{children:"Backstage and Kratix both believe that the most powerful platforms must be built\nby each organisation. While each platform needs to be custom-built, both tools also\nencourage building on top of community-provided support where possible. Together, the two\nprovide a framework for platform engineers which places user experience front and center."}),"\n",(0,n.jsx)(t.p,{children:"Backstage is a framework that enables GUIs to be declaratively created with the\naim of unifying infrastructure tooling, services, and documentation to produce a\nstellar developer experience. It's completely un-opinionated and decoupled from how\nyou drive your platform infrastructure."}),"\n",(0,n.jsx)(t.p,{children:"Kratix enables platform teams to declare platform APIs that orchestrates\nworkloads across your infrastructure. Kratix does not come with a packaged GUI."}),"\n",(0,n.jsx)(t.h2,{id:"why",children:"Why"}),"\n",(0,n.jsx)(t.p,{children:"This divide between GUI and API makes Backstage and Kratix the perfect package."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Decoupled architecture:"})}),"\n",(0,n.jsx)(t.p,{children:"GUI architectures shine when their responsibility is limited to the UX\nexperience. Rather than define your platform orchestration in Backstage\ndirectly, you can have Backstage call the Kratix API which provides easier\nportability across GUIs, while still supporting the experience of more CLI-driven\nusers. Plus, decoupling enables easier refactoring of platform implementation due to\nstable API definitions."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Auto-populated GUI:"})}),"\n",(0,n.jsxs)(t.p,{children:["Backstage GUIs must be declared, which is toil for the platform. Kratix can\nreduce this toil by integrating ",(0,n.jsx)(t.a,{href:"../reference/promises/intro",children:"Promises"})," with\nBackstage by default. In addition, these GUIs can diverge from platform\nofferings if they are managed separately from the backend implementations.\nPromises that define the API and the Backstage GUI at the same time provide\nautomatic support for iterations on your platform's offerings."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"how",children:"How"}),"\n",(0,n.jsx)(t.p,{children:"Integrating Backstage with Kratix is simple. Point Backstage at the Kratix\nplatform cluster, and that's it. Kratix will then build the Backstage views as\nPromises are loaded into Kratix, and Resources are requested by users of the\nplatform."}),"\n",(0,n.jsx)(t.p,{children:"With Kratix, you get declarative UIs by default:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"The Backstage Catalog is automatically populated when Kratix Promises are\napplied."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Templates for Promises are automatically created when Promises are loaded.\nThis provides consumers of the platform with a simple, predictable UX to create\nResources from the Promises they require. This could be entire paved-path environments,\nor simply instances of services developers need. See our selection of Promises on our\n",(0,n.jsx)(t.a,{href:"https://docs.kratix.io/marketplace",children:"Marketplace"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Due to Kratix's powerful GitOps abstractions, the Backstage configuration data\nlives outside of Backstage, leaving your Kratix-driven Backstage ephemeral in\nnature. If your Backstage dies, no problem: redeploy it and your views will\nautomatically be brought back to life by Kratix."}),"\n"," ","\n",(0,n.jsx)("br",{}),"\n",(0,n.jsx)("div",{style:{"text-align":"center"},children:(0,n.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/wj5VaXYTvrg",title:"Use Kratix to provide on-demand services through a Backstage UI",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0})}),"\n"," ","\n",(0,n.jsx)("br",{}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"setting-up-kratix-with-backstage",children:"Setting up Kratix with Backstage"}),"\n",(0,n.jsx)(t.p,{children:"Backstage supports reading objects from S3-compatible blob stores. Kratix\nalso supports writing to them."}),"\n",(0,n.jsxs)(t.p,{children:["To set up this integration, you'll need to create a\n",(0,n.jsx)(t.a,{href:"../reference/statestore/bucketstatestore",children:"BucketStateStore"})," and a\n",(0,n.jsx)(t.a,{href:"../reference/destinations/intro",children:"Destination"})," which points to the\ndirectory that Backstage is configured to watch."]}),"\n",(0,n.jsxs)(t.p,{children:["For example, first create a ",(0,n.jsx)(t.code,{children:"BucketStateStore"})," for Backstage to use:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"apiVersion: platform.kratix.io/v1alpha1\nkind: BucketStateStore\nmetadata:\n  name: backstage\nspec:\n  bucketName: kratix\n  endpoint: s3.amazonaws.com\n  insecure: false\n  path: backstage/\n  secretRef:\n    name: s3-credentials\n    namespace: default\n"})}),"\n",(0,n.jsxs)(t.p,{children:["And a ",(0,n.jsx)(t.code,{children:"backstage"})," Destination in Kratix to enable Promises to write to the state store:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"apiVersion: platform.kratix.io/v1alpha1\nkind: Destination\nmetadata:\n  labels:\n    environment: backstage\n  name: backstage\nspec:\n  stateStoreRef:\n    kind: BucketStateStore\n    name: backstage\n"})}),"\n",(0,n.jsx)(t.p,{children:"At this point, the Kratix half of the partnership is set up: we have a state store, and we\ncan write to it. We now need to configure Backstage to read from this state store."}),"\n",(0,n.jsxs)(t.p,{children:["To do this, you can update your ",(0,n.jsx)(t.a,{href:"https://backstage.io/docs/conf/",children:"Backstage configuration"}),"\nas follows:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'integrations:\n  awsS3:\n    - endpoint: "http://s3.amazonaws.com"\n      s3ForcePathStyle: true\n      accessKeyId: ${AWS_ACCESS_KEY_ID}\n      secretAccessKey: ${AWS_SECRET_ACCESS_KEY}\ncatalog:\n  providers:\n    awsS3:\n      kratix-bucket:\n        bucketName: kratix\n        prefix: backstage/\n        region: us-east-2\n        schedule:\n          frequency: { minutes: 1 }\n          timeout: { seconds: 20 }\n'})}),"\n",(0,n.jsx)(t.p,{children:"Backstage is now configured to load any Backstage documents, such as templates\nand components, which Kratix has written to the state store."}),"\n",(0,n.jsx)(t.h3,{id:"create-backstage-resources-with-kratix",children:"Create Backstage Resources with Kratix"}),"\n",(0,n.jsxs)(t.p,{children:["Kratix ",(0,n.jsx)(t.a,{href:"../reference/workflows",children:"workflows"})," allow Promise authors to define pipelines that\nrun at various points in the lifecycle of a ",(0,n.jsx)(t.a,{href:"../reference/resources/workflows",children:"Resource"})," or\n",(0,n.jsx)(t.a,{href:"../reference/promises/workflows",children:"Promise"}),". These workflows can output documents of\n",(0,n.jsx)(t.em,{children:"any type"}),", and a single workflow can schedule to\n",(0,n.jsx)(t.a,{href:"../reference/destinations/multidestination-management#dynamic",children:"multiple destinations"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"This powerful combination enables Promise authors to output many distinct types of\nresource to its own destination, all in a single workflow. In this case, we're writing\nboth Kubernetes manifests and Backstage components and templates, ensuring that the latter\nare only picked up by Backstage."}),"\n",(0,n.jsxs)(t.p,{children:["The Promise Configure workflow can be used to output a component and template for the\nPromise at installation time, and then the Resource Configure workflow can output a\ncomponent to describe what has been provisioned. The ",(0,n.jsx)(t.a,{href:"https://github.com/syntasso/kratix-marketplace/tree/main/kafka",children:"Kafka\nPromise"})," in our\nMarketplace demonstrates this."]}),"\n",(0,n.jsx)(t.p,{children:"The Promise Configure workflow for Kafka outputs the Kafka operator for deployment to a\nKubernetes cluster (the default scheduling for this Promise) and then outputs a\ncomponent and template separately for Backstage, specifying the scheduling to\nensure it goes to the Backstage destination:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:'#!/usr/bin/env sh\n\nset -x\n\n\n# Copy the Operator manifest\ncp -r /tmp/transfer/dependencies/* /kratix/output/\n\n# Copy the Backstage resources\ncp -r /tmp/transfer/backstage /kratix/output\n\n# Ensure the contents of the /kratix/output/backstage/\n# directory go to the Backstage Destination\necho """\n- directory: backstage\n  matchLabels:\n    environment: backstage\n""" >> /kratix/metadata/destination-selectors.yaml\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The sample component and template can be found\n",(0,n.jsx)(t.a,{href:"https://github.com/syntasso/kratix-marketplace/blob/main/kafka/internal/configure-promise-pipeline/resources/backstage/backstage.yaml",children:"here"}),".\nThe Template takes advantage of the\n",(0,n.jsx)(t.a,{href:"https://github.com/muvaf/kubernetes-apply",children:"kubernetes-apply"})," Backstage plugin to\n",(0,n.jsx)(t.code,{children:"kubectl apply"})," the desired resource directly to the Platform cluster. Any plugin can be\nused which enables the request to make its way to the Platform cluster; for example,\ninstead of hitting the cluster directly, it could commit or open a PR to a GitHub\nrepository that is being used to deploy resources to the Platform cluster via GitOps."]}),"\n",(0,n.jsx)(t.p,{children:"Once Kratix and Backstage are wired up, Backstage will read from the Destination and\npopulate the UI as shown below:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Promise in Backstage",src:a(5240).Z+"",width:"1679",height:"862"})}),"\n",(0,n.jsxs)(t.p,{children:["A user can then make a ",(0,n.jsx)(t.a,{href:"../reference/resources/intro",children:"Resource request"}),' to Kratix by\nclicking "Create" in the top right, selecting the Kafka form and filling out the details:']}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Backstage Template",src:a(8921).Z+"",width:"1675",height:"731"})}),"\n",(0,n.jsx)(t.p,{children:"The last step is to ensure that a component in Backstage appears to represent the Resource\nthe user requested. The Kafka Promise achieves this as part of the Resource workflow, as\nshown below:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:'#!/usr/bin/env sh\n\nset -eux\n\n# Read current values from the provided resource request\nexport name="$(yq eval \'.metadata.name\' /kratix/input/object.yaml)"\n\n...\n\nmkdir -p /kratix/output/backstage/\n\ncat <<EOF > /kratix/output/backstage/component.yaml\napiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: kafka-${name}\n  title: "Kafka ${name}"\n  description: Kafka created via the Promise\n  annotations:\n    backstage.io/kubernetes-label-selector: kafka=${name}\n  links:\n  - url: https://github.com/syntasso/kratix-marketplace\n    title: Support\n    icon: help\nspec:\n  type: service\n  lifecycle: production\n  owner: kratix-worker\n  dependsOn:\n    - component:default/kafka\n  providesApis:\n    - kafka-promise-api\nEOF\n\necho """\n- directory: backstage\n  matchLabels:\n    environment: backstage\n""" >> /kratix/metadata/destination-selectors.yaml\n'})}),"\n",(0,n.jsx)(t.p,{children:"This results in the instance being displayed in Backstage:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Backstage Instance",src:a(854).Z+"",width:"1296",height:"792"})}),"\n",(0,n.jsx)(t.h3,{id:"support",children:"Support"}),"\n",(0,n.jsxs)(t.p,{children:["Having difficulties with Backstage and Kratix? Get in touch with us at\n",(0,n.jsx)(t.a,{href:"mailto:feedback@syntasso.io?subject=Kratix%20Feedback",children:"feedback@syntasso.io"})," or\n",(0,n.jsx)(t.a,{href:"https://github.com/syntasso/kratix/issues/new",children:"open a GitHub Issue"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},6098:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/k+backstage-7379c9be604de3b442263bcd9c3fe9c9.png"},5240:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/backstage-promise-2de7ce1b218a6910263adcf48b71d3dc.png"},854:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/backstage-resource-d4da725ecaa9b36ab2c4b25c3894eb45.png"},8921:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/backstage-template-5867e1683d7093747dc823dbbeec543f.png"},1151:(e,t,a)=>{a.d(t,{Z:()=>o,a:()=>i});var n=a(7294);const s={},r=n.createContext(s);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);