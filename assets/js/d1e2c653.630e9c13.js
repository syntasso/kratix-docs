"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[8353],{3539:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var s=i(5893),r=i(1151);const t={title:"Promise Custom Resource",sidebar_label:"Introduction",description:"Documentation for the Kratix Promise Custom Resource"},o="Promises",a={id:"main/reference/promises/intro",title:"Promise Custom Resource",description:"Documentation for the Kratix Promise Custom Resource",source:"@site/docs/main/03-reference/11-promises/01-intro.md",sourceDirName:"main/03-reference/11-promises",slug:"/main/reference/promises/intro",permalink:"/main/reference/promises/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/main/03-reference/11-promises/01-intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Promise Custom Resource",sidebar_label:"Introduction",description:"Documentation for the Kratix Promise Custom Resource"},sidebar:"mainSidebar",previous:{title:"Reference",permalink:"/category/reference"},next:{title:"Deleting",permalink:"/main/reference/promises/delete"}},l={},c=[{value:"Use Case",id:"use-case",level:2},{value:"Benefits",id:"benefits",level:2},{value:"Promise API",id:"promise-api",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"promises",children:"Promises"}),"\n",(0,s.jsx)(n.p,{children:"Conceptually, Kratix Promises are the building blocks that enable teams to design\nplatforms that specifically meet their customer needs."}),"\n",(0,s.jsx)(n.p,{children:"Technically, a Promise is a YAML document that defines a contract between the Platform and its users."}),"\n",(0,s.jsx)(n.h2,{id:"use-case",children:"Use Case"}),"\n",(0,s.jsx)(n.p,{children:"Consider the task of setting up development environments for application teams.\nThis task is usually repetitive and requires many cookie-cutter steps. It may\ninvolve wiring up Git repos, spinning up a CI/CD server, creating a PaaS to run\nthe applications, instructing CI/CD to listen to the Git repos and push\nsuccessful builds into the PaaS, and finally wiring applications to their\nrequired data services."}),"\n",(0,s.jsx)(n.p,{children:"A Promise can encapsulate all the required steps and handle the toil of running\nthose low-level tasks. It can be designed as a single Promise that does it all,\nor it can be a collection of Promises that, combined, deliver the desired\nfunctionality."}),"\n",(0,s.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,s.jsx)(n.p,{children:"Promises:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"enable you to build your platform incrementally and in response to the needs\nof your users."}),"\n",(0,s.jsx)(n.li,{children:"codify the contract between platform teams and application teams for the\ndelivery of a specific service, e.g. a database, an identity service, a\nsupply chain, or a complete development pipeline of patterns and tools."}),"\n",(0,s.jsx)(n.li,{children:"are easy to build, deploy, and update."}),"\n",(0,s.jsx)(n.li,{children:"are shareable and reusable between platforms, teams, business units, and other\norganisations."}),"\n",(0,s.jsx)(n.li,{children:"add up to a frictionless experience when platform users want to create\nservices that they need to deliver value."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To see Promises in-action, check out the guides: ",(0,s.jsx)(n.a,{href:"../../guides/installing-a-promise",children:"Installing a Promise"})," and ",(0,s.jsx)(n.a,{href:"../../guides/writing-a-promise",children:"Writing a Promise"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"promise-api",children:"Promise API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  # Name of the Promise; what the platform team will manage in the platform cluster\n  name: promise-name\n  labels:\n    # optional: the version of this promise\n    kratix.io/promise-version: v1.0.0\nspec:\n  # Check the scheduling docs for details\n  destinationSelectors:\n    - matchLabels:\n        # Arbitrary key/value pairs that will be used for scheduling\n        key: value\n\n  # A list of Promises that are required by the Promise\n  # All required Promises must be present and available for this promise to be made available\n  requiredPromises:\n    - name: required-promise-name\n      version: required-promise-version\n\n  # Array of Kubernetes resources to be scheduled to matching Workers\n  dependencies:\n    - apiVersion: apps/v1\n      kind: Deployment\n      metadata:\n        name: service-operator\n    -  #...\n    -  #...\n\n  # API that a Platform User will use to request an Resource from this Promise\n  api:\n    apiVersion: apiextensions.k8s.io/v1\n    kind: CustomResourceDefinition\n    # ...\n\n  # Ordered set of tasks to run during a Promise and Resource lifecycle\n  workflows:\n    # Tasks to be run only during the Resource lifecycle\n    resource:\n      # Tasks to be run only on creation, maintenance, or update of a Resource\n      configure:\n        # A Kratix provided Pipeline that runs an ordered set of OCI compliant images\n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: configure-resource\n          spec:\n            containers:\n              - name: pipeline-stage-0\n                image: myorg/pipeline-image-1 # Kubernetes defaults to docker.io\n              - name: pipeline-stage-1\n                image: ghcr.io/myorg/pipeline-image-2\n              -  #...\n    # Tasks to be run only during the Promise lifecycle\n    promise:\n      # Tasks to be run only on creation, maintenance, or update of the Promise\n      configure:\n        # A Kratix provided Pipeline that runs an ordered set of OCI compliant images\n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: configure-promise\n          spec:\n            containers:\n              - name: pipeline-stage-0\n                image: myorg/pipeline-image-1 # Kubernetes defaults to docker.io\n              - name: pipeline-stage-1\n                image: ghcr.io/myorg/pipeline-image-2\n              -  #...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["It's also possible to install Promises via a Promise Release. Check the ",(0,s.jsx)(n.a,{href:"../promises/releases",children:"Promise Release"})," docs for details."]})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>o});var s=i(7294);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);