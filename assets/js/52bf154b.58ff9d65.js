"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[5750],{3660:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"ske/reference/healthdefinition","title":"Health Definition","description":"Documentation for the Health Definition Custom Resource","source":"@site/docs/ske/03-reference/03-health-definition.md","sourceDirName":"ske/03-reference","slug":"/ske/reference/healthdefinition","permalink":"/ske/reference/healthdefinition","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/ske/03-reference/03-health-definition.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"description":"Documentation for the Health Definition Custom Resource","title":"Health Definition","sidebar_label":"Health Definition","id":"healthdefinition"},"sidebar":"skeSidebar","previous":{"title":"SKE Operator","permalink":"/ske/reference/ske-operator"},"next":{"title":"Guides","permalink":"/category/guides-1"}}');var o=t(4848),a=t(8453);const r={description:"Documentation for the Health Definition Custom Resource",title:"Health Definition",sidebar_label:"Health Definition",id:"healthdefinition"},s="Health Definition",c={},h=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"health-definition",children:"Health Definition"})}),"\n",(0,o.jsx)(n.p,{children:"The Health Definition Custom Resource Definition (CRD) is the outline of a task that will be performed on a\nDestination to verify the health of a Resource Request."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: platform.kratix.io/v1alpha1\nkind: HealthDefinition\nmetadata:\n  name: healthdefinition\n  namespace: default\nspec:\n  # A reference to the Resource Request the Health Check should be performed against\n  resourceRef:\n    name: request-name\n    namespace: default\n  # A reference the Promise the Health Check should be performed against\n  promiseRef:\n    name: promise-name\n  # The time or interval the check should run against\n  # This can follow Cron syntax or macros such as @hourly\n  schedule: "* * * * *"\n  # The definition of the Resource the check will be performed against\n  input: |\n    apiVersion: mypromise.org/v1\n    kind: someservice\n    metadata:\n        name: someservice\n        namespace: default\n    spec:\n        example: data\n    status:\n        url: test.com\n  #\xa0The task to be performed on the destination\n  workflow:\n    # A Pipeline that runs an ordered set of OCI compliant images to perform health checks\n    apiVersion: platform.kratix.io/v1alpha1\n    kind: Pipeline\n    metadata:\n      name: health\n    spec:\n      containers:\n        - image: ghcr.io/myorg/health-check\n          name: health\n'})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);