"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[6394],{3392:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"main/reference/health-checks/healthrecord","title":"Health Record","description":"Documentation for the Health Definition Custom Resources","source":"@site/docs/main/03-reference/16-health-checks/03-health-record.md","sourceDirName":"main/03-reference/16-health-checks","slug":"/main/reference/health-checks/healthrecord","permalink":"/main/reference/health-checks/healthrecord","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/main/03-reference/16-health-checks/03-health-record.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"description":"Documentation for the Health Definition Custom Resources","title":"Health Record","sidebar_label":"Health Record","id":"healthrecord"},"sidebar":"mainSidebar","previous":{"title":"Health Definition","permalink":"/main/reference/health-checks/healthdefinition"},"next":{"title":"Kratix Config","permalink":"/main/reference/kratix-config/config"}}');var r=n(4848),o=n(8453);const i={description:"Documentation for the Health Definition Custom Resources",title:"Health Record",sidebar_label:"Health Record",id:"healthrecord"},c=void 0,s={},h=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"A Health Record details the result of a Health Check that has run on a given Destination. When a Health Record exists for a given Resource Request, Kratix will update the Resource Request to reflect the details in the Health Record."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"apiVersion: platform.kratix.io/v1alpha1\nkind: HealthRecord\nmetadata:\n  name: healthrecord-example\ndata:\n  promiseRef:\n    name: promise-name\n  # A reference to the Resource Request the Health Check should be performed against  \n  resourceRef:\n    name: request-name\n    namespace: default\n  # The condition of the Health Check\n  #\xa0Can be unknown, ready, unhealthy, healthy or degraded\n  state: ready\n  # The timestamp of the last time the Heath Check was executed\n  lastRun: 1531958400\n  # Optional: any additional details\n  details:\n    example: data\n"})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var a=n(6540);const r={},o=a.createContext(r);function i(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);