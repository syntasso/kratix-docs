"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[458],{974:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var r=a(5273),n=a(4848),o=a(8453),i=a(2546);const s={slug:"healthcheck-progressive-rollout",title:"New in Kratix: Health Checks and Progressive Rollout",description:"Progressive rollout with healthcheck",authors:["chunyi","derik"],tags:["kratix","SKE","healthcheck","upgrade"]},l=void 0,h={authorsImageUrls:[void 0,void 0]},c=[{value:"What\u2019s the Problem?",id:"whats-the-problem",level:2},{value:"Health Checks to the Rescue",id:"health-checks-to-the-rescue",level:2},{value:"Progressive Rollouts in Action",id:"progressive-rollouts-in-action",level:2},{value:"What&#39;s next",id:"whats-next",level:2}];function u(e){const t={a:"a",h2:"h2",li:"li",ol:"ol",p:"p",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Earlier this year, we introduced an exciting new capability in Kratix: ",(0,n.jsx)(t.a,{href:"/main/guides/resource-health",children:"health checks for resources"}),".\nThis addition allows platform teams and app developer to easily observe the status of their requested workloads, without the need to switch context and find it in Destinations."]}),"\n",(0,n.jsx)(t.p,{children:"In this blog, we\u2019ll discuss how you can use it to support progressive rollouts when updating Promises."}),"\n",(0,n.jsx)(t.h2,{id:"whats-the-problem",children:"What\u2019s the Problem?"}),"\n",(0,n.jsx)(t.p,{children:"When a Promise gets updated, say with a new version of a Helm chart, the standard behavior in Kratix is to reconcile and update all resource requests at once.\nThat\u2019s fine in simple dev environments, but for complex workloads, upgrading everything at once is risky.\nA failed update could disrupt many environments simultaneously, and debugging becomes difficult when failures are scattered."}),"\n",(0,n.jsx)(t.p,{children:"Platform engineers need a safer approach: progressive rollouts. Instead of deploying changes to your entire fleet at once,\nprogressive rollout allows teams to introduce updates gradually to limit the impact, gather early feedback,\nand catch potential bugs before releasing broadly.\nBut for that to work, Kratix needs a way to understand the health of each individual resource during and after an upgrade."}),"\n","\n",(0,n.jsx)(t.h2,{id:"health-checks-to-the-rescue",children:"Health Checks to the Rescue"}),"\n",(0,n.jsx)(t.p,{children:"Platforms are often described as a black box - you need to integrate dozens of tools into complicated data ingestion\nand dashboard platforms to understand what is happening with all your resources.\nFor a long time, Platforms orchestrated by Kratix were no different. The new health check feature enables Promise authors\nto define custom health validation logic for the resources their Promise provisions, which means not only can you report\nback basic health data (ready, degraded, failed etc.) but also context relevant that can be used to drive other processes,\nfor example connection strings to access your database resource, or the unique ID name of the application you've just deployed."}),"\n",(0,n.jsx)(t.p,{children:"Here\u2019s how it works:"}),"\n",(0,n.jsxs)(t.p,{children:["You can simply update your existing Promise resource configure workflow to output a ",(0,n.jsx)(t.a,{href:"/ske/reference/healthdefinition",children:"HealthDefinition"}),",\nwhich contains structured instructions on how to perform health checks against requested resources in a Destination or external system.\nKratix reads the health status and automatically updates the status of each resource request."]}),"\n",(0,n.jsx)(t.p,{children:"By including a HealthDefinition, you give Kratix insight into the runtime state of each resource, whether it\u2019s ready, degraded, or failed.\nWith better visibility into Resource health, Promise authors now have the foundation for more complex orchestration, such as progress rollout."}),"\n","\n",(0,n.jsxs)("figure",{className:"diagram",children:[(0,n.jsx)("img",{className:"large",src:i.A,alt:"High-level diagram of how Health Check works in Kratix"}),(0,n.jsx)("figcaption",{children:"How Health Checks works in SKE"})]}),"\n",(0,n.jsxs)(t.p,{children:["Health Definition includes all the necessary information to execute the Health Check workflow in a Destination.\nAs part of the ",(0,n.jsx)(t.a,{href:"/ske",children:"Syntasso Kratix Enterprise"})," offering, we provide a ",(0,n.jsx)(t.a,{href:"https://docs.kratix.io/ske/kratix/ske-health-agent",children:"SKE Health Agent"})," that\ncan reconcile Health Definition in a Kubernetes Destination.\nIf you're not using SKE, you will need to bring your own agent to act on Health Definitions.\nYou can also refer to our ",(0,n.jsx)(t.a,{href:"/main/guides/resource-health",children:"Surfacing health information"})," guide on how to run health checks\nwithout an agent in the Platform Cluster."]}),"\n",(0,n.jsx)(t.h2,{id:"progressive-rollouts-in-action",children:"Progressive Rollouts in Action"}),"\n",(0,n.jsx)(t.p,{children:"Let\u2019s say your Promise provisions PostgreSQL as a service. You\u2019re installing a new version of the Promise that updates some of it default configurations."}),"\n",(0,n.jsx)(t.p,{children:"In your PostgreSQL Promise resource configure workflow, you can include a container that can"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"output a HealthDefinition to check Postgres health"}),"\n",(0,n.jsx)(t.li,{children:"use Kubernetes Leases to ensure it only continues the workflow when it acquires the lease"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"With Health Checks enabled and set up in your Platform and Destinations, when you update the Promise:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Kratix begins updating resource requests"}),"\n",(0,n.jsx)(t.li,{children:"One of the Resource Configure workflow acquires the Lease"}),"\n",(0,n.jsx)(t.li,{children:"Lease is only released after Health checks report a healthy status, ensuring Resources are upgraded one by one"}),"\n",(0,n.jsx)(t.li,{children:"When there's a failed upgrade, Lease are never released and rollout is paused and the failed state is visible in the resource request status"}),"\n",(0,n.jsx)(t.li,{children:"Kratix continues upgrading Resources one by one until all of them are upgraded and reported healthy"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"This progressive delivery strategy has a myriad of benefits:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Mitigate risk and downtime\nBy gradually exposing changes to a small percentage of users, you limit the blast radius of bugs or failures.\nIf something goes wrong, the impact is contained and easier to recover from."}),"\n",(0,n.jsx)(t.li,{children:"Improve debuggability\nSmaller rollouts make it significantly easier to isolate and troubleshoot issues.\nYou\u2019re not drowning in signals from a full-scale deployment, so you can focus on specific failure cases as they arise."}),"\n",(0,n.jsx)(t.li,{children:"Fast feedback loops for experimental features.\nYou can gather real-world data on performance metrics, error rates, and user feedback from a limited rollout,\nand use them to validate assumptions before proceeding further."}),"\n",(0,n.jsx)(t.li,{children:"Increased trust in your platform\nStakeholders: developers, operators, and other users, will gain confidence in the platform when they see that changes\nare deployed safely and reliably, with safeguards in place to detect and respond to issues."}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"whats-next",children:"What's next"}),"\n",(0,n.jsx)(t.p,{children:"With the introduction of health checks in Kratix, platform engineers and Promise authors now have a powerful tool to drive safer, smarter, and more observable upgrades.\nBy embedding health logic directly into resource workflows, Kratix can track the status of each individual resource and gate rollout progression accordingly."}),"\n",(0,n.jsx)(t.p,{children:"This unlocks the ability to perform progressive rollouts - updating one resource at a time, validating its health before proceeding.\nThis dramatically reduces the risk of widespread failures and makes it easier to pinpoint and debug issues when they occur.\nIt also brings greater confidence and control to platform teams managing complex workloads across multiple environments."}),"\n",(0,n.jsxs)(t.p,{children:["If you\u2019re looking to improve the reliability and maintainability of your service updates, health checks are a foundational step forward.\nCheck out our ",(0,n.jsx)(t.a,{href:"/ske/guides/healthchecks",children:"step-by-step guide"})," to get started.\nWe are working to add more Kratix native functionalities to make progressive upgrades easier for Promise authors, and are always keen to hear your thoughts and feedback.\nLet us know how you\u2019re using them\u2014we\u2019d love to hear from you in our Slack or GitHub communities."]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},2546:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/guide-healthcheck-arch-5f1f9d697aecb27b28d3487eb7eb8182.png"},5273:e=>{e.exports=JSON.parse('{"permalink":"/blog/healthcheck-progressive-rollout","source":"@site/blog/2025-05-27-healthchecks-progressive-rollout/index.mdx","title":"New in Kratix: Health Checks and Progressive Rollout","description":"Progressive rollout with healthcheck","date":"2025-05-27T00:00:00.000Z","tags":[{"inline":true,"label":"kratix","permalink":"/blog/tags/kratix"},{"inline":true,"label":"SKE","permalink":"/blog/tags/ske"},{"inline":true,"label":"healthcheck","permalink":"/blog/tags/healthcheck"},{"inline":true,"label":"upgrade","permalink":"/blog/tags/upgrade"}],"readingTime":5.15,"hasTruncateMarker":true,"authors":[{"name":"Chunyi Lyu","title":"Engineer @ Syntasso","url":"https://github.com/ChunyiLyu","imageURL":"https://github.com/ChunyiLyu.png","key":"chunyi","page":null},{"name":"Derik Evangelista","title":"Engineer @ Syntasso","url":"https://github.com/kirederik","imageURL":"https://2.gravatar.com/avatar/7ac63fbda18c97f6a7fab8af157021367793187f4c5830eb722ff565c5a767e9?size=256","key":"derik","page":null}],"frontMatter":{"slug":"healthcheck-progressive-rollout","title":"New in Kratix: Health Checks and Progressive Rollout","description":"Progressive rollout with healthcheck","authors":["chunyi","derik"],"tags":["kratix","SKE","healthcheck","upgrade"]},"unlisted":false,"prevItem":{"title":"Introducing the SKE Headlamp Plugin","permalink":"/blog/introducing-ske-headlamp"},"nextItem":{"title":"Speeding up local dev: fast feedback when building pipelines","permalink":"/blog/local-dev-pipelines"}}')},8453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>s});var r=a(6540);const n={},o=r.createContext(n);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);