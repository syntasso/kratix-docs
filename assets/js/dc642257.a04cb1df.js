"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[3038],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(96540);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}},58075:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ske/promise-testing-framework/reference/kratix-test-stage","title":"kratix test stage","description":"A command for testing Kratix Promise stages","source":"@site/docs/ske/02-promise-testing-framework/reference/02_kratix-test-stage.md","sourceDirName":"ske/02-promise-testing-framework/reference","slug":"/ske/promise-testing-framework/reference/kratix-test-stage","permalink":"/ske/promise-testing-framework/reference/kratix-test-stage","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/ske/02-promise-testing-framework/reference/02_kratix-test-stage.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"skeSidebar","previous":{"title":"kratix test pipeline","permalink":"/ske/promise-testing-framework/reference/kratix-test-pipeline"},"next":{"title":"Reference","permalink":"/category/reference-1"}}');var s=n(74848),i=n(28453);const a={},o="kratix test stage",c={},d=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Flags",id:"flags",level:2},{value:"See Also",id:"see-also",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"kratix-test-stage",children:"kratix test stage"})}),"\n",(0,s.jsx)(t.p,{children:"A command for testing Kratix Promise stages"}),"\n",(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(t.p,{children:"The command for testing Kratix Promise stages.\nThis command will run your container stage and validate that\nthe output generated by the container matches the contents of the --output-dir.\nExample: kratix test stage LIFECYCLE/ACTION/PIPELINE-NAME my-stage-name --input-dir input-directory/ --expected-output-dir expected-outputs/"}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"test stage [flags]\n"})}),"\n",(0,s.jsx)(t.h2,{id:"flags",children:"Flags"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'--build                        Build the image from the workflow path before running the test\n--build-args string            Extra build arguments to pass to the container run command\n--buildx                       Run the test containers using Buildx\n--command string               The command to run on the specified container\n-d, --dir string                   Directory to read the Promise from (default ".")\n-e, --engine string                The container engine to use when running the test containers (default "docker")\n--env strings                  The environment variables to provide to the test container (e.g. DRY_RUN=true,ENVIRONMENT=dev)\n-o, --expected-output-dir string   The directory containing the expected output files to compare to the generated output\n-h, --help                         help for stage\n--image-tag string             Name and a tag of the container image\n'})}),"\n",(0,s.jsx)(t.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"/ske/promise-testing-framework/reference/kratix-test",children:"kratix test"}),": The kratix test CLI command"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);