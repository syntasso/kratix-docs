"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[8423],{24243:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ske/integrations/mcp","title":"MCP Server","description":"Documentation for a Kratix generated MCP server","source":"@site/docs/ske/10-integrations/15-mcp.mdx","sourceDirName":"ske/10-integrations","slug":"/ske/integrations/mcp","permalink":"/ske/integrations/mcp","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/ske/10-integrations/15-mcp.mdx","tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"title":"MCP Server","description":"Documentation for a Kratix generated MCP server","sidebar_label":"MCP Server"},"sidebar":"skeSidebar","previous":{"title":"Backstage Development Image","permalink":"/ske/integrations/backstage/backstage-development-image"},"next":{"title":"Port","permalink":"/ske/integrations/port"}}');var i=t(74848),r=t(28453);const o={title:"MCP Server",description:"Documentation for a Kratix generated MCP server",sidebar_label:"MCP Server"},a=void 0,c={},l=[{value:"Background",id:"background",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installing the server",id:"installing-the-server",level:2},{value:"Querying your platform",id:"querying-your-platform",level:2},{value:"Debugging the server",id:"debugging-the-server",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,i.jsx)(n.p,{children:"Model Context Protocol (MCP) is an emerging open-standard for defining how AI clients can\nspeak to backend services. Moving beyond static API connections where each update needs\nto be registered with the AI client, MCP connections provide dynamic discovery of new\nofferings from the connection."}),"\n",(0,i.jsx)(n.p,{children:"When you invest in Promises as a standard for your platform APIs, you want your user's AI\nclients to immediately onboard and discover these new capabilities. With the MCP\nextension for Syntasso Kratix Enterprise you can run your own remote MCP server which\nconnects to your bespoke platform APIs and exposes them in a standard and secure way to\nyour customer AI clients such as Claude and OpenAI."}),"\n",(0,i.jsx)(n.p,{children:"This integration provides you a personalised MCP server to interrogate and work with your\nspecific platform, all still protected by your platform approved Promise workflows."}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.p,{children:["To get started, you will need a SKE Token. You can request a token via the\n",(0,i.jsx)(n.a,{href:"https://www.syntasso.io/pricing",children:"Syntasso"}),' website by clicking the "Try SKE Today"\nbutton.']}),"\n",(0,i.jsx)(n.p,{children:"In addition, you will need:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://claude.ai/download",children:"Claude Desktop"})," ",(0,i.jsx)(n.em,{children:"(Note: reach out for support for other clients)"})]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.a,{href:"https://docs.claude.com/en/docs/claude-code/settings",children:"settings config"})," file needs to exist.\nOn a mac, this will be ",(0,i.jsx)(n.code,{children:"~/Library/Application\\ Support/Claude/claude_desktop_config.json"})]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.gnu.org/software/make/#download",children:"Make"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installing-the-server",children:"Installing the server"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"This server can be installed locally or in Kubernetes. These instructions are to install\nand connect to a local instance."})}),"\n",(0,i.jsxs)(n.p,{children:["Download the ",(0,i.jsx)(n.a,{href:"http://syntasso-enterprise-releases.s3-website.eu-west-2.amazonaws.com/#ske-mcp-server/latest/",children:"latest release"})," and untar locally. Enter the release directory from your\nterminal and run ",(0,i.jsx)(n.code,{children:"make install-claude"}),". This will update your Claude Desktop\n",(0,i.jsx)(n.a,{href:"https://modelcontextprotocol.io/docs/develop/connect-local-servers#:~:text=Access%20Developer%20Settings",children:"developer settings"}),"\nto include the SKE MCP Server."]}),"\n",(0,i.jsx)(n.p,{children:"Close and re-open Claude Desktop to reload the configuration."}),"\n",(0,i.jsx)(n.h2,{id:"querying-your-platform",children:"Querying your platform"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"MCP Request",src:t(89042).A+"",width:"1021",height:"762"})}),"\n",(0,i.jsxs)(n.p,{children:["This server depends on access to the Kubernetes cluster that is running Kratix. The\ndefault configuration file used is ",(0,i.jsx)(n.code,{children:"$HOME/.kube/config"})," but this can be overridden\nwith the ",(0,i.jsx)(n.code,{children:"$KUBECONFIG"})," environment variable."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"MCP Kratix Server",src:t(74388).A+"",width:"2032",height:"1448"})}),"\n",(0,i.jsx)(n.p,{children:"The key tools provided include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"kratix_health"}),"\n",(0,i.jsx)(n.li,{children:"list_namespaces"}),"\n",(0,i.jsx)(n.li,{children:"get_destination_contexts"}),"\n",(0,i.jsx)(n.li,{children:"list_destinations"}),"\n",(0,i.jsx)(n.li,{children:"get_ready_destinations"}),"\n",(0,i.jsx)(n.li,{children:"list_promises"}),"\n",(0,i.jsx)(n.li,{children:"get_promise"}),"\n",(0,i.jsx)(n.li,{children:"get_promise_spec_schema"}),"\n",(0,i.jsx)(n.li,{children:"fetch_destination_contexts"}),"\n",(0,i.jsx)(n.li,{children:"fetch_ready_destinations"}),"\n",(0,i.jsx)(n.li,{children:"fetch_full_promises"}),"\n",(0,i.jsx)(n.li,{children:"fetch_promises"}),"\n",(0,i.jsx)(n.li,{children:"fetch_promise"}),"\n",(0,i.jsx)(n.li,{children:"fetch_promise_input_schema"}),"\n",(0,i.jsx)(n.li,{children:"validate_promise_request"}),"\n",(0,i.jsx)(n.li,{children:"submit_promise_request"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"With these, you can ask questions like:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"What can I request from my platform?"}),"\n",(0,i.jsx)(n.li,{children:"What namespaces do I have <insert Promise type> resources?"}),"\n",(0,i.jsx)(n.li,{children:"What destinations can I deploy my <insert Promise type> to?"}),"\n",(0,i.jsx)(n.li,{children:"I need a <insert Promise type>, what can I configure?"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"debugging-the-server",children:"Debugging the server"}),"\n",(0,i.jsxs)(n.p,{children:["You may want to interrogate the server without Claude Desktop. This is possible with MCP\nInspector which you can run with ",(0,i.jsx)(n.code,{children:"make dev"}),". Once the site is loaded, make sure the\nTransport Type is set to STDIO and connect to the server and use the tools provided."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"MCP Inspector",src:t(73454).A+"",width:"1751",height:"877"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},73454:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/mcp-inspector-415cd0bb1f3160acafa203b69da798cd.png"},74388:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/mcp-kratix-server-14f8f9b34b6ad195c5fb478ed84bfd26.png"},89042:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/mcp-request-8e2c1cdaf2c006acc563b2be0420c6a6.png"}}]);