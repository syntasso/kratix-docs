"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[3062],{28453:(e,o,n)=>{n.d(o,{R:()=>t,x:()=>a});var r=n(96540);const s={},i=r.createContext(s);function t(e){const o=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(i.Provider,{value:o},e.children)}},91556:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>m,contentTitle:()=>a,default:()=>l,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"main/reference/promises/compound","title":"Compound Promises","description":"Reference documentation on Compound Promises","source":"@site/docs/main/03-reference/11-promises/07-compound.md","sourceDirName":"main/03-reference/11-promises","slug":"/main/reference/promises/compound","permalink":"/main/reference/promises/compound","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/main/03-reference/11-promises/07-compound.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"Compound Promises","sidebar_label":"Compound Promises","description":"Reference documentation on Compound Promises"},"sidebar":"mainSidebar","previous":{"title":"Workflows","permalink":"/main/reference/promises/workflows"},"next":{"title":"Workflows","permalink":"/main/reference/workflows"}}');var s=n(74848),i=n(28453);const t={title:"Compound Promises",sidebar_label:"Compound Promises",description:"Reference documentation on Compound Promises"},a=void 0,m={},c=[{value:"Recommended ownership labels",id:"recommended-ownership-labels",level:2}];function d(e){const o={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.p,{children:"A Compound Promise is a Promise that depends on other Promises to deliver its\nservices. This feature allows Platform teams to simplify the build and deliver\nof Golden Paths, composing many lower level Promises into higher-level\nabstractions."}),"\n",(0,s.jsxs)(o.p,{children:["For details on how to use a Compound Promise, check ",(0,s.jsx)(o.a,{href:"/main/guides/compound-promises",children:"this\nguide"}),". If you are looking to write a compound\npromise, ",(0,s.jsx)(o.a,{href:"/workshop/part-ii/compound-promise",children:"check the Writing a Promise workshop."})]}),"\n",(0,s.jsx)(o.p,{children:"This page contains reference documentation for building better Compound Promises."}),"\n",(0,s.jsx)(o.h2,{id:"recommended-ownership-labels",children:"Recommended ownership labels"}),"\n",(0,s.jsx)(o.p,{children:"A typical Compound Promise will execute a Resource Configure workflow that will\noutput Resource Requests for other Promises deployed in the Platform. In order\nto highlight that these Resources belong to a Request made to a Compound\nPromise, we recommend adding the following labels to each sub-Promise Request in\nyour Workflow:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-yaml",children:"kratix.io/component-of-promise-name: <The name of the Compound Promise>\nkratix.io/component-of-resource-name: <The name of the Compount Promise Request>\nkratix.io/component-of-resource-namespace: <The namespace of the Compound Promise Reqeust>\n"})}),"\n",(0,s.jsxs)(o.p,{children:["Both the ",(0,s.jsx)(o.a,{href:"/main/kratix-cli/intro",children:"Kratix CLI"})," and the\n",(0,s.jsx)(o.a,{href:"/ske/installing-ske/ske-gui",children:"SKE GUI"}),"  provide ways to visualise the tree\nof Resource Requests created out of a Compound Promise request. For more details, check\nthe ",(0,s.jsx)(o.a,{href:"/main/kratix-cli/reference/kratix-platform",children:"Kratix CLI platform command"})," and\nthe ",(0,s.jsx)(o.a,{href:"/ske/guides/ske-gui",children:"SKE GUI documentation"}),"."]})]})}function l(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);