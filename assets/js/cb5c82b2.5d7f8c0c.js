"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[1984],{5795:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var n=r(5893),o=r(1151);const s={description:"Learn more about how to deploy Kratix in a prod-like environment",title:"Deployment Topology",id:"intro"},i=void 0,a={id:"main/reference/deployment-topology/intro",title:"Deployment Topology",description:"Learn more about how to deploy Kratix in a prod-like environment",source:"@site/docs/main/05-reference/01-deployment-topology/01-deployment-topology.md",sourceDirName:"main/05-reference/01-deployment-topology",slug:"/main/reference/deployment-topology/",permalink:"/main/reference/deployment-topology/",draft:!1,unlisted:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/main/05-reference/01-deployment-topology/01-deployment-topology.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Learn more about how to deploy Kratix in a prod-like environment",title:"Deployment Topology",id:"intro"},sidebar:"mainSidebar",previous:{title:"Reference",permalink:"/category/reference"},next:{title:"Introduction",permalink:"/main/reference/promises/intro"}},l={},d=[{value:"Kratix platform cluster",id:"kratix-platform-cluster",level:2},{value:"GitOps State Store",id:"gitops-state-store",level:2},{value:"Worker Destinations",id:"worker-destinations",level:2},{value:"Resources",id:"resources",level:3},{value:"Promise Dependencies",id:"promise-dependencies",level:3},{value:"Platform as a Worker",id:"platform-as-a-worker",level:3},{value:"Kratix Marketplace",id:"kratix-marketplace",level:2},{value:"Workflows and Off Kubernetes Resources",id:"workflows-and-off-kubernetes-resources",level:2}];function h(e){const t={a:"a",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"This page walks through the Kratix deployment topology for the Platform team for\nour example organisation EasyEaty. The organisation has a number of Application\nDevelopment teams that all use the Platform to get the services they require."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Overview",src:r(4274).Z+"",width:"3494",height:"3625"})}),"\n",(0,n.jsx)(t.h2,{id:"kratix-platform-cluster",children:"Kratix platform cluster"}),"\n",(0,n.jsxs)(t.p,{children:["The cluster where Kratix is installed is the platform cluster, which is in the\ncentre of the diagram and has the label ",(0,n.jsx)(t.em,{children:"Platform"}),". This is the cluster that\nboth the Platform team and Application Development teams interface with."]}),"\n",(0,n.jsx)(t.p,{children:"The Platform contains three important elements:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Platform API:"}),' the API for consumers of the platform. In the diagram, the\nAPI includes three "internal" APIs and a number of installed APIs.']}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Promises:"})," the components authored and/or installed by the platform team to\ndrive the set of services available in the Platform API. See more about\n",(0,n.jsx)(t.a,{href:"./promises/intro",children:"Kratix Promises"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Destinations:"})," a registry of Kratix Worker Destinations. See more about\n",(0,n.jsx)(t.a,{href:"./destinations/intro",children:"Kratix Destinations"}),"."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"gitops-state-store",children:"GitOps State Store"}),"\n",(0,n.jsxs)(t.p,{children:["When a ",(0,n.jsx)(t.a,{href:"./promises/intro",children:"Kratix Promise"})," is installed, or when a request for a\nnew ",(0,n.jsx)(t.a,{href:"./resources/intro",children:"Resource"})," comes in to the Platform, Kratix will react by\nwriting workloads to the Destination's State Store."]}),"\n",(0,n.jsxs)(t.p,{children:["For example, the State Store in EasyEaty's topology is a Git Repository pictured\nto the right of the platform cluster. When the ",(0,n.jsx)(t.em,{children:"Web App Golden Path"})," Promise was\ninstalled on the Platform, a set of workloads required to fulfil the Promise was\nwritten to that State Store."]}),"\n",(0,n.jsx)(t.h2,{id:"worker-destinations",children:"Worker Destinations"}),"\n",(0,n.jsxs)(t.p,{children:["Kratix Worker Destinations watch and react to changes in the State Store via a\nGitOps toolkit like FluxCD. Kratix requires at least one Worker Destination to\nrun workloads. All Worker Destinations are registered to the Platform via the\nKratix API (see more about ",(0,n.jsx)(t.a,{href:"./destinations/intro",children:"Kratix Destinations"}),")."]}),"\n",(0,n.jsxs)(t.p,{children:["For example, in the diagram there are three Destinations that are exclusively\nWorkers: ",(0,n.jsx)(t.em,{children:"EKS"}),", ",(0,n.jsx)(t.em,{children:"GKE"}),", and ",(0,n.jsx)(t.em,{children:"On Prem / Edge"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"resources",children:"Resources"}),"\n",(0,n.jsx)(t.p,{children:"The primary role for these Worker Destinations is to run Resources requested by\nconsumers of the platform."}),"\n",(0,n.jsxs)(t.p,{children:["For example, the ",(0,n.jsx)(t.em,{children:"EKS"})," Worker has a number of Resources that were requested by\n",(0,n.jsx)(t.em,{children:"Team 2"})," via the ",(0,n.jsx)(t.em,{children:"Web App Golden Path"})," Promise: two Resources will be created\neach with an instance of Jenkins, two instance of PostgreSQL, and three instance\nof Nginx."]}),"\n",(0,n.jsx)(t.h3,{id:"promise-dependencies",children:"Promise Dependencies"}),"\n",(0,n.jsx)(t.p,{children:"To enable these Resources, each Destination also has a set of Dependencies\ninstalled. These Dependencies are baseline capabilities installed on the\nDestination at the time the Promise is installed on the Platform, and they\nrepresent the software that needs to be running prior to any requested Resource."}),"\n",(0,n.jsxs)(t.p,{children:["For example, when the ",(0,n.jsx)(t.em,{children:"Web App Golden Path"})," Promise was installed on the\nplatform cluster, one of the Dependencies that was immediately installed on the\n",(0,n.jsx)(t.em,{children:"EKS"})," Worker was the Jenkins Operator, which is required before a request for a\nJenkins Resource can be fulfilled."]}),"\n",(0,n.jsx)(t.h3,{id:"platform-as-a-worker",children:"Platform as a Worker"}),"\n",(0,n.jsxs)(t.p,{children:["The Platform itself can ",(0,n.jsx)(t.em,{children:"also"})," be registered as a Destination, which is required\nif the Platform offers any ",(0,n.jsx)(t.a,{href:"../guides/compound-promises",children:"Compound Promises"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.em,{children:"Web App Golden Path"})," Promise is a Compound Promise because it is composed\nof three lower-level Promises: Jenkins, PostgreSQL, and Nginx. Compound Promises\nallow Platform teams to provide higher-level value by combining lower-level\nPromises available in the Marketplace."]}),"\n",(0,n.jsx)(t.h2,{id:"kratix-marketplace",children:"Kratix Marketplace"}),"\n",(0,n.jsx)(t.p,{children:"In order to populate the lower-level offerings in a Platform, Kratix has\nprovided a number of pre-written Promises ready for use. These Promises can be\ninstalled on a Platform and configured to meet organisational needs. For\nexample, Kratix offers an off-the-shelf Promise for Jenkins, and the Platform\nteam installed this Promise after configuring properties that are specific to\nthe EasyEaty organisation."}),"\n",(0,n.jsx)(t.h2,{id:"workflows-and-off-kubernetes-resources",children:"Workflows and Off Kubernetes Resources"}),"\n",(0,n.jsxs)(t.p,{children:["Kratix Promises include a concept called ",(0,n.jsx)(t.a,{href:"./resources/workflows",children:"Workflows"}),". The\nWorkflows are defined by the Promise author and are executed in the Platform\nduring the Promise lifecycle (for example, when a new Resources is requested\nfrom a Promise). Workflows specify a set of actions that should run to fulfil\nthe lifecycle operation, and they encapsulate a number of organisational\nrequirements."]}),"\n",(0,n.jsxs)(t.p,{children:["For example, when ",(0,n.jsx)(t.em,{children:"Team 2"})," requested the ",(0,n.jsx)(t.em,{children:"Web App Golden Path"})," Promise, the\nconfigure resource Workflow was executed and sent notifications via Slack, set\npup an on-call rota on PagerDuty, and created the appropriate tickets in Zendesk."]})]})}function c(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},4274:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/kratix-arch-full-8fdfe4d00581ef20cc545b4bfb29de1d.png"},1151:(e,t,r)=>{r.d(t,{Z:()=>a,a:()=>i});var n=r(7294);const o={},s=n.createContext(o);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);