"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[5215],{4137:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ske/integrations/backstage/generating-backstage-components","title":"Generating Backstage Components","description":"Documentation for how to use the Backstage Controller to generate Backstage Components","source":"@site/docs/ske/10-integrations/10-backstage/04-generating-backstage-components.mdx","sourceDirName":"ske/10-integrations/10-backstage","slug":"/ske/integrations/backstage/generating-backstage-components","permalink":"/ske/integrations/backstage/generating-backstage-components","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/ske/10-integrations/10-backstage/04-generating-backstage-components.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Generating Backstage Components","description":"Documentation for how to use the Backstage Controller to generate Backstage Components","sidebar_label":"Generating Backstage Components"},"sidebar":"skeSidebar","previous":{"title":"Configuring the Plugins","permalink":"/ske/integrations/backstage/plugins"},"next":{"title":"YAML File Format","permalink":"/ske/integrations/backstage/yaml-file-format"}}');var a=t(4848),o=t(8453);const i={title:"Generating Backstage Components",description:"Documentation for how to use the Backstage Controller to generate Backstage Components",sidebar_label:"Generating Backstage Components"},r=void 0,l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"SKE installation",id:"ske-installation",level:3},{value:"SKE Backstage plugins",id:"ske-backstage-plugins",level:3},{value:"Backstage Destination",id:"destination",level:3},{value:"Installing the Backstage Controller",id:"installing-the-backstage-controller",level:2},{value:"Configure values",id:"configure-values",level:3},{value:"The SKE license",id:"the-ske-license",level:4},{value:"Image registry for Air-gapped Environments",id:"image-registry-for-air-gapped-environments",level:4},{value:"Deploy the Backstage Controller",id:"deploy-the-backstage-controller",level:3},{value:"How does it work?",id:"how-does-it-work",level:2},{value:"Promise Configure",id:"promise-configure",level:3},{value:"Resource Configure",id:"resource-configure",level:3},{value:"Labelling Promises for automatic file generation",id:"labelling-promises-for-automatic-file-generation",level:3},{value:"Customize Backstage Components",id:"customize-backstage-components",level:2},{value:"Custom containers",id:"custom-containers",level:3},{value:"Destination Selectors",id:"destination-selectors",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"The Backstage Controller generates Backstage components and templates for Promises and Resource Requests."}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(n.h3,{id:"ske-installation",children:"SKE installation"}),"\n",(0,a.jsxs)(n.p,{children:["Backstage Controller has dependency on SKE. If you haven't installed SKE, please refer to the ",(0,a.jsx)(n.a,{href:"../../installing-ske/intro",children:"SKE installation guide"}),"."]}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["You will need SKE ",(0,a.jsx)(n.code,{children:"0.28.0"})," or later for Backstage Controller to work."]})}),"\n",(0,a.jsx)(n.h3,{id:"ske-backstage-plugins",children:"SKE Backstage plugins"}),"\n",(0,a.jsxs)(n.p,{children:["The generated Backstage Templates reference an action from the ",(0,a.jsx)(n.code,{children:"ske-backend"})," Backstage plugin, this action is\nused to create a Resource Request.\nThe generated Components are also used by the ",(0,a.jsx)(n.code,{children:"ske-frontend"})," Backstage plugin to display\nPromise and Resource metadata."]}),"\n",(0,a.jsxs)(n.p,{children:["In order to utilise the Templates and Components, you should also install both the\n",(0,a.jsx)(n.code,{children:"ske-backend"})," and ",(0,a.jsx)(n.code,{children:"ske-frontend"})," plugins into your Backstage instance."]}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"./plugins",children:"Configuring the Plugins"})," for installation instructions."]}),"\n",(0,a.jsx)(n.h3,{id:"destination",children:"Backstage Destination"}),"\n",(0,a.jsxs)(n.p,{children:["You must have a Destination created with the ",(0,a.jsx)(n.code,{children:"environment: backstage"})," label. See the\n",(0,a.jsx)(n.a,{href:"./configuring-backstage#configure-a-destination-for-backstage",children:"Kratix Backstage docs"}),"\nfor setup instructions."]}),"\n",(0,a.jsx)(n.h2,{id:"installing-the-backstage-controller",children:"Installing the Backstage Controller"}),"\n",(0,a.jsxs)(n.p,{children:["The Controller is released separately from SKE. Its releases can be found ",(0,a.jsx)(n.a,{href:"../../releases/backstage-controller",children:"here"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The Controller can be installed using the ",(0,a.jsx)(n.a,{href:"https://github.com/syntasso/helm-charts/tree/main/backstage-controller",children:"helm chart"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"You will need to start by adding the Syntasso Helm repository:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"helm repo add syntasso https://syntasso.github.io/helm-charts\nhelm repo update\n"})}),"\n",(0,a.jsx)(n.h3,{id:"configure-values",children:"Configure values"}),"\n",(0,a.jsxs)(n.p,{children:["Helm can accept values via the values file. Any configuration should be placed in a values.yaml file that is then passed in to the helm install command.\nFor all available configurations, please refer to the default values file in ",(0,a.jsx)(n.a,{href:"https://github.com/syntasso/helm-charts/blob/main/backstage-controller/values.yaml",children:"Backstage Controller chart"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Below are instructions on how you could use the values file to configure SKE license and image registry."}),"\n",(0,a.jsx)(n.h4,{id:"the-ske-license",children:"The SKE license"}),"\n",(0,a.jsx)(n.p,{children:"Both the Backstage Controller image and the SKE Backstage Generator image used by the Controller are hosted in a private registry, to access\nthese images, you will need to authenticate using the token you have been provided with."}),"\n",(0,a.jsxs)(n.p,{children:["The Backstage Controller chart will, be default, use a secret named ",(0,a.jsx)(n.code,{children:"syntasso-registry"})," in the ",(0,a.jsx)(n.code,{children:"kratix-platform-system"})," namespace. This secret is created and managed by the SKE operator helm chart.\nIf you wish to create a different image pull secret, you can run the following command:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl create secret docker-registry YOUR-SECRET-NAME \\\n  --namespace=kratix-platform-system \\\n  --docker-server=registry.syntasso.io \\\n  --docker-username=syntasso-pkg \\\n  --docker-password=<YOUR TOKEN>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The above command creates a Kubernetes Secret in namespace ",(0,a.jsx)(n.code,{children:"kratix-platform-system"}),".\nTo use this secret in Backstage Controller chart, you can customize ",(0,a.jsx)(n.code,{children:"imageRegistry.imagePullSecret"})," in your values file."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# Configuration for the image registry\n# Update these values if you are using a private image registry\nimageRegistry:\n  imagePullSecret: YOUR-SECRET-NAME\n# ...\n"})}),"\n",(0,a.jsx)(n.h4,{id:"image-registry-for-air-gapped-environments",children:"Image registry for Air-gapped Environments"}),"\n",(0,a.jsx)(n.p,{children:"You may want to manage the Backstage Controller images within your own environment either\ndue to air-gapped requirements or other security measures."}),"\n",(0,a.jsx)(n.p,{children:"To do this, you will need to set up image mirroring and configure the Backstage Controller distribution to pull images\nfrom your own registry."}),"\n",(0,a.jsx)(n.p,{children:"You must ensure that the following images are mirrored to your own image registry and tagged according to the version."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"registry.syntasso.io/syntasso/backstage-controller"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"registry.syntasso.io/syntasso/ske-backstage-generator"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["You can then customize ",(0,a.jsx)(n.code,{children:"imageRegistry.host"})," in your values file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# Configuration for the image registry\n# Update these values if you are using a private image registry\nimageRegistry:\n  host: "my-org.registry.io"\n...\n'})}),"\n",(0,a.jsx)(n.h3,{id:"deploy-the-backstage-controller",children:"Deploy the Backstage Controller"}),"\n",(0,a.jsx)(n.p,{children:"Next, install Backstage Controller by running:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"helm install backstage-controller syntasso/backstage-controller \\\n  --namespace kratix-platform-system \\\n  --wait \\\n  --values values.yaml # This is optional. Only use if you are configuring custom values.\n"})}),"\n",(0,a.jsx)(n.h2,{id:"how-does-it-work",children:"How does it work?"}),"\n",(0,a.jsx)(n.p,{children:"The SKE Backstage Controller creates a Workflow that automatically generates the Backstage components and\ntemplates for your Promise. This Workflow runs in addition to the Configure Workflow for your Promises and Requests."}),"\n",(0,a.jsx)(n.h3,{id:"promise-configure",children:"Promise Configure"}),"\n",(0,a.jsx)(n.p,{children:"In a Promise Configure workflow, two Backstage manifests will be generated:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Promise Component:"})," A Backstage Component representing the Promise."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Promise Template:"})," A Backstage Template representing the Promise API (i.e. the CRD\nfor Resources created from this Promise)."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"resource-configure",children:"Resource Configure"}),"\n",(0,a.jsx)(n.p,{children:"In a Resource Configure workflow, a single Backstage manifest will be generated:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Resource Component:"})," A Backstage Component representing the Resource."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Check the ",(0,a.jsx)(n.a,{href:"./yaml-file-format",children:"YAML File Format"})," for examples of these manifests"]}),"\n",(0,a.jsx)(n.h3,{id:"labelling-promises-for-automatic-file-generation",children:"Labelling Promises for automatic file generation"}),"\n",(0,a.jsxs)(n.p,{children:["To generate Backstage Components and Template for your Promise, as well as Components for requests for that Promise,\nlabel your Promise with ",(0,a.jsx)(n.code,{children:"kratix.io/backstage: true"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl label promises PROMISE_NAME kratix.io/backstage=true\n"})}),"\n",(0,a.jsx)(n.p,{children:"Or add the label to the Promise spec:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  name: my-promise\n  labels:\n    kratix.io/backstage: "true"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"customize-backstage-components",children:"Customize Backstage Components"}),"\n",(0,a.jsxs)(n.p,{children:["You can customize the automatically generated Backstage Components and Templates by creating ",(0,a.jsx)(n.code,{children:"BackstageEntityCustomization"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: platform.kratix.io/v1alpha1\nkind: BackstageEntityCustomization\nmetadata:\n  name: my-customization\nspec:\n  entityGenerationOptions:\n    promise:\n      component: # options for the generated Promise Component\n        name: my-name # Value for metadata.name\n        title: my-title # Value for metadata.title\n        description: my-description # Value for metadata.description\n        tags: tag1,tag2 # Values for metadata.tags\n        type: my-type # Value for spec.type\n        lifecycle: my-lifeCycle # Value for spec.lifecycle\n        owner: my-owner # Value for spec.owner\n        system: my-system # Value for spec.system\n        subComponentOf: parent-resource # Value for spec.subcomponentOf\n        providesAPIs: api1,api2 # Values for spec.providesAPIs\n        consumesAPIs: api3,api4 # Values for spec.consumesAPIs\n        dependsOn: dependency1,dependency2 # Values for spec.dependsOn\n      template: # options for the generated Promise Template\n        hideNamespace: false # Whether to hide the namespace field\n        defaultNamespace: default # Default namespace to use\n        namespaceFieldTitle: Namespace # Title for the namespace field\n        namespaceFieldDescription: "Your team\'s namespace" # Description for the namespace field\n        singleSpecPage: false # Whether to generate a single spec page for the template\n        title: my-title # Value for metadata.title\n        description: my-description # Value for metadata.description\n        tags: tag1,tag2 # Values for metadata.tags\n        type: my-type # Value for spec.type\n        lifecycle: my-lifeCycle # Value for spec.lifecycle\n        owner: my-owner # Value for spec.owner\n    resource:\n      component:\n        name: my-name # Value for metadata.name\n        title: my-title # Value for metadata.title\n        description: my-description # Value for metadata.description\n        tags: tag1,tag2 # Values for metadata.tags\n        type: my-type # Value for spec.type\n        lifecycle: my-lifeCycle # Value for spec.lifecycle\n        owner: my-owner # Value for spec.owner\n        system: my-system # Value for spec.system\n        subComponentOf: parent-resource # Value for spec.subcomponentOf\n        providesAPIs: api1,api2 # Values for spec.providesAPIs\n        consumesAPIs: api3,api4 # Values for spec.consumesAPIs\n        dependsOn: dependency1,dependency2 # Values for spec.dependsOn\n  destinationSelectors: # optional\n  - matchLabels:\n      environment: backstage\n  containers: # optional\n    - name: add-backstage-group\n      image: ghcr.io/syntasso/run-customization:v0.0.1\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Once you have created the ",(0,a.jsx)(n.code,{children:"BackstageEntityCustomization"}),", you can label your\nPromise with ",(0,a.jsx)(n.code,{children:"kratix.io/backstage-customization: my-customization"})," to apply the\ncustomization to the Promise and its Resource Requests:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl label promises PROMISE_NAME kratix.io/backstage-customization=my-customization\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"Backstage Customizations are cluster-wide resources, so ensure create them with\nunique names"})}),"\n",(0,a.jsx)(n.h3,{id:"custom-containers",children:"Custom containers"}),"\n",(0,a.jsxs)(n.p,{children:["The containers defined in the customization will run after the ",(0,a.jsx)(n.code,{children:"backstage-gen"})," container which generates the\nComponents and Templates. They can be used to modify the existing ",(0,a.jsx)(n.code,{children:"catalog-info.yaml"})," file created by the\n",(0,a.jsx)(n.code,{children:"ske-backstage-generator"})," or it can generate new files. This customization will apply to all Promises with label\n",(0,a.jsx)(n.code,{children:'kratix.io/backstage: "true"'})," as well as Resource Requests for these promises."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["If you want to a particular Resource Request to ",(0,a.jsx)(n.em,{children:"not"})," have a Backstage Component\ngenerated, you can label the Resource Request with ",(0,a.jsx)(n.code,{children:'kratix.io/backstage: "false"'}),"."]})}),"\n",(0,a.jsxs)(n.p,{children:["If you want to edit the Entities or generate different files based on whether the Workflow is running for a\nPromise or Resource Request, the container can query the ",(0,a.jsx)(n.code,{children:"KRATIX_WORKFLOW_TYPE"})," environment variable.\nFor Promises, this is equal to ",(0,a.jsx)(n.code,{children:"promise-backstage-gen"})," and for resources, ",(0,a.jsx)(n.code,{children:"resource-backstage-gen"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"destination-selectors",children:"Destination Selectors"}),"\n",(0,a.jsx)(n.p,{children:"By default, Destination selectors defined in the customization will apply to all generated Backstage components.\nYou can use these to make sure that generated components are only scheduled to your Backstage destinations."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(6540);const a={},o=s.createContext(a);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);