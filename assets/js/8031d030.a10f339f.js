"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[5506],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>t});var r=i(96540);const o={},l=r.createContext(o);function s(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(l.Provider,{value:n},e.children)}},83892:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"main/reference/promises/workflows","title":"Promise Workflows","description":"Documentation for writing Promise Workflows using Kratix Pipelines, covering how Kratix internally executes the Pipeline containers","source":"@site/docs/main/03-reference/11-promises/06-workflows.md","sourceDirName":"main/03-reference/11-promises","slug":"/main/reference/promises/workflows","permalink":"/main/reference/promises/workflows","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/main/03-reference/11-promises/06-workflows.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"description":"Documentation for writing Promise Workflows using Kratix Pipelines, covering how Kratix internally executes the Pipeline containers","title":"Promise Workflows","sidebar_label":"Workflows"},"sidebar":"mainSidebar","previous":{"title":"Versioning","permalink":"/main/reference/promises/releases"},"next":{"title":"Workflows","permalink":"/main/reference/workflows"}}');var o=i(74848),l=i(28453);const s={description:"Documentation for writing Promise Workflows using Kratix Pipelines, covering how Kratix internally executes the Pipeline containers",title:"Promise Workflows",sidebar_label:"Workflows"},t=void 0,a={},c=[{value:"Configure Workflows",id:"configure-workflows",level:2},{value:"Multiple Pipelines",id:"multiple-pipelines",level:3},{value:"Pipeline Failures",id:"pipeline-failures",level:3},{value:"Idempotency",id:"idempotency",level:3},{value:"Delete Workflows",id:"delete-workflows",level:2},{value:"Pipeline Failures",id:"pipeline-failures-1",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"A Kratix Promise may contain workflow definitions for hooking into the Promise lifecycle."}),"\n",(0,o.jsxs)(n.p,{children:["Kratix supports two Promise workflow types: ",(0,o.jsx)(n.code,{children:"configure"})," and ",(0,o.jsx)(n.code,{children:"delete"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"configure"})," workflow runs when the Promise is created, updated, or reconciled."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"delete"})," workflow runs when the Promise is deleted."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Kratix workflows are made up of one or more Pipelines."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"configure"})," workflow may contain multiple Pipelines, which are executed serially."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"delete"})," workflow can only contain a single Pipeline."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Refer to the ",(0,o.jsx)(n.a,{href:"../workflows",children:"Workflows documentation"})," for details on ",(0,o.jsx)(n.strong,{children:"how to\nwrite Kratix Pipelines"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["To define Promise workflows inside a Promise, use ",(0,o.jsx)(n.code,{children:"spec.workflows.promise"})," in the Promise\ndefinition as shown below."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"platform: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  ...\nspec:\n  ...\n  workflows:\n    promise:\n      configure:\n        - # Pipeline definitions (multiple)\n      delete:\n        - # Pipeline definition (single)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configure-workflows",children:"Configure Workflows"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"configure"})," workflow runs when the Promise is created, updated, or reconciled."]}),"\n",(0,o.jsx)(n.h3,{id:"multiple-pipelines",children:"Multiple Pipelines"}),"\n",(0,o.jsxs)(n.p,{children:["Promise Configure workflows allow for ",(0,o.jsx)(n.strong,{children:"multiple"})," Pipelines to be executed in sequence."]}),"\n",(0,o.jsx)(n.p,{children:"This enables step-by-step configuration of declarative state, as each Pipeline ends by\nwriting its output to the Kratix State Store. This means each Pipeline can depend upon\nstate declared during the previous Pipelines."}),"\n",(0,o.jsx)(n.p,{children:"Within each Pipeline, an array of containers are defined, which will also execute in\nsequence."}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:"For simple cases, a single Pipeline with one or many containers will suffice."})}),"\n",(0,o.jsxs)(n.p,{children:["The example below shows how a ",(0,o.jsx)(n.code,{children:"promise.configure"})," workflow can be defined:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"platform: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  ...\nspec:\n  ...\n  workflows:\n    promise:\n      configure:\n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: pipeline-a # Executes first\n          spec:\n            containers:\n              ...\n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: pipeline-b # Follows pipeline-a\n          spec:\n            containers:\n              ...\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, ",(0,o.jsx)(n.code,{children:"pipeline-a"})," will run first, followed by ",(0,o.jsx)(n.code,{children:"pipeline-b"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"pipeline-failures",children:"Pipeline Failures"}),"\n",(0,o.jsxs)(n.p,{children:["A Pipeline fails if any of its ",(0,o.jsx)(n.code,{children:"containers"})," return a non-zero exit code."]}),"\n",(0,o.jsxs)(n.p,{children:["If this occurs, the workflow ",(0,o.jsx)(n.strong,{children:"halts"}),": no further containers are executed within the\nPipeline, and no further Pipelines are executed in the workflow."]}),"\n",(0,o.jsxs)(n.p,{children:["To re-run a workflow following a Pipeline failure, you can perform a\n",(0,o.jsx)(n.a,{href:"/main/learn-more/controlling-with-labels",children:"manual reconciliation"})," of the Resource, which will trigger the\nworkflow again from the beginning."]}),"\n",(0,o.jsx)(n.h3,{id:"idempotency",children:"Idempotency"}),"\n",(0,o.jsx)(n.p,{children:"All commands which run in Configure workflows must be idempotent, as there is a guarantee\nthat they will be run multiple times a day, and may be run much more frequently depending\non other environmental impacts (e.g. Pod restarts)."}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"promise.configure"})," workflow is regularly executed. Kubernetes reconciles on a number\ndifferent actions, including, but not limited to:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Promise creation"}),"\n",(0,o.jsx)(n.li,{children:"Kratix Controller restarts"}),"\n",(0,o.jsx)(n.li,{children:"Changes to the Promise definition"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["In addition to the above, the Kratix Promise Controller will reconcile on a regular cadence\n(10 hours by default, ",(0,o.jsx)(n.a,{href:"/main/reference/kratix-config/config",children:"configurable"}),") to attempt to\nmitigate against any drift that may have occurred. During this reconciliation,\nthe controller will ensure that all the Workflows for a given promise are re-run."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["This reconciliation will not ensure that unchanged documents are re-written to the\nstate store. The reconciliation between workflow outputs and the statestore is\ncurrently only triggered on change. For example, if a file has been deleted from your\nGitStateStore, but the outputs from your workflow have not changed, this will\nnot be rewritten. This will be delivered in\n",(0,o.jsx)(n.a,{href:"https://github.com/syntasso/kratix/issues/254",children:"issue #254"})," if you would like to\nfollow along progress or share your requirements."]})}),"\n",(0,o.jsx)(n.p,{children:"As this reconciliation is managed by the Promise Controller, restarts of the Kratix Controller\nManager may disrupt the regularity of this cadence meaning that the reconciliation interval\nmay be greater than the configured."}),"\n",(0,o.jsx)(n.h2,{id:"delete-workflows",children:"Delete Workflows"}),"\n",(0,o.jsxs)(n.p,{children:["Promise Delete workflows are triggered when a Promise is deleted, and currently only\nsupport a ",(0,o.jsx)(n.strong,{children:"single"})," Pipeline."]}),"\n",(0,o.jsxs)(n.p,{children:["This Pipeline is responsible for cleaning up resources and configurations that were set up\nby the ",(0,o.jsx)(n.code,{children:"promise.configure"})," workflow."]}),"\n",(0,o.jsxs)(n.p,{children:["The example below shows how a ",(0,o.jsx)(n.code,{children:"promise.delete"})," workflow can be defined."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"platform: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  ...\nspec:\n  ...\n  workflows:\n    promise:\n      delete:\n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: delete-pipeline # Single pipeline\n          spec:\n            containers:\n              ...\n"})}),"\n",(0,o.jsx)(n.h3,{id:"pipeline-failures-1",children:"Pipeline Failures"}),"\n",(0,o.jsx)(n.p,{children:"Kratix will trigger the Delete Pipeline exactly once."}),"\n",(0,o.jsxs)(n.p,{children:["If a command fails during container execution, this must be handled ",(0,o.jsx)(n.strong,{children:"within the container\nitself"})," (including any retry attempts)."]}),"\n",(0,o.jsx)(n.p,{children:"Kratix will not automatically reschedule/retry any Pipelines which have failed as part of a Delete\nworkflow."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);