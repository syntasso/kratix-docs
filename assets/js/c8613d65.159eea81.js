"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[355],{2882:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var n=i(5893),o=i(1151);i(9286);const r={id:"promise-workflows",title:"Section B: Improving the Workflows",description:"Learn more about the different types of workflows that can be used within a Promise."},s=void 0,a={id:"workshop/part-ii/promise-workflows",title:"Section B: Improving the Workflows",description:"Learn more about the different types of workflows that can be used within a Promise.",source:"@site/docs/workshop/part-ii/02-promise-workflows.mdx",sourceDirName:"workshop/part-ii",slug:"/workshop/part-ii/promise-workflows",permalink:"/workshop/part-ii/promise-workflows",draft:!1,unlisted:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/workshop/part-ii/02-promise-workflows.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"promise-workflows",title:"Section B: Improving the Workflows",description:"Learn more about the different types of workflows that can be used within a Promise."},sidebar:"workshopSidebar",previous:{title:"Section A: Writing your first Promise",permalink:"/workshop/part-ii/writing-your-first-promise"},next:{title:"Section C: Accessing Secrets and storing state",permalink:"/workshop/part-ii/secrets-and-state"}},l={},c=[{value:"Workflow design patterns",id:"workflows-design-patterns",level:2},{value:"Reusability",id:"reusability",level:3},{value:"Idempotency",id:"idempotency",level:3},{value:"Testability",id:"testability",level:3},{value:"Test driving your workflows",id:"test-driving-your-workflows",level:2},{value:"Prepare your environment",id:"prepare-your-environment",level:3},{value:"Run the tests",id:"run-the-tests",level:3},{value:"\ud83c\udf89 \xa0 Congratulations!",id:"--congratulations",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components},{Details:i}=t;return i||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["This is Part 2 of ",(0,n.jsx)(t.a,{href:"intro",children:"a series"})," illustrating how to write Kratix Promises."]}),"\n",(0,n.jsxs)(t.p,{children:["\ud83d\udc48\ud83c\udffe Previous: ",(0,n.jsx)(t.a,{href:"writing-your-first-promise",children:"Writing your first Promise"})," ",(0,n.jsx)("br",{}),"\n\ud83d\udc49\ud83c\udffe Next: ",(0,n.jsx)(t.a,{href:"./secrets-and-state",children:"Accessing secrets and storing state"})]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.p,{children:"In the previous tutorial, you wrote your first Promise, delivering Apps-as-a-service. In this section, you will dive deeper into Promise Workflows."}),"\n",(0,n.jsx)(t.p,{children:"You will:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"#workflows-design-patterns",children:"Read about Workflow design patterns"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"#test-driving-your-workflows",children:"Learn how to test your workflows"})}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"workflows-design-patterns",children:"Workflow design patterns"}),"\n",(0,n.jsxs)(t.p,{children:["To recap, a ",(0,n.jsx)(t.a,{href:"/main/reference/promises/intro",children:"Kratix Promise"})," is configured with a collection of Workflows that can be triggered at different stages of the Promise or Resource lifecycle. In the previous section, you defined a Workflow for the ",(0,n.jsx)(t.code,{children:"resource.configure"})," action. In that workflow, you defined a collection of Kubernetes Resources that needed to be created to fulfill the user's request."]}),"\n",(0,n.jsx)(t.p,{children:"However, there's virtually no limitation to what you can do in a Workflow. You can, for example, download software, run imperative commands, wait for manual approvals and more. Pipeline stages are meant to be reused across different Promises, so you can define a Workflow once and reuse it across multiple Promises."}),"\n",(0,n.jsx)(t.p,{children:"To make that possible, it's important to follow some design patterns when writing Workflows. In this section, you will learn about some of these design patterns."}),"\n",(0,n.jsx)(t.h3,{id:"reusability",children:"Reusability"}),"\n",(0,n.jsx)(t.p,{children:"Workflows are a great place to validate and enforce common requirements. For example, if you write a stage that can check for necessary compliance requirements, that stage can be used by all applicable Pipelines. In addition, you can write stages to check for excess costs, labelling conventions, security risks, and more."}),"\n",(0,n.jsx)(t.p,{children:"While most Workflows will have at least one stage with logic unique to that Promise, building the Kratix Pipeline stages with reusability in mind is a great way to make your platform extensible."}),"\n",(0,n.jsx)(t.h3,{id:"idempotency",children:"Idempotency"}),"\n",(0,n.jsx)(t.p,{children:"An idempotent Workflow guarantees that running the same command multiple times will result in the same outcome. This is an important feature because they will be auto-reconciled on an ongoing basis."}),"\n",(0,n.jsx)(t.p,{children:"Kubernetes controllers reconcile their objects in three scenarios:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Object change"}),"\n",(0,n.jsx)(t.li,{children:"Controller restart"}),"\n",(0,n.jsx)(t.li,{children:"Default cadence"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"This means that yes, on every request for a Resource the Workflow will run. But also, it will run any time the controller is reset, as well as every 10 hours."}),"\n",(0,n.jsx)(t.p,{children:"This means you will need to write your Workflows to make sure that rerunning them will not result in any adverse side effects. This is especially important when your workflow is interacting with external systems. In the next tutorials you will learn some strategies to make your Workflows idempotent."}),"\n",(0,n.jsxs)(i,{children:[(0,n.jsx)("summary",{children:"\ud83e\udd14 Wondering when to use Workflows versus creating a new Promise?"}),(0,n.jsx)(t.p,{children:"Platform design requires thinking about how to divide platform offerings into right sized Promises and evaluating options for reusability and composability."}),(0,n.jsx)(t.p,{children:"Each Promise is the encapsulation of something as-a-Service. But that doesn\u2019t mean that all platform users will want or need all types of Promises. It can be extremely helpful to create lower level Promises for services that are composed into a number of higher level offerings. For example, a Kubernetes Promise may never be something requested by an application developer, but it may be that a number of software Promises like \u201cenvironment\u201d, or \u201cdata store\u201d depend on a Kubernetes cluster that can be provisioned using a Promise."}),(0,n.jsx)(t.p,{children:"Promises are not the only way to create reusable components when designing your platform with Kratix. You can also create reusable Pipeline stages that can be run in a number of different Promise Workflows. For example, you may want to add default labels to certain types of resources. You can create a Pipeline stage which evaluates the resources set to be declared at the end of the Workflow and apply consistent labelling before writing."}),(0,n.jsx)(t.p,{children:"Since both Promises and Workflows can be reused, you may wonder when to use each. The best rule of thumb is to ask if you are describing a noun or a verb."}),(0,n.jsxs)(t.p,{children:["Nouns are most easily described as ",(0,n.jsx)(t.em,{children:"things"}),". A database is a thing, so is a cluster, or an application, or any number of software offerings your platform may support. If you are trying to provide some",(0,n.jsx)(t.em,{children:"thing"})," as-a-Service you should be thinking about creating a Promise."]}),(0,n.jsxs)(t.p,{children:["Verbs can be described as ",(0,n.jsx)(t.em,{children:"actions"}),". Labelling, notifying, or scanning can all be actions you may want to take rather than things you want to create. These actions can often be made across multiple things, e.g. you may want to label both databases and queues. When you are trying to take action to fulfil a cross-cutting concern, this is most suited to a Workflow step."]}),(0,n.jsx)(t.p,{children:"Like all rules of thumb, this should be treated as a guide. When it comes to system design it is important that it works for your context and the Syntasso team is happy to work with you as you approach these discussions as a team."})]}),"\n",(0,n.jsx)(t.h3,{id:"testability",children:"Testability"}),"\n",(0,n.jsx)(t.p,{children:"One of the advantages of the Kratix workflow model is that it makes it easy to test your workflows. You can test your workflows in isolation, without having to deploy them to a cluster. This makes it easy to test your workflows as you are developing them."}),"\n",(0,n.jsx)(t.p,{children:"The next section goes into more detail about how to test your workflows."}),"\n",(0,n.jsx)(t.h2,{id:"test-driving-your-workflows",children:"Test driving your workflows"}),"\n",(0,n.jsx)(t.p,{children:"In the previous tutorial you created a simple workflow that generated the Kubernetes resources needed to fulfill the user's request. You tested it by installing the Promise and then sending a resource request to the Platform."}),"\n",(0,n.jsx)(t.p,{children:"A better way to test your workflows is to just execute the container in your local environment. It's relatively easy to do this, and it will save you a lot of time as you are developing your workflows."}),"\n",(0,n.jsx)(t.h3,{id:"prepare-your-environment",children:"Prepare your environment"}),"\n",(0,n.jsx)(t.p,{children:"When Kratix starts your workflow, it will mount the following three volumes:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"/kratix/input"}),": Kratix will add the user's request into this directory as ",(0,n.jsx)(t.code,{children:"object.yaml"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"/kratix/output"}),": the files in this directory will be scheduled to a matching Destination."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"/kratix/metadata"}),": a directory where you can write documents with special meaning to Kratix; you will cover this in the next tutorials."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["That means that, to test it locally, you will need to provide the three volumes to your Docker command. Note that you will also need to write the ",(0,n.jsx)(t.code,{children:"object.yaml"})," containing an example request in the ",(0,n.jsx)(t.code,{children:"input"})," directory."]}),"\n",(0,n.jsxs)(t.p,{children:["Still in the ",(0,n.jsx)(t.code,{children:"app-promise"})," directory, run:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"mkdir -p test/{input,output,metadata}\ntouch test/input/object.yaml\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Later, when you run ",(0,n.jsx)(t.code,{children:"docker run"}),", you will mount the three directories onto the container. But first, you need to create the ",(0,n.jsx)(t.code,{children:"object.yaml"})," file in the ",(0,n.jsx)(t.code,{children:"input"})," directory. Create a file called ",(0,n.jsx)(t.code,{children:"test/input/object.yaml"})," with the following content:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",metastring:'title="app-promise/test/input/object.yaml"',children:"apiVersion: workshop.kratix.io/v1\nkind: App\nmetadata:\n  name: my-app\n  namespace: default\nspec:\n  image: example/image:v1.0.0\n  service:\n    port: 9000\n"})}),"\n",(0,n.jsx)(t.p,{children:"With that in place, you can go ahead and test your pipeline! Since the next tutorials will ask you to rebuild and retest the image, it's a good idea to write a simple helper script that you can re-run in the future. Run the following:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:'mkdir -p scripts\n\ncat << \'EOF\' > scripts/build-pipeline\n#!/usr/bin/env bash\n\nset -eu -o pipefail\n\ntestdir=$(cd "$(dirname "$0")"/../test; pwd)\n\ndocker build --tag kratix-workshop/app-pipeline-image:v1.0.0 workflows/resource/configure/mypipeline/kratix-workshop-app-pipeline-image\nkind load docker-image kratix-workshop/app-pipeline-image:v1.0.0 --name platform\nEOF\n\ncat <<\'EOF\' > scripts/test-pipeline\n#!/usr/bin/env bash\n\nscriptsdir=$(cd "$(dirname "$0")"; pwd)\ntestdir=$(cd "$(dirname "$0")"/../test; pwd)\ninputDir="$testdir/input"\noutputDir="$testdir/output"\nmetadataDir="$testdir/metadata"\n\n$scriptsdir/build-pipeline\nrm -rf $outputDir/*\n\ncommand=${1:-"resource-configure"}\n\ndocker run \\\n    --rm \\\n    --volume ~/.kube:/root/.kube \\\n    --network=host \\\n    --volume ${outputDir}:/kratix/output \\\n    --volume ${inputDir}:/kratix/input \\\n    --volume ${metadataDir}:/kratix/metadata \\\n    --env MINIO_USER=minioadmin \\\n    --env MINIO_PASSWORD=minioadmin \\\n    --env MINIO_ENDPOINT=localhost:31337 \\\n    kratix-workshop/app-pipeline-image:v1.0.0 sh -c "$command"\nEOF\n\nchmod +x scripts/*\n'})}),"\n",(0,n.jsx)(t.admonition,{type:"warning",children:(0,n.jsxs)(t.p,{children:["If you are running the workshop on a Mac, you may need to update the ",(0,n.jsx)(t.code,{children:"MINIO_ENDPOINT"})," above to ",(0,n.jsx)(t.code,{children:"host.docker.internal:31337"}),"."]})}),"\n",(0,n.jsx)(t.p,{children:"These scripts do the following:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"build-pipeline"})," codifies the image building and loads the container image on the KinD cluster."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"test-pipeline"})," calls build-pipeline and also runs the image, allowing you to verify the created files in the ",(0,n.jsx)(t.code,{children:"test/output"})," directory."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"At this stage, your directory structure should look like this:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"\ud83d\udcc2 app-promise\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 dependencies\n\u2502\xa0\xa0 \u2514\u2500\u2500 dependencies.yaml\n\u251c\u2500\u2500 example-resource.yaml\n\u251c\u2500\u2500 promise.yaml\n\u251c\u2500\u2500 scripts\n\u2502\xa0\xa0 \u251c\u2500\u2500 build-pipeline\n\u2502\xa0\xa0 \u2514\u2500\u2500 test-pipeline\n\u251c\u2500\u2500 test\n\u2502\xa0\xa0 \u251c\u2500\u2500 input\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 object.yaml\n\u2502\xa0\xa0 \u251c\u2500\u2500 metadata\n\u2502\xa0\xa0 \u2514\u2500\u2500 output\n\u2514\u2500\u2500 workflows\n    \u2514\u2500\u2500 resource\n        \u2514\u2500\u2500 configure\n            \u2514\u2500\u2500 mypipeline\n                \u2514\u2500\u2500 kratix-workshop-app-pipeline-image\n                    \u251c\u2500\u2500 Dockerfile\n                    \u251c\u2500\u2500 resources\n                    \u2514\u2500\u2500 scripts\n                        \u2514\u2500\u2500 resource-configure\n"})}),"\n",(0,n.jsx)(t.h3,{id:"run-the-tests",children:"Run the tests"}),"\n",(0,n.jsx)(t.p,{children:"To execute the test, run the script with the following command:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"./scripts/test-pipeline resource-configure\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Which should build and run the image. Once the execution completes,\nverify the ",(0,n.jsx)(t.code,{children:"test/output"})," directory. You should see the following files:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"\ud83d\udcc2 app-promise\n\u251c\u2500\u2500 ...\n\u2514\u2500\u2500 test\n    \u251c\u2500\u2500 input\n    \u2502   \u2514\u2500\u2500 object.yaml\n    \u2514\u2500\u2500 output\n        \u251c\u2500\u2500 deployment.yaml\n        \u251c\u2500\u2500 ingress.yaml\n        \u2514\u2500\u2500 service.yaml\n"})}),"\n",(0,n.jsx)(t.p,{children:"You can take a look at the files and verify their contents. You can see where the user's inputs are being used, and how that is reflected in the created services. You can poke around and make changes to both the input and to the workflow, and see how the output reflects this."}),"\n",(0,n.jsx)(t.p,{children:"The ability to treat images as independent pieces of software that can\nhave their own development lifecycle (fully testable, easy to execute locally,\nrelease independent) allows platform teams to move faster, sharing and reusing\nimages across their Promises."}),"\n",(0,n.jsx)(t.p,{children:"Next, you will explore how to access secrets and store state from within a workflow."}),"\n",(0,n.jsx)(t.h2,{id:"--congratulations",children:"\ud83c\udf89 \xa0 Congratulations!"}),"\n",(0,n.jsx)(t.p,{children:"You iterated over the Promise and added a Promise Workflow! Congratulations \ud83c\udf89"}),"\n",(0,n.jsx)(t.p,{children:"To recap what you achieved:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"\u2705\xa0\xa0You got a deeper understanding of the Workflows."}),"\n",(0,n.jsx)(t.li,{children:"\u2705\xa0\xa0You tested your Resource Workflow."}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["\ud83d\udc49\ud83c\udffe\xa0\xa0 Let's ",(0,n.jsx)(t.a,{href:"./secrets-and-state",children:"explore accessing secrets and storing state in workflows"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);