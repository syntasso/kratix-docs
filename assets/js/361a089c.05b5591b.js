"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[8746],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(96540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}},85452:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ske/promise-testing-framework/intro","title":"Promise Testing Framework","description":"Reference for the Promise Testing Framework","source":"@site/docs/ske/02-promise-testing-framework/00-intro.mdx","sourceDirName":"ske/02-promise-testing-framework","slug":"/ske/promise-testing-framework/intro","permalink":"/ske/promise-testing-framework/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/ske/02-promise-testing-framework/00-intro.mdx","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"title":"Promise Testing Framework","description":"Reference for the Promise Testing Framework","sidebar_label":"Promise Testing Framework"},"sidebar":"skeSidebar","previous":{"title":"SKE GUI","permalink":"/ske/installing-ske/ske-gui"},"next":{"title":"Command Reference","permalink":"/category/command-reference-1"}}');var s=n(74848),r=n(28453);const a={title:"Promise Testing Framework",description:"Reference for the Promise Testing Framework",sidebar_label:"Promise Testing Framework"},o=void 0,l={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installing the Testing Framework",id:"installing-the-testing-framework",level:2},{value:"Testing your Promise with the Testing Framework",id:"testing-your-promise-with-the-testing-framework",level:2},{value:"Testing individual Pipeline Stages",id:"testing-individual-pipeline-stages",level:3},{value:"Testing a Pipeline",id:"testing-a-pipeline",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"The Promise Testing Framework paves the way for easy testing of Kratix Promises, providing fast feedback and confidence in your Pipelines and Stages\nwithout needing to deploy your Promise to a Kubernetes Cluster."}),"\n",(0,s.jsxs)(t.p,{children:["Available as plugin to the ",(0,s.jsx)(t.a,{href:"/main/kratix-cli/intro",children:"Kratix CLI"}),", the framework provides validation of the expected behaviour when Pipelines and Pipeline Stages run and validation of\nthe outputs generated when Pipelines and individual stages run to completion."]}),"\n",(0,s.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(t.p,{children:["You must have the ",(0,s.jsx)(t.code,{children:"kratix"})," CLI installed at version ",(0,s.jsx)(t.code,{children:"0.9.0"})," or later."]}),"\n",(0,s.jsx)(t.h2,{id:"installing-the-testing-framework",children:"Installing the Testing Framework"}),"\n",(0,s.jsxs)(t.p,{children:["Install the latest version of the ",(0,s.jsx)(t.a,{href:"https://github.com/cli/cli",children:"gh cli"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Set your Enterprise Releases token as the value of the ",(0,s.jsx)(t.code,{children:"GH_TOKEN"})," environment variable."]}),"\n",(0,s.jsxs)(t.p,{children:["Download the latest ",(0,s.jsx)(t.code,{children:"kratix-test"})," plugin binary:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"# Fetch the latest release tag\nLATEST_RELEASE=$(gh release list --repo syntasso/enterprise-releases --limit 100 --json tagName,createdAt \\\n  --jq '. | sort_by(.createdAt) | reverse | map(select(.tagName | startswith(\"kratix-test\"))) | .[0].tagName')\n\n# Must be one of darwin_amd64, darwin_arm64, linux_amd64\nARCH=\n\n# Download the release\ngh release download $LATEST_RELEASE \\\n  --repo syntasso/enterprise-releases \\\n  --pattern 'kratix-test_$ARCH' \\\n  --output kratix-test_$ARCH\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Make the binary executable and place it anywhere in your ",(0,s.jsx)(t.code,{children:"PATH"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"As the binary is in your path, it should be visible when you run:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kratix plugin list\n"})}),"\n",(0,s.jsx)(t.p,{children:"To confirm that the plugin has been installed without issue, run:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kratix test --help\n"})}),"\n",(0,s.jsx)(t.p,{children:"You should see output similar to:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'A command for testing Kratix Promise Pipelines and Stages\n\nUsage:\n  test [command]\n\nAvailable Commands:\n  completion  Generate the autocompletion script for the specified shell\n  help        Help about any command\n  pipeline    A command for testing Kratix Promise Pipelines\n  stage       A command for testing Kratix Promise stages\n\nFlags:\n  -h, --help   help for test\n\nUse "test [command] --help" for more information about a command.\n'})}),"\n",(0,s.jsx)(t.h2,{id:"testing-your-promise-with-the-testing-framework",children:"Testing your Promise with the Testing Framework"}),"\n",(0,s.jsx)(t.p,{children:"Given your Promise was generated with the Kratix CLI, the directory structure should be similar to the following:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 example-resource.yaml\n\u251c\u2500\u2500 promise.yaml\n\u2514\u2500\u2500 workflows\n    \u2514\u2500\u2500 promise\n        \u2514\u2500\u2500 configure\n            \u2514\u2500\u2500 setup\n                \u251c\u2500\u2500 deploy-infrastructure\n                \u2502\xa0\xa0 \u251c\u2500\u2500 Dockerfile\n                \u2502\xa0\xa0 \u251c\u2500\u2500 resources\n                \u2502\xa0\xa0 \u2514\u2500\u2500 scripts\n                \u2502\xa0\xa0     \u2514\u2500\u2500 pipeline.sh\n                \u251c\u2500\u2500 apply-rbac-rules\n                \u2502\xa0\xa0 \u251c\u2500\u2500 Dockerfile\n                \u2502\xa0\xa0 \u251c\u2500\u2500 resources\n                \u2502\xa0\xa0 \u2514\u2500\u2500 scripts\n                \u2502\xa0\xa0     \u2514\u2500\u2500 pipeline.sh\n                \u2514\u2500\u2500 security-scan\n                    \u251c\u2500\u2500 Dockerfile\n                    \u251c\u2500\u2500 resources\n                    \u2514\u2500\u2500 scripts\n                        \u2514\u2500\u2500 pipeline.sh\n"})}),"\n",(0,s.jsxs)(t.p,{children:["When structured in this format, both the ",(0,s.jsx)(t.code,{children:"kratix test stage"})," and ",(0,s.jsx)(t.code,{children:"kratix test pipeline"})," commands can identify the appropriate image to\nrun or build when performing tests against the specified Pipeline or Pipeline Stage. If your directory is not structured in this way, the\ntests may fail to find the correct container image to run."]}),"\n",(0,s.jsx)(t.h3,{id:"testing-individual-pipeline-stages",children:"Testing individual Pipeline Stages"}),"\n",(0,s.jsxs)(t.p,{children:["To test a given Pipeline Stage, you can use the ",(0,s.jsx)(t.code,{children:"kratix test stage"})," command, specifying the workflow type, workflow action,\nPipeline name and stage name that you wish to test. Alongside these arguments, you will also need to provide:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Test input via the ",(0,s.jsx)(t.code,{children:"--input-dir"})," flag. This is a directory that should contain the ",(0,s.jsx)(t.code,{children:"object.yaml"})," that you want test your Stage against"]}),"\n",(0,s.jsxs)(t.li,{children:["Expected test outputs via the ",(0,s.jsx)(t.code,{children:"--expected-output-dir"}),". This should contain files that match the files that you expect to be written\nto the ",(0,s.jsx)(t.code,{children:"/kratix/outputs"})," directory by the stage."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"For the above example, we could run:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kratix test stage promise/configure/setup deploy-infrastructure \\\n  --input-dir inputs \\\n  --expected-output-dir setup-outputs\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This will run the container for the Pipeline Stage (as specified in the ",(0,s.jsx)(t.code,{children:"promise.yaml"}),") with the\n",(0,s.jsx)(t.a,{href:"/main/reference/workflows#environment-variables",children:"default workflow environment variables"})," set for you. Upon running the stage container, the test\nvalidates whether the outputs generated by the stage match those in the ",(0,s.jsx)(t.code,{children:"setup-outputs"})," directory. If they match, the command will display a success message and\nexit 0."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"Running\nValidating\n- Comparing /expected-stage-outputs/configmap.yaml to /test-outputs2423274464/configmap.yaml\n\nCleaning up\nSuccess (1 assertion(s))\n"})}),"\n",(0,s.jsx)(t.p,{children:"However, if they do not match, the test will display a diff between the files and exit 1."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"--- expected\n+++ actual\n@@ -1,4 +1,5 @@\n apiVersion: v1\n kind: ConfigMap\n metadata:\n-  name: infra-config\n+  creationTimestamp: null\n+  name: map\n\nCleaning up\nFailure (1 assertion(s) failed)\n"})}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["You can also provide a tag for a build image via the ",(0,s.jsx)(t.code,{children:"--image-tag"})," flag in place of the Pipeline and Pipeline Stage arguments. When taking this approach,\nyour promise does not need to match the above directory structure."]})}),"\n",(0,s.jsx)(t.h3,{id:"testing-a-pipeline",children:"Testing a Pipeline"}),"\n",(0,s.jsxs)(t.p,{children:["To test a Pipeline by running each of its stages in sequence, you can use the ",(0,s.jsx)(t.code,{children:"kratix test pipeline"})," command. For the above example, we could run:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kratix test pipeline promise/configure/setup \\\n  --input-dir inputs \\\n  --expected-output-dir setup-outputs\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This will run each of the stages of the ",(0,s.jsx)(t.code,{children:"setup"})," pipeline and and validate whether the outputs generated by all of the Stages match those in the\n",(0,s.jsx)(t.code,{children:"setup-outputs"})," directory. If they match, the command will exit 0. However, if they do not match, the test will display a diff between the files\nand exit 1."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["You can use the ",(0,s.jsx)(t.code,{children:"--build"})," flag to build with both the ",(0,s.jsx)(t.code,{children:"stage"})," and ",(0,s.jsx)(t.code,{children:"pipeline"})," commands to build the Pipeline Stages before running the tests"]})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);