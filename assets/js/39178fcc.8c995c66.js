"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[715],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var i=s(96540);const r={},a=i.createContext(r);function t(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(a.Provider,{value:n},e.children)}},84318:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"ske/guides/promise-development","title":"Building and Testing a Database Promise","description":"Step-by-step guide to create and test a Database Promise using Kratix CLI and SKE testing plugin","source":"@site/docs/ske/05-guides/13-promise-development.mdx","sourceDirName":"ske/05-guides","slug":"/ske/guides/promise-development","permalink":"/ske/guides/promise-development","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/ske/05-guides/13-promise-development.mdx","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"title":"Building and Testing a Database Promise","description":"Step-by-step guide to create and test a Database Promise using Kratix CLI and SKE testing plugin","sidebar_label":"Promise Development"},"sidebar":"skeSidebar","previous":{"title":"SKE GUI","permalink":"/ske/guides/ske-gui"},"next":{"title":"Introduction","permalink":"/ske/integrations/intro"}}');var r=s(74848),a=s(28453);const t={title:"Building and Testing a Database Promise",description:"Step-by-step guide to create and test a Database Promise using Kratix CLI and SKE testing plugin",sidebar_label:"Promise Development"},o=void 0,d={},l=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Initialize Promise with an API",id:"initialize-promise-with-an-api",level:2},{value:"Workflows",id:"workflows",level:2},{value:"Promise Dependencies",id:"promise-dependencies",level:3},{value:"Define Resource Configure Workflow",id:"define-resource-configure-workflow",level:3},{value:"Test Resource Configure Workflow",id:"test-resource-configure-workflow",level:3},{value:"Use Database Promise",id:"use-database-promise",level:2},{value:"\ud83c\udf89 Congratulations",id:"-congratulations",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,r.jsx)(n.p,{children:"You will need:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["An installation of SKE. Go to ",(0,r.jsx)(n.a,{href:"/ske/installing-ske/intro",children:"Configuring SKE"})," and follow the appropriate guide if you haven't done so already."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/main/kratix-cli/intro",children:"kratix CLI"})," and the ",(0,r.jsx)(n.a,{href:"/ske/promise-testing-framework/intro",children:"SKE Testing Framework Plugin"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In this guide we will write a Postgres Promise following the SKE Promise Testing Framework, using the Kratix CLI and the SKE Testing Plugin."}),"\n",(0,r.jsx)(n.h2,{id:"initialize-promise-with-an-api",children:"Initialize Promise with an API"}),"\n",(0,r.jsx)(n.p,{children:"It's best if we work on our Promise in an empty directory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir -p ~/db-promise && cd ~/db-promise\n"})}),"\n",(0,r.jsx)(n.p,{children:"Initialize our database Promise by running:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kratix init promise database --group demo.kratix.io --version v1beta1 --kind Database\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The command above should generate a ",(0,r.jsx)(n.code,{children:"promise.yaml"})," file in the current directory. You can check it out by running:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cat promise.yaml\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now, run the ",(0,r.jsx)(n.code,{children:"kratix update api"})," command to add an API field so we can configure the size of the database:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kratix update api --property size:string\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can take a look at the updated Promise API by running:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cat promise.yaml | yq '.spec.api'\n"})}),"\n",(0,r.jsx)(n.p,{children:"Great! Your Promise now has an API. You can move on to the next step: defining the dependencies."}),"\n",(0,r.jsx)(n.h2,{id:"workflows",children:"Workflows"}),"\n",(0,r.jsx)(n.h3,{id:"promise-dependencies",children:"Promise Dependencies"}),"\n",(0,r.jsxs)(n.p,{children:["First, let's create a subdirectory in your db-promise directory called ",(0,r.jsx)(n.code,{children:"dependencies"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir -p dependencies\n"})}),"\n",(0,r.jsx)(n.p,{children:"As previously mentioned, this Promise is a Postgres Promise.\nWhen resource requests are created, the Promise will create a Postgres database using an OSS Postgres Operator.\nWe need to have the Postgres Operator installed on Destinations before any user makes requests."}),"\n",(0,r.jsx)(n.p,{children:"That's exactly what Kratix dependencies are for: to define the resources that need to be created when the Promise is installed."}),"\n",(0,r.jsxs)(n.p,{children:["Let's download dependencies for our Postgres Promise and save them in ",(0,r.jsx)(n.code,{children:"dependencies/"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl -o dependencies/operator.yaml --silent https://raw.githubusercontent.com/syntasso/promise-postgresql/refs/heads/main/internal/configure-pipeline/dependencies/operator.yaml\ncurl -o dependencies/operatorconfiguration.crd.yaml --silent https://raw.githubusercontent.com/syntasso/promise-postgresql/refs/heads/main/internal/configure-pipeline/dependencies/operatorconfiguration.crd.yaml\ncurl -o dependencies/postgresql.crd.yaml --silent https://raw.githubusercontent.com/syntasso/promise-postgresql/refs/heads/main/internal/configure-pipeline/dependencies/postgresql.crd.yaml\ncurl -o dependencies/postgresteam.crd.yaml --silent https://raw.githubusercontent.com/syntasso/promise-postgresql/refs/heads/main/internal/configure-pipeline/dependencies/postgresteam.crd.yaml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now, we can add a Promise configure workflow using the Kratix CLI:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kratix update dependencies ./dependencies/ --image kratix-demo/promise-pipeline:v0.1.0\n"})}),"\n",(0,r.jsx)(n.p,{children:"To install the Promise later, don't forget to build and push the image."}),"\n",(0,r.jsx)(n.p,{children:"If you are using local KinD clusters, you can build and load this image:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker build -t kratix-demo/promise-pipeline:v0.1.0 workflows/promise/configure/dependencies/configure-deps && kind load docker-image kratix-demo/promise-pipeline:v0.1.0 -n platform\n"})}),"\n",(0,r.jsx)(n.p,{children:"Amazing! The next step is to define the Resource Workflow."}),"\n",(0,r.jsx)(n.h3,{id:"define-resource-configure-workflow",children:"Define Resource Configure Workflow"}),"\n",(0,r.jsx)(n.p,{children:"We will once again use the Kratix CLI to create the necessary files.\nRun the following command to bootstrap the skeleton of your Workflow:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kratix add container resource/configure/database-configure --image kratix-demo/resource-pipeline:v0.1.0 --language python\n"})}),"\n",(0,r.jsx)(n.p,{children:"Your directory structure should look like the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"\u276f tree\n.\n\u251c\u2500\u2500 example-resource.yaml\n\u251c\u2500\u2500 promise.yaml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 workflows\n    \u251c\u2500\u2500 promise\n    \u2502\xa0\xa0 \u2514\u2500\u2500 configure\n    \u2502\xa0\xa0     \u2514\u2500\u2500 dependencies\n    \u2502\xa0\xa0         \u2514\u2500\u2500 configure-deps\n    \u2502\xa0\xa0             \u251c\u2500\u2500 Dockerfile\n    \u2502\xa0\xa0             \u251c\u2500\u2500 resources\n    \u2502\xa0\xa0             \u2502\xa0\xa0 \u251c\u2500\u2500 operator.yaml\n    \u2502\xa0\xa0             \u2502\xa0\xa0 \u251c\u2500\u2500 operatorconfiguration.crd.yaml\n    \u2502\xa0\xa0             \u2502\xa0\xa0 \u251c\u2500\u2500 postgresql.crd.yaml\n    \u2502\xa0\xa0             \u2502\xa0\xa0 \u2514\u2500\u2500 postgresteam.crd.yaml\n    \u2502\xa0\xa0             \u2514\u2500\u2500 scripts\n    \u2502\xa0\xa0                 \u2514\u2500\u2500 pipeline.sh\n    \u2514\u2500\u2500 resource\n        \u2514\u2500\u2500 configure\n            \u2514\u2500\u2500 database-configure\n                \u2514\u2500\u2500 kratix-demo-resource-pipeline\n                    \u251c\u2500\u2500 Dockerfile\n                    \u251c\u2500\u2500 resources\n                    \u2514\u2500\u2500 scripts\n                        \u2514\u2500\u2500 pipeline.py\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The CLI will create a basic Dockerfile and a ",(0,r.jsx)(n.code,{children:"pipeline.py"})," Python script. Feel free to take a look at what the Dockerfile looks like."]}),"\n",(0,r.jsxs)(n.p,{children:["We will customize the ",(0,r.jsx)(n.code,{children:"pipeline.py"})," script to deploy a database."]}),"\n",(0,r.jsxs)(n.p,{children:["Replace the ",(0,r.jsx)(n.code,{children:"pipeline.py"})," script generated with the following content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import kratix_sdk as ks\nimport yaml\n\ndef main():\n    sdk = ks.KratixSDK()\n    resource = sdk.read_resource_input()\n\n    manifest = {\n        "apiVersion": "acid.zalan.do/v1",\n        "kind": "postgresql",\n        "metadata": {"name": resource.get_name(), "namespace": "default"},\n        "spec": {\n            "teamId": "kratix",\n            "enableLogicalBackup": True,\n            "volume": {\n                "size": "1Gi", # we will fix this in testing\n            },\n            "numberOfInstances": 2,\n                "users": {\n                     "team-a": ["superuser", "createdb"]\n                },\n            "postgresql": {\n                "version": "16"\n            }\n        }\n    }\n    data = yaml.safe_dump(manifest).encode("utf-8")\n    sdk.write_output("database.yaml", data)\n\n    status = ks.Status()\n    status.set("version", 16)\n    status.set("teamId", "kratix")\n    sdk.write_status(status)\n\n\nif __name__ == \'__main__\':\n    main()\n'})}),"\n",(0,r.jsx)(n.p,{children:"Let's take a closer look at the script itself to see what it's doing."}),"\n",(0,r.jsxs)(n.p,{children:["The script imports ",(0,r.jsx)(n.a,{href:"/main/kratix-sdks/python",children:"Kratix Python SDK"})," and YAML library:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import kratix_sdk as ks\nimport yaml\n"})}),"\n",(0,r.jsx)(n.p,{children:"It then reads the incoming resource request and initializes the Kratix SDK:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"    sdk = ks.KratixSDK()\n    resource = sdk.read_resource_input()\n"})}),"\n",(0,r.jsx)(n.p,{children:"It generates a manifest for the Postgres database, using the resource request name as the Postgres name,\nand writes the manifest to the Kratix output directory for scheduling:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'    manifest = {\n        "apiVersion": "acid.zalan.do/v1",\n        "kind": "postgresql",\n        "metadata": {"name": resource.get_name(), "namespace": "default"},\n        "spec": {\n        ...\n        }\n    }\n    data = yaml.safe_dump(manifest).encode("utf-8")\n    sdk.write_output("database.yaml", data)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Great! You now have a Resource Configure Workflow defined."}),"\n",(0,r.jsx)(n.h3,{id:"test-resource-configure-workflow",children:"Test Resource Configure Workflow"}),"\n",(0,r.jsx)(n.p,{children:"Before you can test the workflow, you need to define the expected result."}),"\n",(0,r.jsx)(n.p,{children:"First, let's create the expected output for our test."}),"\n",(0,r.jsxs)(n.p,{children:["You can stay in the same ",(0,r.jsx)(n.code,{children:"db-promise"})," directory and run:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir expected-output\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Inside directory ",(0,r.jsx)(n.code,{children:"expected-output"}),", create a file called ",(0,r.jsx)(n.code,{children:"database.yaml"})," with the following content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: acid.zalan.do/v1\nkind: postgresql\nmetadata:\n  name: grape\n  namespace: default\nspec:\n  enableLogicalBackup: true\n  numberOfInstances: 2\n  postgresql:\n    version: '16'\n  teamId: kratix\n  users:\n    team-a:\n    - superuser\n    - createdb\n  volume:\n    size: 10Gi\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Next, you need to define the input for the test. Create an ",(0,r.jsx)(n.code,{children:"input"})," directory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir input\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Inside the directory ",(0,r.jsx)(n.code,{children:"input/"}),", create a file called ",(0,r.jsx)(n.code,{children:"object.yaml"})," with the following content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: demo.kratix.io/v1beta1\nkind: Database\nmetadata:\n  name: grape\nspec:\n  size: "10Gi"\n'})}),"\n",(0,r.jsx)(n.p,{children:"With the input and the expected output defined, we are ready for the test."}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"kratix test pipeline"})," command to build the image and test the Pipeline:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kratix test pipeline resource/configure/database-configure -i input -o expected-output --build\n"})}),"\n",(0,r.jsx)(n.p,{children:"Our test has failed, and let's fix it \ud83d\ude00"}),"\n",(0,r.jsxs)(n.p,{children:["Earlier in the Promise API, we defined the property ",(0,r.jsx)(n.code,{children:"size"}),", but we failed to use the input in the script ",(0,r.jsx)(n.code,{children:"pipeline.py"}),".\nIt's using a hardcoded value:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'            "volume": {\n                "size": "1Gi", # we will fix in testing\n            },\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can fix it by using ",(0,r.jsx)(n.code,{children:"size"})," from the resource request manifest:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'            "volume": {\n                "size": resource.get_value("spec.size")\n            },\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Once you have edited ",(0,r.jsx)(n.code,{children:"pipeline.py"}),", you can re-run the test:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kratix test pipeline resource/configure/database-configure -i input -o expected-output --build\n"})}),"\n",(0,r.jsx)(n.p,{children:"The pipeline test should now pass, and you will see outputs similar to:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"\u276f kratix test pipeline resource/configure/database-configure -i input -o expected-output --build\nRunning\nBuilding kratix-demo/resource-pipeline:v0.1.0\n...\n\nValidating\n- Comparing expected-output/database.yaml to /var/folders/0x/6h6jc4dn5tj1hg2b29rpjw8m0000gp/T/test-outputs4228172337/database.yaml\n\n\nCleaning up\nSuccess (1 assertion(s))\n"})}),"\n",(0,r.jsx)(n.p,{children:"Awesome. You now have a Database Promise that can create Postgres with a configurable size.\nLet's install the Promise and request a database."}),"\n",(0,r.jsx)(n.h2,{id:"use-database-promise",children:"Use Database Promise"}),"\n",(0,r.jsx)(n.p,{children:"We should first build and push the Resource Configure Workflow so its image can be pulled into your Kubernetes cluster.\nIf you are using a KinD cluster, you can build and load the image by running:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker build -t kratix-demo/resource-pipeline:v0.1.0 workflows/resource/configure/database-configure/kratix-demo-resource-pipeline && kind load docker-image kratix-demo/resource-pipeline:v0.1.0 -n platform\n"})}),"\n",(0,r.jsx)(n.p,{children:"We are now ready to install the Promise, targeting the Platform cluster:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f promise.yaml\n"})}),"\n",(0,r.jsx)(n.p,{children:"After the Promise becomes available, you can create a Postgres database, using the resource request we generated for\nour test input, or a different set of configurations:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"kubectl apply -f input/object.yaml"})}),"\n",(0,r.jsx)(n.p,{children:"You can target the Destination to see the StatefulSet created for your Postgres database:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kubectl get statefulset\nNAME    READY   AGE\ngrape   0/2     6s\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-congratulations",children:"\ud83c\udf89 Congratulations"}),"\n",(0,r.jsxs)(n.p,{children:["\u2705\xa0\xa0 That's it! You've successfully created and tested your Database Promise.",(0,r.jsx)("br",{})]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);