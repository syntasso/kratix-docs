"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[441],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(96540);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}},47930:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ske/promise-testing-framework/reference/kratix-test-pipeline","title":"kratix test pipeline","description":"A command for testing Kratix Promise Pipelines","source":"@site/docs/ske/02-promise-testing-framework/reference/01_kratix-test-pipeline.md","sourceDirName":"ske/02-promise-testing-framework/reference","slug":"/ske/promise-testing-framework/reference/kratix-test-pipeline","permalink":"/ske/promise-testing-framework/reference/kratix-test-pipeline","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/ske/02-promise-testing-framework/reference/01_kratix-test-pipeline.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"skeSidebar","previous":{"title":"kratix test","permalink":"/ske/promise-testing-framework/reference/kratix-test"},"next":{"title":"kratix test stage","permalink":"/ske/promise-testing-framework/reference/kratix-test-stage"}}');var r=n(74848),s=n(28453);const o={},a="kratix test pipeline",l={},c=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Flags",id:"flags",level:2},{value:"See Also",id:"see-also",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"kratix-test-pipeline",children:"kratix test pipeline"})}),"\n",(0,r.jsx)(t.p,{children:"A command for testing Kratix Promise Pipelines"}),"\n",(0,r.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(t.p,{children:"A command for testing Kratix Promise Pipelines\nThis command will run your Pipeline stages in order and validate that\nthe output generated by the Pipeline containers matches the contents of the --expected-output-dir.\nExample: kratix test pipeline LIFECYCLE/ACTION/PIPELINE-NAME --input-dir input-directory/ --expected-output-dir expected-outputs/"}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"test pipeline LIFECYCLE/ACTION/PIPELINE-NAME [flags]\n"})}),"\n",(0,r.jsx)(t.h2,{id:"flags",children:"Flags"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'--build                        Build the images for the pipeline containers before running the test\n--build-args string            Extra build arguments to pass to the container run command\n--buildx                       Run the test containers using Buildx\n-d, --dir string                   Directory to read the Promise from (default ".")\n-e, --engine string                The container engine to use when running the test containers (default "docker")\n--env strings                  The environment variables to provide to the test container e.g. DRY_RUN=true,ENVIRONMENT=dev\n-o, --expected-output-dir string   The directory containing the expected output files to compare to the generated output\n-h, --help                         help for pipeline\n'})}),"\n",(0,r.jsx)(t.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"/ske/promise-testing-framework/reference/kratix-test",children:"kratix test"}),": The kratix test CLI command"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);