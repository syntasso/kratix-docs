"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[5577],{2857:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"main/reference/kratix-config/config","title":"Kratix Config","description":"Configuring Kratix via the Config","source":"@site/docs/main/03-reference/16-kratix-config/kratix-config.md","sourceDirName":"main/03-reference/16-kratix-config","slug":"/main/reference/kratix-config/config","permalink":"/main/reference/kratix-config/config","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/main/03-reference/16-kratix-config/kratix-config.md","tags":[],"version":"current","frontMatter":{"description":"Configuring Kratix via the Config","title":"Kratix Config","id":"config"},"sidebar":"mainSidebar","previous":{"title":"Updates","permalink":"/main/reference/resources/updates"},"next":{"title":"Uninstalling Kratix","permalink":"/main/reference/deleting-kratix"}}');var r=i(4848),a=i(8453);const o={description:"Configuring Kratix via the Config",title:"Kratix Config",id:"config"},s=void 0,c={},d=[{value:"Kratix Pipeline Adapter Config",id:"kratix-pipeline-adapter-config",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["When Kratix starts, it reads the ",(0,r.jsx)(n.code,{children:"kratix"})," ",(0,r.jsx)(n.code,{children:"ConfigMap"})," from the\n",(0,r.jsx)(n.code,{children:"kratix-platform-system"})," namespace. This ",(0,r.jsx)(n.code,{children:"ConfigMap"})," allow you to configure\nvarious parts of Kratix and follows the format outlined below. It is loaded when\nthe ",(0,r.jsx)(n.code,{children:"kratix-platform-controller-manager"})," pod starts within the same namespace."]}),"\n",(0,r.jsxs)(n.p,{children:["If any changes are made to the ",(0,r.jsx)(n.code,{children:"ConfigMap"}),", you will need to restart the\n",(0,r.jsx)(n.code,{children:"kratix-platform-controller-manager"})," pod to apply the updated configuration."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kratix\n  namespace: kratix-platform-system\ndata:\n  config: |\n    # Number of old successful pipeline pods to keep. Default is 5\n    numberOfJobsToKeep: 1  \n    workflows:\n      defaultContainerSecurityContext:\n        # Security context fields, e.g.:\n        runAsNonRoot: false\n"})}),"\n",(0,r.jsx)(n.h2,{id:"kratix-pipeline-adapter-config",children:"Kratix Pipeline Adapter Config"}),"\n",(0,r.jsxs)(n.p,{children:["When Kratix schedules work as part of either Promise or Resource workflows,\nby default, it uses the ",(0,r.jsx)(n.code,{children:"WC_IMG"})," image specified in the\n",(0,r.jsx)(n.code,{children:"kratix-platform-wc-img-config"})," configmap in the ",(0,r.jsx)(n.code,{children:"kratix-platform-system"})," namespace. To\noverride this image, which is necessary when deploying Kratix in an air-gapped\nenvironment, you can update this configmap to point to an internally hosted\nversion of the image."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kratix-platform-wc-img-config\n  namespace: kratix-platform-system\n...\n//highlight-start\ndata:\n  WC_IMG: org-registry.org/team/kratix-platform-pipeline-adapter:v0.2.0\n//highlight-end\n"})})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>s});var t=i(6540);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);