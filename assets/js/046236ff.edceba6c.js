"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[8456],{3101:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ske/integrations/port","title":"Port Controller","description":"Documentation for the Port integration","source":"@site/docs/ske/10-integrations/20-port.mdx","sourceDirName":"ske/10-integrations","slug":"/ske/integrations/port","permalink":"/ske/integrations/port","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/ske/10-integrations/20-port.mdx","tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"title":"Port Controller","description":"Documentation for the Port integration","sidebar_label":"Port"},"sidebar":"skeSidebar","previous":{"title":"Backstage Development Image","permalink":"/ske/integrations/backstage/backstage-development-image"},"next":{"title":"Releases","permalink":"/ske/releases/"}}');var i=t(4848),s=t(8453);const o={title:"Port Controller",description:"Documentation for the Port integration",sidebar_label:"Port"},a=void 0,l={},c=[{value:"Install the SKE Port Controller",id:"install",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Configure the integration",id:"configure-the-integration",level:3},{value:"Access the enterprise controller image",id:"access-the-enterprise-controller-image",level:3},{value:"Install the controller",id:"install-the-controller",level:3},{value:"Setup GitHub Actions backend for Port Actions",id:"gha",level:2},{value:"Configure GitOps for requests from Port Actions",id:"gitops",level:2},{value:"Expose a Promise in Port",id:"promise-in-port",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Kratix supports configuring and maintaining both day 1 and day 2 integrations with\n",(0,i.jsx)(n.a,{href:"https://www.port.io/",children:"Port"}),"."]}),"\n"," ","\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)("div",{style:{"text-align":"center"},children:(0,i.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/7nKx4CnEvoY",title:"Use Kratix to provide on-demand services through a Backstage UI",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0})}),"\n"," ","\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:"This page provides information on how to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#install",children:"Install the SKE Port Controller"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#gha",children:"Setup GitHub Actions backend for Port Actions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#gitops",children:"Configure Kratix GitOps for requests from Port Actions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#promise-in-port",children:"Expose a Promise in Port"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This documentation assumes both a Port account as well as a GitHub Repository with\nenough permissions to manage GitHub Actions. If required, please refer to the\n",(0,i.jsx)(n.a,{href:"https://auth.getport.io/u/signup",children:"Port"})," and ",(0,i.jsx)(n.a,{href:"https://github.com/",children:"GitHub"})," sign-up\npages to create accounts."]}),"\n",(0,i.jsx)(n.h2,{id:"install",children:"Install the SKE Port Controller"}),"\n",(0,i.jsx)(n.p,{children:"Port provides a generic controller for pushing content from Kubernetes to the Port UI.\nBy installing this via the SKE Controller you will get configuration and management of\nKratix Promises and Resources automatically managed for you, including managing the\nbackend of your choosing for the self-service actions in Port."}),"\n",(0,i.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"To install the SKE Port Controller, you will need:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A SKE token. To request one, visit ",(0,i.jsx)(n.a,{href:"https://www.syntasso.io/pricing",children:"Syntasso"}),' and click "Try SKE\nToday".']}),"\n",(0,i.jsxs)(n.li,{children:["A Kubernetes cluster with Kratix running. The ",(0,i.jsx)(n.a,{href:"../../main/quick-start",children:"Kratix Quick Start"}),"\nis an easy way to get started."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"configure-the-integration",children:"Configure the integration"}),"\n",(0,i.jsxs)(n.p,{children:["To configure the controller, you will need to create a configmap and a secret in the\n",(0,i.jsx)(n.code,{children:"ske-port-controller-system"})," namespace."]}),"\n",(0,i.jsx)(n.p,{children:"Start by creating this namespace if you have not previously installed the controller."}),"\n",(0,i.jsx)(n.p,{children:"Then create local environment variables for the three required values:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"PORT_CLIENT_ID"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"PORT_CLIENT_SECRET"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"PORT_GITHUB_ORG"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"And review the remaining default configurations. If you require overriding any, set those\nlocal environment variables as well."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PORT_GITHUB_REPO"})," (default: port-syncer)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PORT_GITHUB_WORKFLOW_FILE"})," (default: port-action.yml)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PORT_CM_NAME"})," (default: ske-port-k8s-exporter)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PORT_CM_NAMESPACE"})," (default: ske-port-controller-system)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PORT_SKIP_DELETE_BLUEPRINT"})," (default: false)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Once environment variables have been set, you can create the configmap using the\nfollowing command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'kubectl create secret generic -n ske-port-controller-system ske-port-exporter-config \\\n    --from-literal="PORT_CLIENT_ID=${PORT_CLIENT_ID}" \\\n    --from-literal="PORT_CLIENT_SECRET=${PORT_CLIENT_SECRET}" \\\n    --from-literal="PORT_GITHUB_ORG=${PORT_GITHUB_ORG}" \\\n    --from-literal="PORT_GITHUB_REPO=${PORT_GITHUB_REPO:-}" \\\n    --from-literal="PORT_GITHUB_WORKFLOW_FILE=${PORT_GITHUB_WORKFLOW_FILE:-}" \\\n    --from-literal="PORT_CM_NAME=${PORT_CM_NAME:-}" \\\n    --from-literal="PORT_CM_NAMESPACE=${PORT_CM_NAMESPACE:-}" \\\n    --from-literal="PORT_SKIP_DELETE_BLUEPRINT=${PORT_SKIP_DELETE_BLUEPRINT:-}"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"access-the-enterprise-controller-image",children:"Access the enterprise controller image"}),"\n",(0,i.jsx)(n.p,{children:"Next you can either pre-load the required image into your cluster, or define your\nauthentication credentials via a docker-registry secret and refer to this secret in\nPipeline definition in your Workflow."}),"\n",(0,i.jsxs)(n.p,{children:["The release is set to use ",(0,i.jsx)(n.code,{children:"imagePullSecret"}),", to access the enterprise image. To create\nthe secret, replacing YOUR_TOKEN with the token you have been provided with:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"kubectl create secret docker-registry syntasso-registry \\\n  --namespace ske-port-controller-system \\\n  --docker-server=registry.syntasso.io \\\n  --docker-username=syntasso-pkg \\\n  --docker-password=YOUR_TOKEN\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsx)(n.p,{children:"If you prefer, you can load the image onto the Kubernetes nodes for local access."}),(0,i.jsxs)(n.p,{children:["To pull the image, select the image at the correct version from the\n",(0,i.jsx)(n.a,{href:"../releases/ske-port-controller",children:"releases page"}),", then pull and load that image."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker pull ghcr.io/syntasso/ske-port-controller:<VERSION>\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"install-the-controller",children:"Install the controller"}),"\n",(0,i.jsxs)(n.p,{children:["Finally, to install the controller, run the command below, replacing VERSION with the\ntarget version from the ",(0,i.jsx)(n.a,{href:"../releases/ske-port-controller",children:"releases page"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"kubectl apply -f http://s3.eu-west-2.amazonaws.com/syntasso-enterprise-releases/ske-port-controller/<VERSION>/install.yaml\n"})}),"\n",(0,i.jsx)(n.h2,{id:"gha",children:"Setup GitHub Actions backend for Port Actions"}),"\n",(0,i.jsxs)(n.p,{children:["Port is a user interface and depends on other tools to manage the platform orchestration\nside of things. Port provides a number of ",(0,i.jsx)(n.a,{href:"https://docs.port.io/actions-and-automations/setup-backend/",children:"backend integrations"}),"\nto trigger this orchestration including GitHub Actions which is what this guide depends\non. Therefore, the ",(0,i.jsx)(n.code,{children:"PORT_GITHUB_REPO"})," must be set up to work with the Port actions."]}),"\n",(0,i.jsxs)(n.p,{children:["First, your repo needs its Actions to be configured to allow commits. Follow\nGitHub instructions on how to manage this setting\n",(0,i.jsx)(n.a,{href:"https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#preventing-github-actions-from-creating-or-approving-pull-requests",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Next, your Actions need both the ",(0,i.jsx)(n.code,{children:"PORT_CLIENT_ID"})," and ",(0,i.jsx)(n.code,{children:"PORT_CLIENT_SECRET"})," secrets set.\nFollow GitHub instructions on how to set these up\n",(0,i.jsx)(n.a,{href:"https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Finally, the repository must have a\n",(0,i.jsx)(n.a,{href:"https://docs.github.com/en/actions/about-github-actions/understanding-github-actions#workflows",children:"GitHub Action workflow file"}),"\nthat can generate resource requests that match the Promise CRD."]}),"\n",(0,i.jsxs)(n.p,{children:["Below is an example action stored in a workflow file called ",(0,i.jsx)(n.code,{children:"port-action.yml"})," (the file\nname is configurable using the ",(0,i.jsx)(n.code,{children:"PORT_GITHUB_WORKFLOW"})," environment variable). This example\nwill support create, update, and delete flows as well as sharing log data back to Port:"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)("summary",{children:["Example ",(0,i.jsx)(n.code,{children:"port-action.yml"})," contents"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: Sync control plane gitops\npermissions:\n  contents: write\n  pull-requests: write\non:\n  workflow_dispatch:\n    inputs:\n      operation:\n        required: true\n        description: "Delete, Update or create"\n        type: string\n      triggeringUser:\n        required: true\n        description: "The email of the triggering user"\n        type: string\n      runId:\n        required: true\n        description: "Port\'s Run ID"\n        type: string\n      manifest:\n        required: true\n        description: "The K8s manifest generated by Port"\n        type: string\n      folder:\n        required: true\n        description: Folder where the resource will be stored\n        default: "./kratix/platform/resources"\n        type: string\n\njobs:\n  commit-to-main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout\n        uses: actions/checkout@v2\n      - uses: actions/setup-python@v5\n        with:\n          python-version: \'3.10\' \n      - name: Update manifests folder\n        run: |\n            echo \'${{ inputs.manifest }}\' | jq .  > temp.json\n            yaml_data=$(yq -p json -o yaml temp.json)\n            name=$(echo \'${{ inputs.manifest }}\' | jq -r .metadata.name)\n            mkdir -p ${{ inputs.folder }}\n            if [ "${{ inputs.operation }}" = "DELETE" ]; then\n              rm -f "${{ inputs.folder }}/$name.yaml"\n            else\n              echo "$yaml_data" > "${{ inputs.folder }}/$name.yaml"\n            fi\n            rm -f temp.json\n      - uses: port-labs/port-github-action@v1\n        with:\n          clientId: ${{ secrets.PORT_CLIENT_ID }}\n          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}\n          operation: PATCH_RUN\n          runId: ${{inputs.runId}} \n          icon: GithubActions\n          logMessage: "Creating a commit with the changes of the new resource in folder ${{ inputs.folder }} \ud83d\ude80"\n      - name: create commit to main \n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          git config user.name "GitHub Action"\n          git config user.email "github-actions[bot]@users.noreply.github.com"\n          git add .\n          if ! git diff-index --quiet HEAD; then\n            git commit -m "chore: ${{ inputs.operation }} resource by ${{ inputs.triggeringUser }}"\n            git push origin main\n          fi\n      - uses: port-labs/port-github-action@v1\n        if: success()\n        with:\n          clientId: ${{ secrets.PORT_CLIENT_ID }}\n          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}\n          operation: PATCH_RUN\n          runId: ${{inputs.runId}} \n          icon: GithubActions\n          logMessage: |\n            Successfully committed request to main \u2705\n      - uses: port-labs/port-github-action@v1\n        if: failure()\n        with:\n          clientId: ${{ secrets.PORT_CLIENT_ID }}\n          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}\n          operation: PATCH_RUN\n          runId: ${{inputs.runId}} \n          icon: GithubActions\n          logMessage: | \n            Failed to commit request to main \u274c\n            Resource may have been created outside of Port \ud83d\udd75\n            Check the job run logs in Github to learn more \ud83d\udcdc:\n              ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"gitops",children:"Configure GitOps for requests from Port Actions"}),"\n",(0,i.jsx)(n.p,{children:"So far you have configured Port to use GitHub Actions as a backend for the Port\nself-serve actions and automations. You have then configured the GitHub Action to\ncommit user requests to the defined repository."}),"\n",(0,i.jsx)(n.p,{children:"Now you will need to configure a GitOps agent to pull the repository documents into the\ncluster where Kratix runs. This will enable Kratix to respond to resources that are\ncreated via Port."}),"\n",(0,i.jsxs)(n.p,{children:["Please refer to the guide documentation to use\n",(0,i.jsx)(n.a,{href:"https://docs.kratix.io/main/guides/installing-argocd",children:"ArgoCD"}),",\n",(0,i.jsx)(n.a,{href:"https://docs.kratix.io/main/guides/installing-fluxcd",children:"Flux"}),", or any\n",(0,i.jsx)(n.a,{href:"https://docs.kratix.io/main/guides/custom-gitops-agent",children:"other agent"})," you prefer."]}),"\n",(0,i.jsx)(n.p,{children:"Part of the configuration is making sure that the GitOps agent is reading from the\nrepository that Port is writing to. An example set up when using FluxCD and the defaults\nfrom above can be found below."}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)("summary",{children:["Example Flux Resources for ",(0,i.jsx)(n.code,{children:"port-syncer"})," repository"]}),(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This example resource depends on a secret called ",(0,i.jsx)(n.code,{children:"git-credentials"})," to exist in the\n",(0,i.jsx)(n.code,{children:"flux-system"})," namespace. This secret should be configured based on the\n",(0,i.jsx)(n.a,{href:"https://fluxcd.io/flux/components/source/gitrepositories/#secret-reference",children:"FluxCD docs"}),"."]})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'---\napiVersion: source.toolkit.fluxcd.io/v1\nkind: GitRepository\nmetadata:\n  name: kratix-port-resources\n  namespace: flux-system\nspec:\n  interval: 5s\n  url: https://github.com/${PORT_GITHUB_ORG}/${PORT_GITHUB_REPO}\n  ref:\n    branch: main\n  secretRef:\n    name: git-credentials\n---\napiVersion: kustomize.toolkit.fluxcd.io/v1\nkind: Kustomization\nmetadata:\n  name: kratix-port-resources\n  namespace: flux-system\nspec:\n  interval: 3s\n  sourceRef:\n    kind: GitRepository\n    name: kratix-port-resources\n  path: "kratix/platform/resources/"\n  prune: true\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"promise-in-port",children:"Expose a Promise in Port"}),"\n",(0,i.jsxs)(n.p,{children:["While many platform APIs benefit from being available, you may not want ",(0,i.jsx)(n.em,{children:"all"})," platform\nAPIs in the Port UI. For this reason, Kratix uses an opt-in methodology."]}),"\n",(0,i.jsxs)(n.p,{children:["To expose a Promise via the Port UI, make sure to add a label\n",(0,i.jsx)(n.code,{children:'kratix.io/get-port: "true"'})," in the Kratix Promise API. For example, to expose the\n",(0,i.jsx)(n.a,{href:"https://github.com/syntasso/kratix-marketplace/tree/main/namespace",children:"marketplace namespace promise"}),",\nit would look like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  name: namespace\n  namespace: default\nspec:\n  api:\n    apiVersion: apiextensions.k8s.io/v1\n    kind: CustomResourceDefinition\n    metadata:\n      name: namespaces.marketplace.kratix.io\n      # highlight-start\n      labels:\n        kratix.io/get-port: "true"\n      # highlight-end\n    spec:\n      group: marketplace.kratix.io\n      names:\n        kind: namespace\n        plural: namespaces\n        singular: namespace\n      scope: Namespaced\n      versions:\n        - name: v1alpha1\n          schema:\n            openAPIV3Schema:\n              properties:\n                spec:\n                  properties:\n                    clusterName:\n                      description: |\n                        The name of the cluster where the namespace should be created\n                      type: string\n                    namespaceName:\n                      description: |\n                        The name of the namespace to be created\n                      type: string\n                  required:\n                    - namespaceName\n                  type: object\n              type: object\n          served: true\n          storage: true\n  workflows:\n    resource:\n      configure:\n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: instance-configure\n            namespace: default\n          spec:\n            containers:\n              - image: ghcr.io/syntasso/kratix-marketplace/namespace-configure-pipeline:v0.1.0\n                name: namespace-configure-pipeline\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);