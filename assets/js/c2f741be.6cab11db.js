"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[283],{3817:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"main/kratix-cli/reference/kratix-init-crossplane-promise","title":"kratix init crossplane-promise","description":"Initialize a new Promise from a Crossplane XRD","source":"@site/docs/main/05-kratix-cli/20-reference/08_kratix-init-crossplane-promise.md","sourceDirName":"main/05-kratix-cli/20-reference","slug":"/main/kratix-cli/reference/kratix-init-crossplane-promise","permalink":"/main/kratix-cli/reference/kratix-init-crossplane-promise","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/main/05-kratix-cli/20-reference/08_kratix-init-crossplane-promise.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"kratix init helm-promise","permalink":"/main/kratix-cli/reference/kratix-init-helm-promise"},"next":{"title":"kratix init operator-promise","permalink":"/main/kratix-cli/reference/kratix-init-operator-promise"}}');var t=r(4848),s=r(8453);const o={},a="kratix init crossplane-promise",l={},c=[{value:"Usage",id:"usage",level:2},{value:"Example",id:"example",level:2},{value:"Flags",id:"flags",level:2},{value:"Global",id:"global",level:2},{value:"See Also",id:"see-also",level:2}];function p(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"kratix-init-crossplane-promise",children:"kratix init crossplane-promise"})}),"\n",(0,t.jsx)(i.p,{children:"Initialize a new Promise from a Crossplane XRD"}),"\n",(0,t.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"kratix init crossplane-promise [flags]\n"})}),"\n",(0,t.jsx)(i.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"kratix init crossplane-promise s3buckets --xrd xrd.yaml --group syntasso.io --kind S3Bucket --dir --compositions composition.yaml\n"})}),"\n",(0,t.jsx)(i.h2,{id:"flags",children:"Flags"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"-c, --compositions string   Filepath to the Compositions file. Can contain a single Composition or multiple Compositions.\n-h, --help                  help for crossplane-promise\n-s, --skip-dependencies     Skip generating dependencies. For when the XRD and Compositions are already deployed to Crossplane\n-x, --xrd string            Filepath to the XRD file\n"})}),"\n",(0,t.jsx)(i.h2,{id:"global",children:"Global"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"-d, --dir string       The output directory to write the Promise structure to; defaults to '.' (default \".\")\n-g, --group string     The API group for the Promise\n-k, --kind string      The kind to be provided by the Promise\n    --plural string    The plural form of the kind. Defaults to the kind name with an additional 's' at the end.\n    --split            Split promise.yaml file into multiple files.\n-v, --version string   The group version for the Promise. Defaults to v1alpha1\n"})}),"\n",(0,t.jsx)(i.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"/main/kratix-cli/reference/kratix-init",children:"kratix init"}),": Command used to initialize Kratix resources"]}),"\n"]})]})}function d(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,i,r)=>{r.d(i,{R:()=>o,x:()=>a});var n=r(6540);const t={},s=n.createContext(t);function o(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);