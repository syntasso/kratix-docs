"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[1056],{28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var r=i(96540);const s={},o=r.createContext(s);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(o.Provider,{value:n},e.children)}},79263:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"main/learn-more/controlling-with-labels","title":"Controlling Kratix with labels","description":"Labels that influence how Kratix reconciles Promises and Resources.","source":"@site/docs/main/05-learn-more/03-controlling-with-labels.md","sourceDirName":"main/05-learn-more","slug":"/main/learn-more/controlling-with-labels","permalink":"/main/learn-more/controlling-with-labels","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/main/05-learn-more/03-controlling-with-labels.md","tags":[{"inline":true,"label":"suspending reconciliation","permalink":"/tags/suspending-reconciliation"},{"inline":true,"label":"pausing reconciliation","permalink":"/tags/pausing-reconciliation"},{"inline":true,"label":"manual reconciliation","permalink":"/tags/manual-reconciliation"},{"inline":true,"label":"workflows","permalink":"/tags/workflows"}],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Controlling Kratix with labels","description":"Labels that influence how Kratix reconciles Promises and Resources.","tags":["suspending reconciliation","pausing reconciliation","manual reconciliation","workflows"]},"sidebar":"mainSidebar","previous":{"title":"Kratix Internal Objects","permalink":"/main/learn-more/kratix-resources"},"next":{"title":"Status and Events","permalink":"/category/status-and-events"}}');var s=i(74848),o=i(28453);const t={title:"Controlling Kratix with labels",description:"Labels that influence how Kratix reconciles Promises and Resources.",tags:["suspending reconciliation","pausing reconciliation","manual reconciliation","workflows"]},l=void 0,a={},c=[{value:"Manual Reconciliation",id:"manual-reconciliation",level:2},{value:"Pausing Reconciliation",id:"pausing-reconciliation",level:2},{value:"Compound Promises",id:"compound-promises",level:3}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Kratix exposes a set of labels that alter the standard reconciliation behaviour for Promises and Resources. This page summarises how to use these labels and what to expect when they are applied."}),"\n",(0,s.jsx)(n.h2,{id:"manual-reconciliation",children:"Manual Reconciliation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'kratix.io/manual-reconciliation: "true"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Adding this label to a Promise or Resource Request forces Kratix to rerun the relevant workflow outside the normal reconciliation triggers."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Promise Configure workflow"})," \u2013 applying the label reruns the Configure workflow from the beginning, terminating any in-progress run."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Promise Delete workflow"})," \u2013 after a Promise is marked for deletion, setting the label immediately reruns the Delete workflow."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resource Configure workflow"})," \u2013 applying the label to a Resource Request behaves the same, restarting the Configure workflow."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resource Delete workflow"})," \u2013 after a Resource Request is marked for deletion, adding the label reruns the Delete workflow at once."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The label is removed automatically once Kratix schedules the manual run so it can be applied again later."}),"\n",(0,s.jsx)(n.h2,{id:"pausing-reconciliation",children:"Pausing Reconciliation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'kratix.io/paused: "true"\n'})}),"\n",(0,s.jsx)(n.p,{children:"This label can be applied to Promises or Resource Request to suspend reconciliation for the Promises or Resource Requests.\nAny workflows already running continue until completion, but Kratix will not schedule new\nworkflows while the label is present."}),"\n",(0,s.jsx)(n.p,{children:"Pausing a promise will stop Kratix from triggering workflows for any resource requests for that Promise.\nIt also means that any updates to the Promise will not be carried out until it has been unpaused."}),"\n",(0,s.jsx)(n.p,{children:"When the label is removed, Kratix will re-reconcile the affected objects:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For a promise, Kratix will run the promise configure workflows, and re-reconcile all existing resources."}),"\n",(0,s.jsx)(n.li,{children:"For a resource request, Kratix will run its configure workflows."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Pausing affects both configuration and deletion:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configure workflows"})," \u2013 changes to the object will not trigger any workflows until it is unpaused."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Delete workflows"})," \u2013 if the object is marked for deletion while paused, the\ndelete workflow will only be triggered when the label is removed."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"When an object is paused, it's status condition will reflect the 'paused' state until the label is removed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'status:\n  apiVersion: marketplace.kratix.io/v1alpha1\n  conditions:\n  - lastTransitionTime: "2025-09-22T13:17:27Z"\n    message: Paused\n    reason: PausedReconciliation\n    status: Unknown\n    type: Reconciled\n'})}),"\n",(0,s.jsxs)(n.p,{children:["A paused promise will also be marked as ",(0,s.jsx)(n.code,{children:"Unavailable"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"compound-promises",children:"Compound Promises"}),"\n",(0,s.jsxs)(n.p,{children:["When using ",(0,s.jsx)(n.a,{href:"../guides/compound-promises",children:"Compound Promises"}),", each Promise evaluates the pause label independently:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parent paused, children not"})," \u2013 the parent Promise stops reconciling. Child Promises continue reconciling normally."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Child paused, parent not"})," \u2013 the parent Promise continues reconciling, but requests depending on the paused child are not fully processed until that child is unpaused."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);