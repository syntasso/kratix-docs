"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"from-platform-to-destination","metadata":{"permalink":"/blog/from-platform-to-destination","source":"@site/blog/2024-11-20-decompressing-work/index.mdx","title":"How your Resources get from Promise to Destination","description":"The journey of a document from the Platform Cluster to a Destination","date":"2024-11-20T00:00:00.000Z","tags":[{"inline":true,"label":"kratix","permalink":"/blog/tags/kratix"},{"inline":true,"label":"kratix internals","permalink":"/blog/tags/kratix-internals"},{"inline":true,"label":"debugging","permalink":"/blog/tags/debugging"}],"readingTime":6.235,"hasTruncateMarker":true,"authors":[{"name":"Derik Evangelista","title":"Engineer @ Syntasso","url":"https://github.com/kirederik","imageURL":"https://2.gravatar.com/avatar/7ac63fbda18c97f6a7fab8af157021367793187f4c5830eb722ff565c5a767e9?size=256","key":"derik","page":null}],"frontMatter":{"slug":"from-platform-to-destination","title":"How your Resources get from Promise to Destination","description":"The journey of a document from the Platform Cluster to a Destination","authors":["derik"],"tags":["kratix","kratix internals","debugging"]},"unlisted":false,"nextItem":{"title":"September Product Update","permalink":"/blog/sept-2024-product-update"}},"content":"```mdx-code-block\\nimport Figure01 from \\"./figure01.png\\"\\nimport Figure02 from \\"./figure02.png\\"\\nimport Figure03 from \\"./figure03.png\\"\\nimport Figure04 from \\"./figure04.png\\"\\n```\\n\\nEver wondered how Kratix actually gets your documents from the Platform Cluster\\nto the correct Destination?\\n\\nThe Syntasso Team has recently introduced a\\n[change](https://github.com/syntasso/kratix/pull/243) to\\nKratix to reduce the size of the Work object. While this change is mostly\\ninternal, we wanted to share how the innards of Kratix work.\\n\\nSo brace yourself to learn:\\n- how Kratix moves documents from Platform to Destinations\\n- what works and workplacements are\\n- how to inspect works to debug your Promises\\n\\nYou are probably already familiar with how Kratix works at a high level and with\\nthe diagram below:\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Figure01} alt=\\"High level diagram explaining how\\nKratix processes requests\\" />\\n\\n  <figcaption>How Kratix processes a request to a Kubernetes Destination</figcaption>\\n</figure>\\n\\nAs illustrated above:\\n\\n1. The user sends a new **App Request** to the Platform Cluster.\\n2. The **Promise** reacts to that request and triggers the **Resource Configure\\n   Workflows**.\\n3. The Workflow completes and outputs a **series of documents** to be scheduled\\n   to a **Destination**.\\n4. These documents are written to a specific directory in the **State Store**.\\n5. In the diagram, the documents are scheduled to a Kubernetes **Destination**.\\n   These type of Destination usually have Flux (or ArgoCD, or another GitOps\\n   tool) watching the State Store. The tool picks up the new documents.\\n6. The documents are then processed and applied to the Destination.\\n7. The **App** becomes operational on the Destination.\\n\\nIn this post, I\'m going to expand on points (3) and (4): what happens at the end\\nof the Workflow? How is the document written to the State Store? And how does\\nthe change linked above affect this process?\\n\\n---\\n\\n{/* truncate */}\\n\\n:::tip\\n\\nIf the diagram is new to you, I recommend checking out the [Part I of the\\nKratix Workshop](http://localhost:3000/workshop/part-i/intro) for an overview of\\nKratix.\\n\\n:::\\n\\n## A Dive into Kratix Internals\\n\\nThe casual observers among you may have noticed that, when installing Kratix, a\\ncouple of CRDs are also created but not prominently mentioned in the guides\\nor workshops: the **Work** and the **WorkPlacement**.\\n\\nThe **Work** CRD contains the definition of, well, a Work. All the documents\\noutput by a workflow are captured in the Work Object as **workloads**. Each\\ndocument corresponds to a workload entry in the Work object. These workloads are\\ngrouped by the **destination selectors** specified by both the Workflow and the\\nPromise.\\n\\nIn other words, the Work object encapsulates everything needed to schedule the\\nworkloads to the Destinations.\\n\\n:::info How does the Work gets created?\\n\\nKeen observers may have notice the few extra containers that are included in the\\nWorkflow Job. One of these containers is called `work-writer`. As the name\\nsuggests, it handles creating the Work object at the end of the Workflow. \ud83d\ude09\\n\\n:::\\n\\nOne of the controllers bundled with Kratix is the **Work Controller**. This\\ncontroller is responsible for finding out all the available Destinations and\\nselecting the right one for each workload in a Work. It achieves this by\\nmonitoring Work objects and creating a **WorkPlacement** object for each\\nworkload.\\n\\n:::tip What if there\'s no Destination to schedule a workload?\\n\\nThe Work Controller marks the Work as **Unscheduled**. You can verify this by\\nchecking the `Scheduled` condition in the `status` field of the Work Object.\\n\\nOnce a Destination becomes available, the system will automatically try to\\nschedule any unscheduled Work.\\n\\n:::\\n\\nThe **WorkPlacement** object serves as a link between a Work (or specifically, a\\nworkload group within the Work) and a Destination. It contains a copy of the\\nWorkloads and information about the Destination it is scheduled to.\\n\\nThe WorkPlacement controller reacts to WorkPlacements and ensures the workloads\\nare written to the State Store associated with the Destination.\\n\\nThe diagram below illustrates the Work and WorkPlacement objects in details:\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Figure02} alt=\\"A Work with two workloads, from\\n    which two WorkPlacements are generated\\" />\\n\\n  <figcaption>A Work generating two WorkPlacements</figcaption>\\n</figure>\\n\\nIn summary:\\n\\n* The contents of a Workflow output are combined into a single Work object. Each\\n  document has an associated `workload` entry in the Work.\\n* Workloads are grouped by the destination selectors specified by the Workflow\\n  and the Promise.\\n* From the Work object, a WorkPlacement is created for each Workload group.\\n* The WorkPlacement controller writes the Workloads to the State Store\\n  associated with the Destination.\\n* \ud83c\udf89\\n\\nThat means the Work object can get quite large, since it\'s combining all the\\ndocuments into a single object. But how large is too large?\\n\\n## Reaching etcd limits\\n\\nThe answer is about 1.5MB. While the Kubernetes API accepts up to 3MB of data in\\na single request, etcd only persist keys up to 1.5MB (by default). Although this\\nis configurable, it\'s fair to assume that most clusters where Kratix is deployed\\nwill use the default settings.\\n\\nSo what happens if a Work object exceeds 1.5MB? The Configure Workflow fails at\\nthe `work-writer` container, and the error message isn\'t particularly helpful:\\n\\n```shell-session\\netcdserver: request is too large\\n```\\n\\n:::tip\\n\\nYou may see an error message like `Request entity too large: limit is\\n3145728`; that means you are hitting the Kubernetes API limit, not the etcd\\none.\\n\\n:::\\n\\nWhile it takes a lot of YAML to be over 1.5MB, you can easily reach such a limit\\nin your Promise. The [Prometheus\\nOperator](https://github.com/prometheus-operator/prometheus-operator), for\\nexample, includes 3.7MB of YAML!\\n\\nThis brings us back to the [change introduced by\\n243](https://github.com/syntasso/kratix/pull/243). In this update, we introduced\\ngzip compression for the Workload contents before persisting the Work into etcd.\\nThis significantly reduces the size of the Work object (gzip documentation\\nmentions an average of [70% reduction in\\nsize](https://www.gnu.org/software/gzip/manual/gzip.html)). For the Prometheus\\nOperator, for example, the size of the Work object went from 3.7MB to about\\n490KB\u2014an 87% reduction \ud83c\udf89!\\n\\nThe downside? If you inspect the Work object, you\u2019ll see base64-encoded binary\\ndata instead of some nice to read YAML.\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Figure03} alt=\\"Screenshot of a terminal showing\\n  the Work object with binary data in the contents of a Workload\\" />\\n\\n  <figcaption>A compressed Work Object</figcaption>\\n</figure>\\n\\nYou can still read it though. To inspect a workload\u2019s contents, decode the\\nbase64 data, then unzip it using this command:\\n\\n```shell-session\\nkubectl get work <work-name> \\\\\\n  -o jsonpath=\'{.spec.workloadGroups[0].workloads[0].content}\' \\\\\\n  | base64 -d \\\\\\n  | gzip -d\\n```\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Figure04} alt=\\"Screenshot of a terminal showing\\n  the decompressed contents of a workload from a Work object\\" />\\n\\n  <figcaption>A decompressed workload</figcaption>\\n</figure>\\n\\n:::tip\\n\\nCheck our [Troubleshooting guide](/main/troubleshooting) for more information on\\nhow to debug Kratix, including inspecting Works and WorkPlacements.\\n\\n:::\\n\\nDespite compression, large Work objects may still pose challenges. While this\\nupdate provides temporary relief, we\u2019ll need to revisit the structure to allow\\nusers to have unbounded fun with their Promises. But that\u2019s a story for another\\nday.\\n\\n## Conclusion\\n\\nIn this post, we dived into the internals of Kratix to understand how a\\ndocument moves from the Platform Cluster to a Destination. We saw how the\\nWork and WorkPlacement objects are used to schedule and write documents to the\\nState Store. We also saw how the recent change to compress the Workload\\ncontents has helped reduce the size of the Work object.\\n\\nWe hope this post has given you a better understanding of how Kratix works under\\nthe hood. If you have any questions or feedback (or want to see more blog posts\\nlike this) please don\'t hesitate to reach out to us on\\n[Slack](https://kratixworkspace.slack.com/) or\\n[GitHub](https://github.com/syntasso/kratix)."},{"id":"sept-2024-product-update","metadata":{"permalink":"/blog/sept-2024-product-update","source":"@site/blog/2024-09-24-product-update/index.mdx","title":"September Product Update","description":"Kratix CLI++, Permissions, and Backstage","date":"2024-09-24T00:00:00.000Z","tags":[{"inline":true,"label":"kratix","permalink":"/blog/tags/kratix"},{"inline":true,"label":"product update","permalink":"/blog/tags/product-update"},{"inline":true,"label":"backstage","permalink":"/blog/tags/backstage"}],"readingTime":4.745,"hasTruncateMarker":true,"authors":[{"name":"Cat Morris","title":"Product Manager @ Syntasso","url":"https://github.com/catmo-syntasso","imageURL":"https://github.com/catmo-syntasso.png","key":"cat","page":null}],"frontMatter":{"slug":"sept-2024-product-update","title":"September Product Update","description":"Kratix CLI++, Permissions, and Backstage","authors":["cat"],"tags":["kratix","product update","backstage"]},"unlisted":false,"prevItem":{"title":"How your Resources get from Promise to Destination","permalink":"/blog/from-platform-to-destination"}},"content":"import ReactPlayer from \'react-player/lazy\';\\n\\nHi friends \ud83d\ude0a I\'m Cat, Product Manager here at Syntasso, and I\'ve been listening\\nto you, our avid followers. \\"Cat, we love Kratix, and we love your team; we want\\nan update!\\" I hear you scream, so here I am, delivering this top-quality\\ncontent. You\'re welcome.\\n\\nGiven that this is our first Kratix Product Update\u2122 (not really \u2122), I wanted to\\nshout about some of the great work the team has done over the last few months,\\nso we\'re going back a bit further than we usually will\u2026 Indulge me; it was my\\nbirthday this month.\\n\\n## TL;DR\\n\\n<ReactPlayer width=\\"100%\\" playsinline wrapper=\\"p\\" controls={false} height={200} playing={true} muted={true} loop={true} url=\\"https://media0.giphy.com/media/Emg9qPKR5hquI/giphy.mp4\\" />\\n\\nIf you only have 10 seconds spare to read this blog, these are the features you\\nneed to know about:\\n\\n* We have two CLIs now! One for building promises and one for installing SKE (Syntasso Kratix Enterprise)\\n* Setting permissions just got a little bit easier\\n* If you like Backstage, you\u2019ll like what we\u2019re up to\\n\\n\x3c!-- truncate --\x3e\\n\\n## Big stuff for the fans of Kratix\\n\\n<ReactPlayer width=\\"100%\\" playsinline height={200} playing={true} muted={true} loop={true} url=\\"https://media0.giphy.com/media/yGEbmgiCJYu3u/giphy.mp4\\" />\\n\\n### Kratix Promise building CLI\\n\\nLike all good tools for developers, we needed a CLI - and one that is more than\\njust a rat nest of bash scripts*. It\'s now even easier to quickly whip together\\na Promise from scratch, or your existing **operators** and **helm charts**.\\n\\n\\nIt\'s unbelievably easy to get started. Head over to our kratix-cli repo,\\ndownload the latest release and go wild. You can read up on the tool in our docs\\nas well!\\n\\nimport CLIDemo from \'./cli-demo.mp4\';\\n\\n<p align=\\"center\\">\\n<ReactPlayer wrapper=\\"span\\" controls url={CLIDemo} />\\n</p>\\n\\n> _That\'s sweet!_\\n>\\n> \u2014 an actual quote from a customer trying out the new CLI.\\n\\n\\n*no offence meant to rats, their nests, or bash scripts that resemble said nests\\n\\n\\n### SKE Operator\\n\\nOur enterprise product, [Syntasso Kratix Enterprise\\n(SKE)](https://www.syntasso.io/pricing), comes with a bunch of cool features\\nthat makes it mega easy to get started, including integrations with Backstage,\\nTerraform Enterprise and now, super speedy installation via our [helm\\nchart](https://docs.kratix.io/ske/kratix/configuring-ske/via-helm) and the\\n[ske-cli](https://docs.kratix.io/ske/kratix/configuring-ske/via-ske-cli).\\n\\nThis will pull in some really cool stuff - it can help manage  upgrading Kratix,\\ncheck if those upgrades worked, and help you with rollbacks.\\n\\nIf you want to try it out, ping us an email at kratix@syntasso.io, and we\u2019ll\\nhook you up \ud83d\ude0e\\n\\nimport SKECli from \'./ske-cli.mp4\';\\n\\n<ReactPlayer wrapper=\\"span\\" muted={true} controls url={SKECli} />\\n\\n## Neat stuff (because security should not be YOLO!)\\n\\n<ReactPlayer width=\\"100%\\" playsinline height={200} playing={true} muted={true} loop={true} url=\\"https://media4.giphy.com/media/HHWdyVKaKJfI8qqJKU/giphy.mp4\\" />\\n\\n### Security uplift\\n\\nSo security is hard. We\u2019ve made this a little bit easier in two ways.\\n\\n#### RBAC permissions for your pipelines\\n\\nYou can set the RBAC permissions you want all your pipelines to have in the promise spec. There are a few ways you can do this depending on your use of service accounts and namespaces, so check out our docs.\\n\\nThis will give you as the promise writer more control of the permissions of your pipelines without having to manually set things up after applying a promise.\\n\\n```yaml\\nplatform: platform.kratix.io/v1alpha1\\nkind: Promise\\nmetadata:\\n  name: env\\nspec:\\n  ...\\n  workflows:\\n    resource:\\n      configure:\\n      - apiVersion: platform.kratix.io/v1alpha1\\n        kind: Pipeline\\n        metadata:\\n          name: slack-notify\\n        spec:\\n          rbac:\\n            permissions:\\n              - apiGroups: [\\"\\"]\\n                verbs: [\\"*\\"]\\n                resources: [\\"secrets\\"]\\n              - apiGroups: [\\"batch\\"]\\n                verbs: [\\"get\\"]\\n                resources: [\\"jobs\\"]\\n                resourceName: [\\"my-job\\"]\\n        ...\\n```\\n\\n#### Security Contexts for Your Pods\\n\\nBy default, Kratix-owned pods have security contexts set with all the privileges they need. Any containers provided by a Promise author got NOTHING. I didn\u2019t say Kratix was a fair project.\\n\\nBut we have just got a little fairer. You can now set security contexts for your own pods by specifying it in the container spec. Perhaps more excitingly, you can now specify a global default security context in the Kratix ConfigMap in the kratix-platform-system. Fire Configure and forget \ud83d\udd25\\n\\n```yaml\\napiVersion: v1\\nkind: ConfigMap\\nmetadata:\\n  name: kratix\\n  namespace: kratix-platform-system\\ndata:\\n  config: |\\n    workflows:\\n      defaultContainerSecurityContext:\\n        # Security context fields, e.g.:\\n        runAsNonRoot: false\\n```\\n\\n> _I think it is much better_ \ud83d\udc4d\\n>\\n> \u2014 Another actual customer quote.\\n\\n## More control over Backstage (with Kratix)\\n\\nIf you know anything about Syntasso, it\'s that we love Backstage. We even did a\\nwebinar with one of their product managers, the insightful Seve Kim.\\n\\nWe believe Kratix and Backstage work so beautifully together that our SKE\\noffering comes bundled with plugins that make managing Promises and Resources\\nfrom Backstage a joyful experience. This month, we\'ve given users even more\\ncontrol in two ways.\\n\\nPromise authors can now provide an \\"info\\" field as part of the Promise spec that\\nwill show up on your component page. This field supports markdown and has far\\ntoo much space to let your users know whatever will make their day a little\\neasier.\\n\\nWe have also made the first page of requesting a resource more configurable - we\\nknow not every end user will understand what their \\"namespace\\" should be (even\\nthough it is very important for knowing where we should put that resource!!) so\\nyou can configure that to whatever makes sense for your team. You can even go\\nfull abstraction and get rid of it entirely and pre-populate it with whatever\\nyou want. The sky\'s the limit.\\n\\n```mdx-code-block\\nimport Backstage from \\"./backstage.webp\\"\\n```\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Backstage} alt=\\"Screenshot of a Kratix Backstage entity\\" />\\n\\n  <figcaption>Backstage and Kratix: Best of friends</figcaption>\\n</figure>\\n\\n## Useful Kratix resources\\nYou should find the following resources helpful for your Kratix exploration:\\n\\n* [Kratix Github](https://github.com/syntasso/kratix)\\n* [Syntasso Kratix Enterprise homepage](https://www.syntasso.io/)\\n\\nShout out to the team at Port ([getport.io](http://getport.io/)) and Traefik\\n([traefik.io](http://traefik.io/)) for their awesome product update blogs, which\\nserved as inspiration for this post."}]}}')}}]);