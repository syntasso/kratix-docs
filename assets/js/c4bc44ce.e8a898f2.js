"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[2835],{6802:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"main/kratix-cli/reference/kratix-init-promise","title":"kratix init promise","description":"Initialize a new Promise","source":"@site/docs/main/06-kratix-cli/20-reference/10_kratix-init-promise.md","sourceDirName":"main/06-kratix-cli/20-reference","slug":"/main/kratix-cli/reference/kratix-init-promise","permalink":"/main/kratix-cli/reference/kratix-init-promise","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/main/06-kratix-cli/20-reference/10_kratix-init-promise.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"kratix init operator-promise","permalink":"/main/kratix-cli/reference/kratix-init-operator-promise"},"next":{"title":"kratix init tf-module-promise","permalink":"/main/kratix-cli/reference/kratix-init-tf-module-promise"}}');var t=r(4848),s=r(8453);const a={},o="kratix init promise",l={},d=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2},{value:"Flags",id:"flags",level:2},{value:"Global",id:"global",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"kratix-init-promise",children:"kratix init promise"})}),"\n",(0,t.jsx)(i.p,{children:"Initialize a new Promise"}),"\n",(0,t.jsx)(i.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(i.p,{children:"Initialize a new Promise within the current directory, with all the necessary files to get started"}),"\n",(0,t.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"kratix init promise PROMISE-NAME --group PROMISE-API-GROUP --kind PROMISE-API-KIND [flags]\n"})}),"\n",(0,t.jsx)(i.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"# initialize a new promise with the api group and provided kind\nkratix init promise postgresql --group syntasso.io --kind database\n\n# initialize a new promise with the specified version\nkratix init promise postgresql --group syntasso.io --kind database --version v1\n"})}),"\n",(0,t.jsx)(i.h2,{id:"flags",children:"Flags"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"-h, --help   help for promise\n"})}),"\n",(0,t.jsx)(i.h2,{id:"global",children:"Global"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"-d, --dir string       The output directory to write the Promise structure to; defaults to '.' (default \".\")\n-g, --group string     The API group for the Promise\n-k, --kind string      The kind to be provided by the Promise\n--plural string    The plural form of the kind. Defaults to the kind name with an additional 's' at the end.\n--split            Split promise.yaml file into multiple files.\n"})}),"\n",(0,t.jsx)(i.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"/main/kratix-cli/reference/kratix-init",children:"kratix init"}),": Command used to initialize Kratix resources"]}),"\n"]})]})}function p(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,i,r)=>{r.d(i,{R:()=>a,x:()=>o});var n=r(6540);const t={},s=n.createContext(t);function a(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);