"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[5986],{2944:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"main/reference/health-checks/healthdefinition","title":"Health Definition","description":"Documentation for the Health Definition Custom Resources","source":"@site/docs/main/03-reference/16-health-checks/02-health-definition.md","sourceDirName":"main/03-reference/16-health-checks","slug":"/main/reference/health-checks/healthdefinition","permalink":"/main/reference/health-checks/healthdefinition","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/main/03-reference/16-health-checks/02-health-definition.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"Documentation for the Health Definition Custom Resources","title":"Health Definition","sidebar_label":"Health Definition","id":"healthdefinition"},"sidebar":"mainSidebar","previous":{"title":"Introduction","permalink":"/main/reference/health-checks/intro"},"next":{"title":"Health Record","permalink":"/main/reference/health-checks/healthrecord"}}');var a=t(4848),o=t(8453);const r={description:"Documentation for the Health Definition Custom Resources",title:"Health Definition",sidebar_label:"Health Definition",id:"healthdefinition"},s="Health Definition",h={},c=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"health-definition",children:"Health Definition"})}),"\n",(0,a.jsx)(n.p,{children:"When a Promise defines a Healthcheck, Kratix will automatically create a Health Definition for that Healthcheck when a Resource Resource request is made. A Health Definition is the outline of the task that will be performed on a Destination to verify the health of a Resource Request."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: platform.kratix.io/v1alpha1\nkind: HealthDefinition\nmetadata:\n  name: healthdefinition\n  namespace: default\nspec:\n  # A reference to the Resource Request the Health Check should be performed against\n  resourceRef:\n    name: request-name\n    namespace: default\n  # A reference the Promise the Health Check should be performed against\n  promiseRef:\n    name: promise-name\n  # The time or interval the check should run against\n  # This can follow Cron syntax or macros such as @hourly\n  schedule: "* * * * *"\n  # The definition of the Resource the check will be performed against\n  input: |\n    apiVersion: mypromise.org/v1\n    kind: someservice\n    metadata:\n        name: someservice\n        namespace: default\n    spec:\n        example: data\n    status:\n        url: test.com\n  #\xa0The task to be performed on the destination\n  workflow:\n    # A Pipeline that runs an ordered set of OCI compliant images to perform health checks\n    apiVersion: platform.kratix.io/v1alpha1\n    kind: Pipeline\n    metadata:\n      name: health\n    spec:\n      containers:\n        - image: ghcr.io/myorg/health-check\n          name: health\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);