"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"compound-promises","metadata":{"permalink":"/blog/compound-promises","source":"@site/blog/2025-02-13-compound-promises/index.mdx","title":"How to write Compound Promises","description":"Everything you need to know about building Compound Promises effectively","date":"2025-02-13T00:00:00.000Z","tags":[{"inline":true,"label":"kratix","permalink":"/blog/tags/kratix"},{"inline":true,"label":"promises","permalink":"/blog/tags/promises"},{"inline":true,"label":"compound promise","permalink":"/blog/tags/compound-promise"}],"readingTime":18.73,"hasTruncateMarker":true,"authors":[{"name":"Derik Evangelista","title":"Engineer @ Syntasso","url":"https://github.com/kirederik","imageURL":"https://2.gravatar.com/avatar/7ac63fbda18c97f6a7fab8af157021367793187f4c5830eb722ff565c5a767e9?size=256","key":"derik","page":null}],"frontMatter":{"slug":"compound-promises","title":"How to write Compound Promises","description":"Everything you need to know about building Compound Promises effectively","authors":["derik"],"tags":["kratix","promises","compound promise"]},"unlisted":false,"nextItem":{"title":"How your Resources get from Promise to Destination","permalink":"/blog/from-platform-to-destination"}},"content":"So you read the [guide](/main/guides/compound-promises) on Compound Promises and tried out the Workshop, and decided that a compound promise is the right abstraction to expose in your platform. You are about to start writing it, but you are still wondering how you would _really_ go about writing one.\\n\\nWe hear you.\\n\\nIn this blog post, we will build a Compound Promise from scratch. Consider this the ultimate guide on how to build compound promises effectively.\\n\\nYou can follow this guide and build the Promise along with us, or you can use it as a reference when building your own Compound Promises. The Promise we will build is available [here](https://github.com/syntasso/kratix-docs/tree/main/assets/rubyapp-promise).\\n\\nAfter reading this post you will:\\n\\n* Learn about some basic Kratix concepts\\n* Learn how to write a Compound Promise\\n  * By transforming an user\'s request into a series of sub-requests\\n  * By sending those sub-requests to the Platform cluster (and why you need it)\\n  * By defining the sub-Promises that the parent Promise depends on\\n\\nClick on \\"read more\\" to continue!\\n\\n{/* truncate */}\\n\\n---\\n\\nBefore we start, let\'s clarify a few words we will use in abundance throughout this article:\\n\\n* **Promise**: The basic building block in Kratix. A Promise defines something-as-a-service. If you\'re unfamiliar with Promises, we recommend reading our documentation, such as [Installing and using a Promise](/main/guides/installing-a-promise).\\n* **Workflow**: defined within a Promise, it transforms the user\'s request into reality.\\n* **Compound Promise**: a Promise that orchestrates one or more Promises. We may refer to it as \\"the parent promise\\" or \\"the super promise\\" in this article.\\n  * The Promises that a Compound Promise is orchestrating may be referred to as \\"child promises\\" or \\"sub-promises\\".\\n\\nNow that we understand each other, let\'s dive into, well, the reason you are here: building a compound promise. I\'m going to split this article into the following sections:\\n\\n* Defining the user experience.\\n* Building the Compound Promise.\\n  * Implementing the API.\\n  * Implementing the workflows.\\n  * Scheduling to the Platform Cluster.\\n  * Defining the Promise requirements.\\n* Installing the Promise\\n* Testing it all together\\n\\nLet\'s jump right in!\\n\\n## Defining the user experience\\n\\nAs previously mentioned, a compound promise orchestrates one or more promises to provide a higher-level developer experience. Imagine a platform like Heroku or Fly.io: they make it very easy for developers to get off the ground and quickly get their applications up and running in the cloud. On the other hand, they still give users the necessary hooks to tweak configurations so they can get exactly what they need.\\n\\nFor example, to deploy a Rails application to [fly.io](https://fly.io/docs/rails/getting-started/existing/), all the user needs to do is execute a command using the `flyctl` CLI. That command Will interactively ask the user for inputs, like if they need a PostgreSQL database and a Redis cache to be deployed with the application, and, depending on their answers, it will create and deploy the necessary resources. It will also make sure that the running application is wired correctly to the services. Once everything is created, the user will get back an URL with the address of their running application (and services).\\n\\nKratix makes building a similar experience in your internal platform as easy. While it is possible to build all of that in a single Promise, a better approach is to build smaller, single-responsibility Promises\u2013like a dedicated PostgreSQL Promise\u2013and then create a Promise at a higher-level of abstraction that orchestrates requesting the lower-level resources. That higher-level Promise is what we are going to build.\\n\\nAnd what will this Promise do? Well, provide the exact same experience to deploy Rails applications as fly.io:\\n\\n* Given an container image of an application, the Promise should deploy it.\\n* If required by the user, they can also deploy:\\n  * A PostgreSQL database.\\n  * A Redis cache.\\n* The Promise should wire the application with the connection details of the optinal services.\\n\\nLuckily, all the sub-promises you need to build this Compound Promise are available in the [Kratix Marketplace](/marketplace):\\n* The Runtime Promise can deploy applications;\\n* The PostgreSQL Promise can deploy PostgreSQL databases;\\n* The Redis Promise can be our cache provider;\\n\\nAll the Compound Promise\u2014let\'s call it the RubyApp Promise\u2014needs to do is orchestrate requests to those other promises.\\n\\n\\n```mdx-code-block\\nimport Figure00 from \\"./figure00.png\\"\\n```\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Figure00} alt=\\"The RubyApp Promise interacting with sub-promises\\" />\\n\\n  <figcaption>RubyApp Promise orchestrating the sub-promises</figcaption>\\n</figure>\\n\\nIn order to create this experience, we must start by considering what\'s going to be the RubyApp Promise API: What can the users configure? What\'s the right level of abstraction? Do we give more configuration options and risk it being too complex, or keep it high-level and risk it being too limiting?\\n\\nAs with many good questions in life, the answer is: _it depends_. Circling back to the developer experience we want to provide, there are benefits in keeping things as simple as possible. The beauty of Compound Promises is that users can still directly use lower-level Promises. This characteristic allows Platform engineers to offer multiple ways of consuming services. The 80/20 rule is a good principle to keep in mind:\\n\\n* What would be an API that would satisfy 80% of the use-cases of the RubyApp Promise?\\n* The remaining 20% could consume the lower-level Promises directly.\\n\\nAlright, with that in mind, what should we include in the API?\\n\\nAt the most basic level, we need the application to run. Since we will run it in Kubernetes, this could be provided as a container image. We also need a way for users to specify whether they require a database or a cache (or both).\\n\\nSo our API is starting to form. Something like this may be enough to get us started:\\n\\n```yaml\\nimage: container/myapp:v1.0.0\\ndatabase: true\\ncache: false\\n```\\n\\nHowever, thinking a bit ahead, we can imagine a scenario where users would want a different type of database (like MySQL instead of PostgreSQL), or provide some extra configuration for the it. A better API would leave the options opened, so in the future we could expand on the options. Something like this would be better:\\n\\n```yaml\\nimage: myorg/ruby-app:v1.0.0\\ndatabase:\\n  driver: postgresql\\ncache:\\n  driver: redis\\n```\\n\\nIf we translate this to a resource request of the RubyApp Promise, it may look like this:\\n\\n```yaml\\napiVersion: internal.platform.io/v1\\nkind: RubyApp\\nmetadata:\\n  name: my-app\\n  namespace: default\\nspec:\\n  image: myorg/ruby-app:v1.0.0\\n  database:\\n    driver: postgresql\\n  cache:\\n    driver: redis\\n```\\n\\nWith the experience defined, we can now start building the Promise.\\n\\n## Building the Compound Promise\\n\\n:::tip[Skip the build!]\\n\\nYou can follow this guide and build the Promise along with us, or you can use it as a reference when building your own Compound Promises.\\n\\nThe Promise mentioned in this post is available [here](https://github.com/syntasso/kratix-docs/tree/main/assets/rubyapp-promise).\\n\\nYou can skip straight to [installing the Promise](#install) if you want to see it in action.\\n\\n:::\\n\\n### Implementing the API\\n\\nWith the API and experience defined, let\'s create the RubyApp Promise. We can use the [Kratix CLI](/main/kratix-cli/intro) to speed up development. Create a new directory in your system and initialise a new Promise:\\n\\n```bash\\nmkdir rubyapp-promise && cd rubyapp-promise\\n\\nkratix init promise rubyapp \\\\\\n  --group internal.platform.io \\\\\\n  --kind RubyApp \\\\\\n  --version v1\\n```\\n\\nThe command above should produce a `promise.yaml` in the `rubyapp-promise` directory. We can now add the API properties we defined above:\\n\\n```bash\\nkratix update api \\\\\\n  --property image:string \\\\\\n  --property database.driver:string \\\\\\n  --property cache.driver:string\\n```\\n\\nThe next step is to implement the workflow that will transform the user\'s request into the sub-promises request.\\n\\n### Implementing the Workflow\\n\\nTo quick-start the workflow, run the `kratix add container` command:\\n\\n```bash\\nkratix add container resource/configure/instance \\\\\\n  --image ghcr.io/syntasso/kratix-docs/rubyapp-promise:v1.0.0 \\\\\\n  --name deploy-resources\\n```\\n\\nAt this point, your local `rubyapp-promise` directory should look like this:\\n\\n```\\n.\\n\u251c\u2500\u2500 README.md\\n\u251c\u2500\u2500 example-resource.yaml\\n\u251c\u2500\u2500 promise.yaml\\n\u2514\u2500\u2500 workflows\\n    \u2514\u2500\u2500 resource\\n        \u2514\u2500\u2500 configure\\n            \u2514\u2500\u2500 instance\\n                \u2514\u2500\u2500 deploy-resources\\n                    \u251c\u2500\u2500 Dockerfile\\n                    \u251c\u2500\u2500 resources\\n                    \u2514\u2500\u2500 scripts\\n                        \u2514\u2500\u2500 pipeline.sh\\n\\n8 directories, 5 files\\n```\\n\\nA quick recap of what the pipeline script should do:\\n\\n1. Deploy the application specified with the specified image, via the Runtime Promise\\n1. Create a PostgreSQL instance if `database.driver` is set to `postgresql`, via the PostgreSQL Promise\\n1. Create a Redis instance if `cache.driver` is set to `redis`, via the Redis Promise.\\n1. Update the application environment variables with the credentials for the optional services.\\n\\n#### Adding the Runtime Request\\n\\nLet\'s start from the start and add the first requirement. To deploy the application via the Runtime Promise, the pipeline must output a Resource Request for that Promise. The [API for the Runtime Promise](https://github.com/syntasso/kratix-marketplace/blob/main/runtime/resource-request.yaml) looks like this:\\n\\n```yaml\\napiVersion: marketplace.kratix.io/v1alpha1\\nkind: Runtime\\nmetadata:\\n  name: example-runtime\\n  namespace: default\\nspec:\\n  lifecycle: dev\\n  image: syntasso/website\\n  servicePort: 80\\n  replicas: 1\\n  applicationEnv:\\n  - name: hello\\n    value: from-env\\n```\\n\\nAs you can see, the only configuration option we are currently providing in the API of our RubyApp promise is the image. All the other fields should either be populated by the RubyApp workflow, or left empty. We must also ensure the `metadata.name` we generate for this request is unique, otherwise it may clash with other resources already deployed.\\n\\nSince our pipeline script will be a bit complex, let\'s implement it using Ruby. For that, open the `Dockerfile` in `workflows/resource/configure/instance/deploy-resources/` and add `ruby` to your container. You should change the extension of the `pipeline.sh` to `pipeline.rb` as well.\\n\\nThe resulting Dockerfile will look like this:\\n\\n```dockerfile\\nFROM \\"alpine\\"\\n\\nRUN apk update && apk add --no-cache yq ruby\\n\\nADD scripts/pipeline.rb /usr/bin/pipeline.rb\\nADD resources resources\\n\\nRUN chmod +x /usr/bin/pipeline.rb\\n\\nCMD [ \\"sh\\", \\"-c\\", \\"pipeline.rb\\" ]\\nENTRYPOINT []\\n```\\n\\nUpdate the extension of the pipeline script in your filesystem:\\n\\n```bash\\nmv workflows/resource/configure/instance/deploy-resources/scripts/pipeline.{sh,rb}\\n```\\n\\nNow open the `pipeline.rb` script in `workflows/resource/configure/instance/deploy-resources/scripts` and update it to:\\n\\n```ruby\\n#!/usr/bin/env ruby\\n\\nrequire \'yaml\'\\n\\n# Read the input YAML file\\ninput_yaml = YAML.load_file(\'/kratix/input/object.yaml\')\\n\\n# Extract values from input\\napp_name = input_yaml[\'metadata\'][\'name\']\\nnamespace = input_yaml[\'metadata\'][\'namespace\']\\napp_image = input_yaml[\'spec\'][\'image\']\\n\\n# Create the Runtime request\\nruntime_request = {\\n  \'apiVersion\' => \'marketplace.kratix.io/v1alpha1\',\\n  \'kind\' => \'Runtime\',\\n  \'metadata\' => {\\n    \'name\' => app_name,\\n    \'namespace\' => namespace\\n  },\\n  \'spec\' => {\\n    \'image\' => app_image,\\n    \'replicas\' => 1,\\n    \'servicePort\' => 80,\\n    \'applicationEnv\' => [\\n      { \'name\' => \'PORT\', \'value\' => \'80\' }\\n    ]\\n  }\\n}\\n\\n# Write to Runtime request to the output file\\nFile.write(\'/kratix/output/runtime-request.yaml\', runtime_request.to_yaml)\\n```\\n\\nAs you can see, we have hidden away from the RubyApp user a few options the Runtime Promise provides, like replicas and service port. In your own organisation, those options may need to be exposed at the higher-level Promise.\\n\\n#### Adding the PostgreSQL Request\\n\\nNext step is to optionally include a request to the PostgreSQL Promise if the user requested a database. The API for the PostgreSQL Promise looks like this:\\n\\n```yaml\\napiVersion: marketplace.kratix.io/v1alpha1\\nkind: postgresql\\nmetadata:\\n  name: example\\n  namespace: default\\nspec:\\n  env: dev\\n  teamId: acid\\n  dbName: bestdb\\n```\\n\\nBack in the pipeline script, let\'s update it to include this request when needed. We should also make sure to include the connection details as environment variables to our Runtime request, so the application can connect. Add the following code snippet just after the `runtime_request` assignment:\\n\\n\\n```ruby\\n# ...\\n\\ndatabase_driver = input_yaml.dig(\'spec\', \'database\', \'driver\')\\n\\nif database_driver == \\"postgresql\\" then\\n  # The PostgreSQL Request\\n  database_request = {\\n    \'apiVersion\' => \'marketplace.kratix.io/v1alpha1\',\\n    \'kind\' => \'postgresql\',\\n    \'metadata\' => {\\n      \'name\' => app_name + \'-db\',\\n      \'namespace\' => namespace\\n    },\\n    \'spec\' => {\\n      \'env\' => \'dev\',\\n      \'teamId\' => app_name,\\n      \'dbName\' => app_name + \'-db\'\\n    }\\n  }\\n\\n  # This is the secret name the PostgreSQL promise will generate\\n  secret_name=\\"#{app_name}.#{app_name}-#{app_name}-db-postgresql.credentials.postgresql.acid.zalan.do\\"\\n\\n  ## Injecting the secrets into the application env\\n  runtime_request[\'spec\'][\'applicationEnv\'].push({\\n    \'name\' => \'PGHOST\',\\n    \'value\' => \'${app_name}-${app_name}-db-postgresql.default.svc.cluster.local\'\\n  }, {\\n    \'name\' => \'DBNAME\',\\n    \'value\' => \'${app_name}-db\'\\n  }, {\\n    \'name\' => \'PGUSER\',\\n    \'valueFrom\' => {\\n      \'secretKeyRef\' => { \'name\' => secret_name, \'key\' => \'username\' }\\n    }\\n  }, {\\n      \'name\' => \'PGPASSWORD\',\\n      \'valueFrom\' => {\\n        \'secretKeyRef\' => { \'name\' => secret_name, \'key\' => \'password\' }\\n      }\\n    }\\n  )\\n\\n  File.write(\'/kratix/output/postgresql-request.yaml\', database_request.to_yaml)\\nend\\n```\\n\\n:::tip[Where is the connection details coming from?]\\n\\nThe PostgreSQL Promise generates a Secret and a Service as part of its resource workflow. The Runtime Promise provides the `spec.applicationEnv` property, which allows us to inject environment variables directly into the application.\\n\\nBy combining these two mechanisms, we can seamlessly construct the connection details for the application.\\n\\n:::\\n\\n#### Adding the Redis Request\\n\\nFinally, we do the same with the Redis Promise. It\'s API looks like this:\\n\\n```yaml\\napiVersion: marketplace.kratix.io/v1alpha1\\nkind: redis\\nmetadata:\\n  name: example\\n  namespace: default\\nspec:\\n  size: small\\n```\\n\\nSimple. Similar to the PostgreSQL request, when the user requests a cache, we should add the Redis request to the output directory and inject the connection details into the Runtime request. Right after the PostgreSQL block you just added, include the following:\\n\\n```ruby\\n\\ncache_driver = input_yaml.dig(\'spec\', \'cache\', \'driver\')\\n\\nif cache_driver == \\"redis\\" then\\n  redis_request = {\\n    \'apiVersion\' => \'marketplace.kratix.io/v1alpha1\',\\n    \'kind\' => \'redis\',\\n    \'metadata\' => {\\n      \'name\' => app_name + \'-cache\',\\n      \'namespace\' => namespace\\n    },\\n    \'spec\' => {\\n      \'size\' => \'small\'\\n    }\\n  }\\n\\n  runtime_request[\'spec\'][\'applicationEnv\'].push({\\n    \'name\' => \'REDIS_URL\',\\n    \'value\' => \\"redis://rfs-#{app_name}-cache:26379/1\\"\\n  }, {\\n    \'name\' => \'REDIS_POOL_SIZE\',\\n    \'value\' => \'5\'\\n  })\\n\\n  File.write(\'/kratix/output/redis-request.yaml\', redis_request.to_yaml)\\nend\\n```\\n\\nAnd that\'s it. Workflow done!\\n\\n<details>\\n<summary>Click here for the complete `pipeline.rb` script</summary>\\n\\n```ruby\\n#!/usr/bin/env ruby\\n\\nrequire \'yaml\'\\n\\n# Read the input YAML file\\ninput_yaml = YAML.load_file(\'/kratix/input/object.yaml\')\\n\\n# Extract values from input\\napp_name = input_yaml[\'metadata\'][\'name\']\\nnamespace = input_yaml[\'metadata\'][\'namespace\']\\napp_image = input_yaml[\'spec\'][\'image\']\\n\\n# Create the Runtime request\\nruntime_request = {\\n  \'apiVersion\' => \'marketplace.kratix.io/v1alpha1\',\\n  \'kind\' => \'Runtime\',\\n  \'metadata\' => {\\n    \'name\' => app_name,\\n    \'namespace\' => namespace\\n  },\\n  \'spec\' => {\\n    \'image\' => app_image,\\n    \'replicas\' => 1,\\n    \'servicePort\' => 80,\\n    \'applicationEnv\' => [\\n      { \'name\' => \'PORT\', \'value\' => \'80\' }\\n    ]\\n  }\\n}\\n\\ndatabase_driver = input_yaml.dig(\'spec\', \'database\', \'driver\')\\n\\nif database_driver == \\"postgresql\\" then\\n  # The PostgreSQL Request\\n  database_request = {\\n    \'apiVersion\' => \'marketplace.kratix.io/v1alpha1\',\\n    \'kind\' => \'postgresql\',\\n    \'metadata\' => {\\n      \'name\' => app_name + \'-db\',\\n      \'namespace\' => namespace\\n    },\\n    \'spec\' => {\\n      \'env\' => \'dev\',\\n      \'teamId\' => app_name,\\n      \'dbName\' => app_name + \'-db\'\\n    }\\n  }\\n\\n  # This is the secret name the PostgreSQL promise will generate\\n  secret_name=\\"#{app_name}.#{app_name}-#{app_name}-db-postgresql.credentials.postgresql.acid.zalan.do\\"\\n\\n  ## Injecting the secrets into the application env\\n  runtime_request[\'spec\'][\'applicationEnv\'].push({\\n    \'name\' => \'PGHOST\',\\n    \'value\' => \'${app_name}-${app_name}-db-postgresql.default.svc.cluster.local\'\\n  }, {\\n    \'name\' => \'DBNAME\',\\n    \'value\' => \'${app_name}-db\'\\n  }, {\\n    \'name\' => \'PGUSER\',\\n    \'valueFrom\' => {\\n      \'secretKeyRef\' => { \'name\' => secret_name, \'key\' => \'username\' }\\n    }\\n  }, {\\n      \'name\' => \'PGPASSWORD\',\\n      \'valueFrom\' => {\\n        \'secretKeyRef\' => { \'name\' => secret_name, \'key\' => \'password\' }\\n      }\\n    }\\n  )\\n\\n  File.write(\'/kratix/output/postgresql-request.yaml\', database_request.to_yaml)\\nend\\n\\ncache_driver = input_yaml.dig(\'spec\', \'cache\', \'driver\')\\n\\nif cache_driver == \\"redis\\" then\\n  redis_request = {\\n    \'apiVersion\' => \'marketplace.kratix.io/v1alpha1\',\\n    \'kind\' => \'redis\',\\n    \'metadata\' => {\\n      \'name\' => app_name + \'-cache\',\\n      \'namespace\' => namespace\\n    },\\n    \'spec\' => {\\n      \'size\' => \'small\'\\n    }\\n  }\\n\\n  runtime_request[\'spec\'][\'applicationEnv\'].push({\\n    \'name\' => \'REDIS_URL\',\\n    \'value\' => \\"redis://rfs-#{app_name}-cache:26379/1\\"\\n  }, {\\n    \'name\' => \'REDIS_POOL_SIZE\',\\n    \'value\' => \'5\'\\n  })\\n\\n  File.write(\'/kratix/output/redis-request.yaml\', redis_request.to_yaml)\\nend\\n\\n# Write to Runtime request to the output file\\nFile.write(\'/kratix/output/runtime-request.yaml\', runtime_request.to_yaml)\\n```\\n\\n</details>\\n\\nThere are only two things left to do in our Compound Promise:\\n\\n* Ensure the outputs of the pipeline are scheduled to the Platform cluster\\n* Set the sub-Promises as requirements for the Compound Promise\\n\\nThe next sections will explore how to do this.\\n\\n### Scheduling to the Platform cluster\\n\\nLet take a moment to revisit the behaviour of installing a normal Promise. When a Promise is applied on the Platform cluster, Kratix ensures the API defined within the Promise becomes available in the Platform as a CRD, which enable users to make request to those Promises. The Promise dependencies, on the other hand, are installed on any Destination that could run the workloads.\\n\\nThe Runtime Promise we will use, for example, has a dependency on the Nginx Controller. When that promise is applied, that dependency is installed into any Destination that can receive Runtime instances. When a user requests a new instance, they use the Runtime Promise API to trigger the workflows, that will in turn generate the documents that will be scheduled to the Destination.\\n\\n```mdx-code-block\\nimport Figure02 from \\"./figure02.png\\"\\n```\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Figure02} alt=\\"The Runtime Promise\\" />\\n\\n  <figcaption>The Runtime Promise and it\'s point of interaction</figcaption>\\n</figure>\\n\\nCompound Promises behave the exact same way: in response of a user\'s request, a workflow is executed and a set of documents are generated. Those documents are stored in the State Store to be picked up by a GitOps agent. The difference here is that those documents are themselves requests for other Promises. That means that the Cluster reconciling on the State Store must be able to understand the CRD of the sub-Promises. In most cases, that means scheduling the documents to the Platform cluster itself.\\n\\n\\n```mdx-code-block\\nimport Figure03 from \\"./figure03.png\\"\\n```\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Figure03} alt=\\"The Platform cluster reconciling on the State store\\" />\\n\\n  <figcaption>Scheduling documents to the Platform cluster</figcaption>\\n</figure>\\n\\nTo ensure that the documents generated by the RubyApp Promise are scheduled to the Platform cluster, we need to:\\n\\n1. Create a Destination representing the platform with some specific labels, like `environment=platform`\\n2. Configure the GitOps agent in the Platform cluster\\n3. Add Destination Selectors in the Compound Promise.\\n\\nWe won\'t go into details (1) and (2) in this blog post. You can find more information on how to [Registering the Platform as a Destination](/workshop/installing-kratix#register-the-platform-as-a-destination) in the Kratix workshop.\\n\\n:::tip\\n\\nTo quickly get an environment compatible with the promises in this blog post, clone Kratix and run:\\n\\n```bash\\nmake quick-start\\nmake prepare-platform-as-destination\\n```\\n\\n:::\\n\\nAt this stage, you should see the following when listing the Destinations in your Platform cluster:\\n\\n```shell-session\\n$ kubectl --context $PLATFORM get destinations --show-labels\\nNAME               READY   LABELS\\nplatform-cluster   True    environment=platform\\nworker-1           True    environment=dev\\n```\\n\\nFor (3), open your Promise file and, under `spec`, add the following:\\n\\n```yaml\\napiVersion: platform.kratix.io/v1alpha1\\nkind: Promise\\nmetadata:\\n  creationTimestamp: null\\n  name: rubyapp\\nspec:\\n  #highlight-start\\n  destinationSelectors:\\n  - matchLabels:\\n      environment: platform\\n  #highlight-end\\n  api: #...\\n```\\n\\n:::tip\\n\\nIt is possible to dynamically generate the destination selectors by creating a `destination-selectors.yaml` file in the `/kratix/metadata/` directory in the Workflow. You can read more about it in [Managing Multiple Destinations](/main/reference/destinations/multidestination-management).\\n\\n:::\\n\\nThe above declaration tells Kratix to schedule the outputs of this Promise to a Destination with the label `environment=platform`. Since we configured the Platform destination with this label, we already have everything in place for the RubyApp Promise to work.\\n\\n\\n### Defining the Promise Requirements\\n\\nThe final piece missing in our Compound Promise is the declaration of the sub-Promises it depends on. For that, you set the `spec.requiredPromises` field in the Compound Promise document with a list of sub-Promise names and versions.\\n\\nLet\'s update our RubyApp Promise to include the required sub-Promises:\\n\\n\\n```yaml\\napiVersion: platform.kratix.io/v1alpha1\\nkind: Promise\\nmetadata:\\n  creationTimestamp: null\\n  name: rubyapp\\nspec:\\n  #highlight-start\\n  requiredPromises:\\n  - name: postgresql\\n    version: v1.0.0-beta.2\\n  - name: redis\\n    version: v0.1.0\\n  - name: runtime\\n    version: v1.0.0\\n  #highlight-end\\n  destinationSelectors: #..\\n  api: #...\\n```\\n\\nWe are now ready to install it!\\n\\n## Installing the Promise {#install}\\n\\nIf we try to install the Compound Promise now, you should get a warning:\\n\\n```shell-session\\n$ kubectl --context $PLATFORM apply --filename promise.yaml\\nWarning: Required Promise \\"postgresql\\" at version \\"v1.0.0-beta.2\\" not installed\\nWarning: Required Promise \\"redis\\" at version \\"v1.0.0-beta.1\\" not installed\\nWarning: Required Promise \\"runtime\\" at version \\"v0.1.0\\" not installed\\nWarning: Promise will not be available until the above issue(s) is resolved\\npromise.platform.kratix.io/rubyapp configured\\n```\\n\\nThe Compound Promise itself will remain unavailable until the requirements are satisfied.\\n\\n```shell-session\\n$ kubectl --context $PLATFORM get promises\\nNAME      STATUS        KIND      API VERSION               VERSION\\nrubyapp   Unavailable   RubyApp   internal.platform.io/v1\\n```\\n\\nTo satisfy the `requiredPromises` declaration, you will to, well, install the required promises in your Platform cluster:\\n\\n```bash\\nkubectl --context $PLATFORM apply --filename https://raw.githubusercontent.com/syntasso/promise-postgresql/main/promise-release.yaml\\nkubectl --context $PLATFORM apply --filename https://raw.githubusercontent.com/syntasso/kratix-marketplace/main/redis/promise-release.yaml\\nkubectl --context $PLATFORM apply --filename https://raw.githubusercontent.com/syntasso/kratix-marketplace/main/runtime/promise-release.yaml\\n```\\n\\nAfter a few seconds, you should see all the Promises available in your Platform:\\n\\n```shell-session\\n$ kubectl --context $PLATFORM get promises\\nNAME         STATUS      KIND         API VERSION                      VERSION\\npostgresql   Available   postgresql   marketplace.kratix.io/v1alpha1   v1.0.0-beta.2\\nredis        Available   redis        marketplace.kratix.io/v1alpha1   v0.1.0\\nrubyapp      Available   RubyApp      internal.platform.io/v1\\nruntime      Available   Runtime      marketplace.kratix.io/v1alpha1   v1.0.0\\n```\\n\\n:::tip\\n\\nYou may have noticed that we are applying a different type of resource: a Promise Release. This blog post will not go into detail on the Promise Releases, but you can find more information on them [here](/main/reference/promises/releases).\\n\\n:::\\n\\nYou are now ready to send requests to your Compound Promise!\\n\\n## Testing it all together\\n\\nNow that you have everything set in the Platform, you can go ahead and deploy the your applications!\\n\\nFor that, create a request for your RubyApp Promise:\\n\\n```yaml\\ncat <<EOF | kubectl --context $PLATFORM apply -f -\\napiVersion: internal.platform.io/v1\\nkind: RubyApp\\nmetadata:\\n  name: myapp\\nspec:\\n  image: syntasso/example-rails-app:v1.0.0 # you can use this one, or build your own\\n  database:\\n    driver: postgresql\\n  cache:\\n    driver: redis\\nEOF\\n```\\n\\nSending this request will immediately trigger the RubyApp Promise Resource workflow. That, in turn, should trigger the sub-promises workflows:\\n\\n```shell-session\\n$ kubectl --context $PLATFORM get pods\\nNAME                                                        READY   STATUS      RESTARTS   AGE\\nkratix-postgresql-myapp-db-instance-configure-abcc3-brgbh   0/1     Completed   0          46s\\nkratix-redis-myapp-redis-instance-configure-d2c53-rqf8s     0/1     Completed   0          46s\\nkratix-rubyapp-myapp-instance-c87d1-k892w                   0/1     Completed   0          53s\\nkratix-runtime-myapp-instance-2ecbc-2lstz                   0/1     Completed   0          45s\\n```\\n\\nIn a couple of minutes, in your Worker cluster, you should see the application pod running, alongside the Redis and PostgreSQL databases:\\n\\n```shell-session\\nNAME                                              READY   STATUS        RESTARTS   AGE\\nmyapp-7c7cffcc5f-7wrdd                            1/1     Running       0          33s\\nmyapp-myapp-db-postgresql-0                       1/1     Running       0          32s\\nrfr-myapp-redis-0                                 1/1     Running       0          33s\\nrfs-myapp-redis-5cb45649b4-mx5wq                  1/1     Running       0          33s\\n# other pods\\n```\\n\\nAnd you can now access your application:\\n\\n\\n:::tip\\n\\nIf you used the quick-start command to set up your environment, you can access the application at http://myapp.default.local.gd:31338/. Otherwise, you may need to port-forward to the application pod.\\n\\nYou also may need a couple of refreshes to get the green checks, as the database and cache may take a few seconds to be ready.\\n\\n:::\\n\\n```mdx-code-block\\nimport RunningApp from \\"./running-app.png\\"\\n```\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={RunningApp} alt=\\"Rails application running with PostgreSQL and Redis \\" />\\n\\n  <figcaption>The running Rails App</figcaption>\\n</figure>\\n\\n\ud83c\udf89 The App is up-and-running! The RubyApp Promise has successfully orchestrated the provisioning of the PostgreSQL and Redis databases, and the deployment of the application. It then wired the application to the databases by injecting the connection details into the environment variables.\\n\\n## Conclusion\\n\\nWe\'ve just taken a deep dive into building a Compound Promise from the ground up. From defining a user-centric experience to orchestrating sub-promises, we\'ve walked through each critical step of creating flexible platform abstractions.\\n\\nThe magic of Compound Promises lies not just in their technical implementation, but in their ability to abstract away complexity while keeping extensibility at the forefront. The RubyApp Promise we built today is just the beginning\u2014imagine the platforms you could create!\\n\\nI hope this post gives you a good base to build your own developer experiences with Compound Promises. As always, feel free to drop by our [Slack](https://kratix.slack.com) or [GitHub](https://github.com/syntasso/kratix) to continue the conversation."},{"id":"from-platform-to-destination","metadata":{"permalink":"/blog/from-platform-to-destination","source":"@site/blog/2024-11-20-decompressing-work/index.mdx","title":"How your Resources get from Promise to Destination","description":"The journey of a document from the Platform Cluster to a Destination","date":"2024-11-20T00:00:00.000Z","tags":[{"inline":true,"label":"kratix","permalink":"/blog/tags/kratix"},{"inline":true,"label":"kratix internals","permalink":"/blog/tags/kratix-internals"},{"inline":true,"label":"debugging","permalink":"/blog/tags/debugging"}],"readingTime":6.235,"hasTruncateMarker":true,"authors":[{"name":"Derik Evangelista","title":"Engineer @ Syntasso","url":"https://github.com/kirederik","imageURL":"https://2.gravatar.com/avatar/7ac63fbda18c97f6a7fab8af157021367793187f4c5830eb722ff565c5a767e9?size=256","key":"derik","page":null}],"frontMatter":{"slug":"from-platform-to-destination","title":"How your Resources get from Promise to Destination","description":"The journey of a document from the Platform Cluster to a Destination","authors":["derik"],"tags":["kratix","kratix internals","debugging"]},"unlisted":false,"prevItem":{"title":"How to write Compound Promises","permalink":"/blog/compound-promises"},"nextItem":{"title":"September Product Update","permalink":"/blog/sept-2024-product-update"}},"content":"```mdx-code-block\\nimport Figure01 from \\"./figure01.png\\"\\nimport Figure02 from \\"./figure02.png\\"\\nimport Figure03 from \\"./figure03.png\\"\\nimport Figure04 from \\"./figure04.png\\"\\n```\\n\\nEver wondered how Kratix actually gets your documents from the Platform Cluster\\nto the correct Destination?\\n\\nThe Syntasso Team has recently introduced a\\n[change](https://github.com/syntasso/kratix/pull/243) to\\nKratix to reduce the size of the Work object. While this change is mostly\\ninternal, we wanted to share how the innards of Kratix work.\\n\\nSo brace yourself to learn:\\n- how Kratix moves documents from Platform to Destinations\\n- what works and workplacements are\\n- how to inspect works to debug your Promises\\n\\nYou are probably already familiar with how Kratix works at a high level and with\\nthe diagram below:\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Figure01} alt=\\"High level diagram explaining how\\nKratix processes requests\\" />\\n\\n  <figcaption>How Kratix processes a request to a Kubernetes Destination</figcaption>\\n</figure>\\n\\nAs illustrated above:\\n\\n1. The user sends a new **App Request** to the Platform Cluster.\\n2. The **Promise** reacts to that request and triggers the **Resource Configure\\n   Workflows**.\\n3. The Workflow completes and outputs a **series of documents** to be scheduled\\n   to a **Destination**.\\n4. These documents are written to a specific directory in the **State Store**.\\n5. In the diagram, the documents are scheduled to a Kubernetes **Destination**.\\n   These type of Destination usually have Flux (or ArgoCD, or another GitOps\\n   tool) watching the State Store. The tool picks up the new documents.\\n6. The documents are then processed and applied to the Destination.\\n7. The **App** becomes operational on the Destination.\\n\\nIn this post, I\'m going to expand on points (3) and (4): what happens at the end\\nof the Workflow? How is the document written to the State Store? And how does\\nthe change linked above affect this process?\\n\\n---\\n\\n{/* truncate */}\\n\\n:::tip\\n\\nIf the diagram is new to you, I recommend checking out the [Part I of the\\nKratix Workshop](http://localhost:3000/workshop/part-i/intro) for an overview of\\nKratix.\\n\\n:::\\n\\n## A Dive into Kratix Internals\\n\\nThe casual observers among you may have noticed that, when installing Kratix, a\\ncouple of CRDs are also created but not prominently mentioned in the guides\\nor workshops: the **Work** and the **WorkPlacement**.\\n\\nThe **Work** CRD contains the definition of, well, a Work. All the documents\\noutput by a workflow are captured in the Work Object as **workloads**. Each\\ndocument corresponds to a workload entry in the Work object. These workloads are\\ngrouped by the **destination selectors** specified by both the Workflow and the\\nPromise.\\n\\nIn other words, the Work object encapsulates everything needed to schedule the\\nworkloads to the Destinations.\\n\\n:::info How does the Work gets created?\\n\\nKeen observers may have notice the few extra containers that are included in the\\nWorkflow Job. One of these containers is called `work-writer`. As the name\\nsuggests, it handles creating the Work object at the end of the Workflow. \ud83d\ude09\\n\\n:::\\n\\nOne of the controllers bundled with Kratix is the **Work Controller**. This\\ncontroller is responsible for finding out all the available Destinations and\\nselecting the right one for each workload in a Work. It achieves this by\\nmonitoring Work objects and creating a **WorkPlacement** object for each\\nworkload.\\n\\n:::tip What if there\'s no Destination to schedule a workload?\\n\\nThe Work Controller marks the Work as **Unscheduled**. You can verify this by\\nchecking the `Scheduled` condition in the `status` field of the Work Object.\\n\\nOnce a Destination becomes available, the system will automatically try to\\nschedule any unscheduled Work.\\n\\n:::\\n\\nThe **WorkPlacement** object serves as a link between a Work (or specifically, a\\nworkload group within the Work) and a Destination. It contains a copy of the\\nWorkloads and information about the Destination it is scheduled to.\\n\\nThe WorkPlacement controller reacts to WorkPlacements and ensures the workloads\\nare written to the State Store associated with the Destination.\\n\\nThe diagram below illustrates the Work and WorkPlacement objects in details:\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Figure02} alt=\\"A Work with two workloads, from\\n    which two WorkPlacements are generated\\" />\\n\\n  <figcaption>A Work generating two WorkPlacements</figcaption>\\n</figure>\\n\\nIn summary:\\n\\n* The contents of a Workflow output are combined into a single Work object. Each\\n  document has an associated `workload` entry in the Work.\\n* Workloads are grouped by the destination selectors specified by the Workflow\\n  and the Promise.\\n* From the Work object, a WorkPlacement is created for each Workload group.\\n* The WorkPlacement controller writes the Workloads to the State Store\\n  associated with the Destination.\\n* \ud83c\udf89\\n\\nThat means the Work object can get quite large, since it\'s combining all the\\ndocuments into a single object. But how large is too large?\\n\\n## Reaching etcd limits\\n\\nThe answer is about 1.5MB. While the Kubernetes API accepts up to 3MB of data in\\na single request, etcd only persist keys up to 1.5MB (by default). Although this\\nis configurable, it\'s fair to assume that most clusters where Kratix is deployed\\nwill use the default settings.\\n\\nSo what happens if a Work object exceeds 1.5MB? The Configure Workflow fails at\\nthe `work-writer` container, and the error message isn\'t particularly helpful:\\n\\n```shell-session\\netcdserver: request is too large\\n```\\n\\n:::tip\\n\\nYou may see an error message like `Request entity too large: limit is\\n3145728`; that means you are hitting the Kubernetes API limit, not the etcd\\none.\\n\\n:::\\n\\nWhile it takes a lot of YAML to be over 1.5MB, you can easily reach such a limit\\nin your Promise. The [Prometheus\\nOperator](https://github.com/prometheus-operator/prometheus-operator), for\\nexample, includes 3.7MB of YAML!\\n\\nThis brings us back to the [change introduced by\\n243](https://github.com/syntasso/kratix/pull/243). In this update, we introduced\\ngzip compression for the Workload contents before persisting the Work into etcd.\\nThis significantly reduces the size of the Work object (gzip documentation\\nmentions an average of [70% reduction in\\nsize](https://www.gnu.org/software/gzip/manual/gzip.html)). For the Prometheus\\nOperator, for example, the size of the Work object went from 3.7MB to about\\n490KB\u2014an 87% reduction \ud83c\udf89!\\n\\nThe downside? If you inspect the Work object, you\u2019ll see base64-encoded binary\\ndata instead of some nice to read YAML.\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Figure03} alt=\\"Screenshot of a terminal showing\\n  the Work object with binary data in the contents of a Workload\\" />\\n\\n  <figcaption>A compressed Work Object</figcaption>\\n</figure>\\n\\nYou can still read it though. To inspect a workload\u2019s contents, decode the\\nbase64 data, then unzip it using this command:\\n\\n```shell-session\\nkubectl get work <work-name> \\\\\\n  -o jsonpath=\'{.spec.workloadGroups[0].workloads[0].content}\' \\\\\\n  | base64 -d \\\\\\n  | gzip -d\\n```\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Figure04} alt=\\"Screenshot of a terminal showing\\n  the decompressed contents of a workload from a Work object\\" />\\n\\n  <figcaption>A decompressed workload</figcaption>\\n</figure>\\n\\n:::tip\\n\\nCheck our [Troubleshooting guide](/main/troubleshooting) for more information on\\nhow to debug Kratix, including inspecting Works and WorkPlacements.\\n\\n:::\\n\\nDespite compression, large Work objects may still pose challenges. While this\\nupdate provides temporary relief, we\u2019ll need to revisit the structure to allow\\nusers to have unbounded fun with their Promises. But that\u2019s a story for another\\nday.\\n\\n## Conclusion\\n\\nIn this post, we dived into the internals of Kratix to understand how a\\ndocument moves from the Platform Cluster to a Destination. We saw how the\\nWork and WorkPlacement objects are used to schedule and write documents to the\\nState Store. We also saw how the recent change to compress the Workload\\ncontents has helped reduce the size of the Work object.\\n\\nWe hope this post has given you a better understanding of how Kratix works under\\nthe hood. If you have any questions or feedback (or want to see more blog posts\\nlike this) please don\'t hesitate to reach out to us on\\n[Slack](https://kratixworkspace.slack.com/) or\\n[GitHub](https://github.com/syntasso/kratix)."},{"id":"sept-2024-product-update","metadata":{"permalink":"/blog/sept-2024-product-update","source":"@site/blog/2024-09-24-product-update/index.mdx","title":"September Product Update","description":"Kratix CLI++, Permissions, and Backstage","date":"2024-09-24T00:00:00.000Z","tags":[{"inline":true,"label":"kratix","permalink":"/blog/tags/kratix"},{"inline":true,"label":"product update","permalink":"/blog/tags/product-update"},{"inline":true,"label":"backstage","permalink":"/blog/tags/backstage"}],"readingTime":4.745,"hasTruncateMarker":true,"authors":[{"name":"Cat Morris","title":"Product Manager @ Syntasso","url":"https://github.com/catmo-syntasso","imageURL":"https://github.com/catmo-syntasso.png","key":"cat","page":null}],"frontMatter":{"slug":"sept-2024-product-update","title":"September Product Update","description":"Kratix CLI++, Permissions, and Backstage","authors":["cat"],"tags":["kratix","product update","backstage"]},"unlisted":false,"prevItem":{"title":"How your Resources get from Promise to Destination","permalink":"/blog/from-platform-to-destination"}},"content":"import ReactPlayer from \'react-player/lazy\';\\n\\nHi friends \ud83d\ude0a I\'m Cat, Product Manager here at Syntasso, and I\'ve been listening\\nto you, our avid followers. \\"Cat, we love Kratix, and we love your team; we want\\nan update!\\" I hear you scream, so here I am, delivering this top-quality\\ncontent. You\'re welcome.\\n\\nGiven that this is our first Kratix Product Update\u2122 (not really \u2122), I wanted to\\nshout about some of the great work the team has done over the last few months,\\nso we\'re going back a bit further than we usually will\u2026 Indulge me; it was my\\nbirthday this month.\\n\\n## TL;DR\\n\\n<ReactPlayer width=\\"100%\\" playsinline wrapper=\\"p\\" controls={false} height={200} playing={true} muted={true} loop={true} url=\\"https://media0.giphy.com/media/Emg9qPKR5hquI/giphy.mp4\\" />\\n\\nIf you only have 10 seconds spare to read this blog, these are the features you\\nneed to know about:\\n\\n* We have two CLIs now! One for building promises and one for installing SKE (Syntasso Kratix Enterprise)\\n* Setting permissions just got a little bit easier\\n* If you like Backstage, you\u2019ll like what we\u2019re up to\\n\\n\x3c!-- truncate --\x3e\\n\\n## Big stuff for the fans of Kratix\\n\\n<ReactPlayer width=\\"100%\\" playsinline height={200} playing={true} muted={true} loop={true} url=\\"https://media0.giphy.com/media/yGEbmgiCJYu3u/giphy.mp4\\" />\\n\\n### Kratix Promise building CLI\\n\\nLike all good tools for developers, we needed a CLI - and one that is more than\\njust a rat nest of bash scripts*. It\'s now even easier to quickly whip together\\na Promise from scratch, or your existing **operators** and **helm charts**.\\n\\n\\nIt\'s unbelievably easy to get started. Head over to our kratix-cli repo,\\ndownload the latest release and go wild. You can read up on the tool in our docs\\nas well!\\n\\nimport CLIDemo from \'./cli-demo.mp4\';\\n\\n<p align=\\"center\\">\\n<ReactPlayer wrapper=\\"span\\" controls url={CLIDemo} />\\n</p>\\n\\n> _That\'s sweet!_\\n>\\n> \u2014 an actual quote from a customer trying out the new CLI.\\n\\n\\n*no offence meant to rats, their nests, or bash scripts that resemble said nests\\n\\n\\n### SKE Operator\\n\\nOur enterprise product, [Syntasso Kratix Enterprise\\n(SKE)](https://www.syntasso.io/pricing), comes with a bunch of cool features\\nthat makes it mega easy to get started, including integrations with Backstage,\\nTerraform Enterprise and now, super speedy installation via our [helm\\nchart](https://docs.kratix.io/ske/kratix/configuring-ske/via-helm) and the\\n[ske-cli](https://docs.kratix.io/ske/kratix/configuring-ske/via-ske-cli).\\n\\nThis will pull in some really cool stuff - it can help manage  upgrading Kratix,\\ncheck if those upgrades worked, and help you with rollbacks.\\n\\nIf you want to try it out, ping us an email at kratix@syntasso.io, and we\u2019ll\\nhook you up \ud83d\ude0e\\n\\nimport SKECli from \'./ske-cli.mp4\';\\n\\n<ReactPlayer wrapper=\\"span\\" muted={true} controls url={SKECli} />\\n\\n## Neat stuff (because security should not be YOLO!)\\n\\n<ReactPlayer width=\\"100%\\" playsinline height={200} playing={true} muted={true} loop={true} url=\\"https://media4.giphy.com/media/HHWdyVKaKJfI8qqJKU/giphy.mp4\\" />\\n\\n### Security uplift\\n\\nSo security is hard. We\u2019ve made this a little bit easier in two ways.\\n\\n#### RBAC permissions for your pipelines\\n\\nYou can set the RBAC permissions you want all your pipelines to have in the promise spec. There are a few ways you can do this depending on your use of service accounts and namespaces, so check out our docs.\\n\\nThis will give you as the promise writer more control of the permissions of your pipelines without having to manually set things up after applying a promise.\\n\\n```yaml\\nplatform: platform.kratix.io/v1alpha1\\nkind: Promise\\nmetadata:\\n  name: env\\nspec:\\n  ...\\n  workflows:\\n    resource:\\n      configure:\\n      - apiVersion: platform.kratix.io/v1alpha1\\n        kind: Pipeline\\n        metadata:\\n          name: slack-notify\\n        spec:\\n          rbac:\\n            permissions:\\n              - apiGroups: [\\"\\"]\\n                verbs: [\\"*\\"]\\n                resources: [\\"secrets\\"]\\n              - apiGroups: [\\"batch\\"]\\n                verbs: [\\"get\\"]\\n                resources: [\\"jobs\\"]\\n                resourceName: [\\"my-job\\"]\\n        ...\\n```\\n\\n#### Security Contexts for Your Pods\\n\\nBy default, Kratix-owned pods have security contexts set with all the privileges they need. Any containers provided by a Promise author got NOTHING. I didn\u2019t say Kratix was a fair project.\\n\\nBut we have just got a little fairer. You can now set security contexts for your own pods by specifying it in the container spec. Perhaps more excitingly, you can now specify a global default security context in the Kratix ConfigMap in the kratix-platform-system. Fire Configure and forget \ud83d\udd25\\n\\n```yaml\\napiVersion: v1\\nkind: ConfigMap\\nmetadata:\\n  name: kratix\\n  namespace: kratix-platform-system\\ndata:\\n  config: |\\n    workflows:\\n      defaultContainerSecurityContext:\\n        # Security context fields, e.g.:\\n        runAsNonRoot: false\\n```\\n\\n> _I think it is much better_ \ud83d\udc4d\\n>\\n> \u2014 Another actual customer quote.\\n\\n## More control over Backstage (with Kratix)\\n\\nIf you know anything about Syntasso, it\'s that we love Backstage. We even did a\\nwebinar with one of their product managers, the insightful Seve Kim.\\n\\nWe believe Kratix and Backstage work so beautifully together that our SKE\\noffering comes bundled with plugins that make managing Promises and Resources\\nfrom Backstage a joyful experience. This month, we\'ve given users even more\\ncontrol in two ways.\\n\\nPromise authors can now provide an \\"info\\" field as part of the Promise spec that\\nwill show up on your component page. This field supports markdown and has far\\ntoo much space to let your users know whatever will make their day a little\\neasier.\\n\\nWe have also made the first page of requesting a resource more configurable - we\\nknow not every end user will understand what their \\"namespace\\" should be (even\\nthough it is very important for knowing where we should put that resource!!) so\\nyou can configure that to whatever makes sense for your team. You can even go\\nfull abstraction and get rid of it entirely and pre-populate it with whatever\\nyou want. The sky\'s the limit.\\n\\n```mdx-code-block\\nimport Backstage from \\"./backstage.webp\\"\\n```\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Backstage} alt=\\"Screenshot of a Kratix Backstage entity\\" />\\n\\n  <figcaption>Backstage and Kratix: Best of friends</figcaption>\\n</figure>\\n\\n## Useful Kratix resources\\nYou should find the following resources helpful for your Kratix exploration:\\n\\n* [Kratix Github](https://github.com/syntasso/kratix)\\n* [Syntasso Kratix Enterprise homepage](https://www.syntasso.io/)\\n\\nShout out to the team at Port ([getport.io](http://getport.io/)) and Traefik\\n([traefik.io](http://traefik.io/)) for their awesome product update blogs, which\\nserved as inspiration for this post."}]}}')}}]);