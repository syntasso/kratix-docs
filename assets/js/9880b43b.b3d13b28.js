"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[1409],{4816:(e,t,n)=>{n.d(t,{Ay:()=>o,RM:()=>r});var a=n(4848),s=n(8453);const r=[];function i(e){const t={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["Kratix requires a set of certificates in order to deploy its internal\n",(0,a.jsx)(t.a,{href:"https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/",children:"Validating and Mutating Kubernetes\nwebhooks"}),".\nBy default Kratix is configured to use ",(0,a.jsx)(t.a,{href:"https://cert-manager.io/",children:"cert-manager"})," to\ngenerate the certificates, therefore we need to install cert-manager. If you already\nhave it installed, skip to the next section."]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:" Don't want to use cert-manager? Manually provide the required\ncertificates "}),(0,a.jsx)(t.p,{children:"Cert-manager is used to generate a CA, and a key/cert pair which is\nconfigured for the following DNS names:"}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"kratix-platform-webhook-service.kratix-platform-system.svc.cluster.local"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"kratix-platform-webhook-service.kratix-platform-system.svc"})}),"\n"]}),(0,a.jsxs)(t.p,{children:["To manually provide the required certificates, you need to create the\n",(0,a.jsx)(t.code,{children:"webhook-server-cert"})," secret in the ",(0,a.jsx)(t.code,{children:"kratix-platform-system"})," namespace with the\nfollowing keys:"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"apiVersion: v1\ndata:\n  ca.crt: # Base64 CA certificate\n  tls.crt: # Base64 encoded Server certificate\n  tls.key: # Base64 encoded Server private key\nkind: Secret\nmetadata:\n  name: webhook-server-cert\n  namespace: kratix-platform-system\ntype: kubernetes.io/tls\n"})}),(0,a.jsxs)(t.p,{children:["As part of installing Kratix we create a few resources that require the CA\ncertificate. You will have to manually add the CA certificate to the resources\nmentioned below, and manually remove the cert-manager ",(0,a.jsx)(t.code,{children:"Certificate"})," and ",(0,a.jsx)(t.code,{children:"Issuer"}),"\nresources. The following resources need to be updated to contain the Base64\nencoded CA certificate:"]}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"MutatingWebhookConfiguration/kratix-platform-mutating-webhook-configuration"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"apiVersion: admissionregistration.k8s.io/v1\nkind: MutatingWebhookConfiguration\nmetadata:\n  name: kratix-platform-mutating-webhook-configuration\nwebhooks:\n- admissionReviewVersions:\n  - v1\n  clientConfig:\n    caBundle: .... #  there might be multiple admissionReviewVersions, ensure you update all of them\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"ValidatingWebhookConfiguration/kratix-platform-validating-webhook-configuration"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"apiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingWebhookConfiguration\nmetadata:\n  name: kratix-platform-validating-webhook-configuration\nwebhooks:\n- admissionReviewVersions:\n  - v1\n  clientConfig:\n    caBundle: .... #  there might be multiple admissionReviewVersions, ensure you update all of them\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"CustomResourceDefinition/promises.platform.kratix.io"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"apiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: promises.platform.kratix.io\nspec:\n  conversion:\n    strategy: Webhook\n    webhook:\n      clientConfig:\n        caBundle: ....\n"})}),"\n"]}),"\n"]}),(0,a.jsx)(t.p,{children:"Lastly, you need to remove the following cert-manager Issuer and Certificate from Kratix release manifest:"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"---\n...\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: kratix-platform-serving-cert\n  namespace: kratix-platform-system\nspec:\n...\n---\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: kratix-platform-selfsigned-issuer\n  namespace: kratix-platform-system\nspec:\n...\n"})})]}),"\n",(0,a.jsx)(t.p,{children:"To install it, run:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM apply --filename https://github.com/cert-manager/cert-manager/releases/download/v1.15.0/cert-manager.yaml\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Make sure that ",(0,a.jsx)(t.code,{children:"cert-manager"})," is ready before installing Kratix:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell-session",children:"$ kubectl --context $PLATFORM get pods --namespace cert-manager\nNAME                                      READY   STATUS    RESTARTS   AGE\ncert-manager-7476c8fcf4-r8cnd             1/1     Running   0          19s\ncert-manager-cainjector-bdd866bd4-7d8zp   1/1     Running   0          19s\ncert-manager-webhook-5655dcfb4b-54r49     1/1     Running   0          19s\n"})})]})}function o(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},349:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>x,frontMatter:()=>c,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"workshop/part-i/installing-kratix","title":"Section A: Installing Kratix","description":"Create a platform cluster, install and configure Kratix","source":"@site/docs/workshop/part-i/01-installing-kratix.md","sourceDirName":"workshop/part-i","slug":"/workshop/installing-kratix","permalink":"/workshop/installing-kratix","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/workshop/part-i/01-installing-kratix.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"description":"Create a platform cluster, install and configure Kratix","title":"Section A: Installing Kratix","id":"installing-kratix","slug":"../installing-kratix"},"sidebar":"workshopSidebar","previous":{"title":"Part I","permalink":"/workshop/part-i/intro"},"next":{"title":"Section B: Installing a Promise","permalink":"/workshop/installing-a-promise"}}');var s=n(4848),r=n(8453),i=n(6813);n(4816);const o=n.p+"assets/images/topology-01-adbaee49a075166e35fb470d580c7686.png",l=n.p+"assets/images/topology-02-bb443c0c094a51cf8aa5f6b2527b704b.png",c={description:"Create a platform cluster, install and configure Kratix",title:"Section A: Installing Kratix",id:"installing-kratix",slug:"../installing-kratix"},d=void 0,h={},u=[{value:"What is Kratix?",id:"what-is-kratix",level:2},{value:"Using Kratix to build your platform allows you to",id:"using-kratix-to-build-your-platform-allows-you-to",level:3},{value:"Providing a Kratix-built platform allows your users to",id:"providing-a-kratix-built-platform-allows-your-users-to",level:3},{value:"Hands on: Installing Kratix",id:"install-kratix",level:2},{value:"Install Kratix",id:"kratix-setup",level:3},{value:"Create the Kratix State Store",id:"statestore-setup",level:3},{value:"Register the Worker cluster as a Destination",id:"destination-setup",level:3},{value:"Summary",id:"summary",level:2},{value:"\ud83c\udf89 Congratulations",id:"-congratulations",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["This is Part 1 of ",(0,s.jsx)(t.a,{href:"intro",children:"a series"})," illustrating how Kratix works. ",(0,s.jsx)("br",{}),"\n\ud83d\udc49\ud83c\udffe Next: ",(0,s.jsx)(t.a,{href:"installing-a-promise",children:"Install a Kratix Promise"})]}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"In this tutorial, you will"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#what-is-kratix",children:"learn more about Kratix as a framework"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#install-kratix",children:"install and configure Kratix on a Kubernetes cluster"})}),"\n"]}),"\n",(0,s.jsx)("img",{align:"right",src:(0,i.Ay)("/img/logo_300_with-padding.png")}),"\n",(0,s.jsx)(t.h2,{id:"what-is-kratix",children:"What is Kratix?"}),"\n",(0,s.jsx)(t.p,{children:"Kratix is a framework used by platform teams to build custom platforms tailored to their organisation."}),"\n",(0,s.jsx)(t.h3,{id:"using-kratix-to-build-your-platform-allows-you-to",children:"Using Kratix to build your platform allows you to"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"use GitOps workflows and familiar Kubernetes-native constructs."}),"\n",(0,s.jsxs)(t.li,{children:["co-create capabilities by providing a clear contract between application and platform teams through the definition and creation of \u201cPromises\u201d. This tutorial will talk more about Kratix Promises in ",(0,s.jsx)(t.a,{href:"installing-a-promise",children:"the next step"}),"."]}),"\n",(0,s.jsx)(t.li,{children:"create a flexible platform by providing your own paved paths as Promises."}),"\n",(0,s.jsx)(t.li,{children:"evolve your platform easily as your business needs change."}),"\n",(0,s.jsx)(t.li,{children:"start small on a laptop and expand to multi-team, multi-cluster, multi-region, and multi-cloud with a consistent API everywhere."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"providing-a-kratix-built-platform-allows-your-users-to",children:"Providing a Kratix-built platform allows your users to"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"discover available services that are already fit-for-purpose."}),"\n",(0,s.jsx)(t.li,{children:"consume services on demand using standard Kubernetes APIs."}),"\n",(0,s.jsx)(t.li,{children:"move focus away from infrastructure toward adding product value into your platform."}),"\n"]}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(t.h2,{id:"install-kratix",children:"Hands on: Installing Kratix"}),"\n",(0,s.jsxs)(t.p,{children:["Before continuing, be sure to go back to the ",(0,s.jsx)(t.a,{href:"./part-0/intro",children:"prerequisites"}),"\nand follow the guide if you haven't done so already."]}),"\n",(0,s.jsxs)(t.p,{children:["You should also make sure you are currently in the ",(0,s.jsx)(t.code,{children:"kratix"})," directory and have the following environment variables set:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'export PLATFORM="kind-platform"\nexport WORKER="kind-worker"\n'})}),"\n",(0,s.jsx)(t.p,{children:"This guide will go through the following steps:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#kratix-setup",children:"Installing Kratix"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#statestore-setup",children:"Create the Kratix State Store"})}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"kratix-setup",children:"Install Kratix"}),"\n",(0,s.jsx)(t.p,{children:"To install Kratix, all you need is the Kratix distribution file."}),"\n",(0,s.jsx)(t.p,{children:"Run the command below to deploy Kratix on the platform cluster:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM apply --filename https://github.com/syntasso/kratix/releases/latest/download/kratix.yaml\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This command will create a Kratix deployment (in the ",(0,s.jsx)(t.code,{children:"kratix-platform-system"})," namespace). It will also install all the APIs (as Kubernetes CRDs) that Kratix needs."]}),"\n",(0,s.jsx)(t.p,{children:"Verify that the Kratix CRDs are available:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM get crds | grep kratix\n"})}),"\n",(0,s.jsx)(t.p,{children:"The above command will give an output similar to:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell-session",children:"bucketstatestores.platform.kratix.io   2023-01-22T11:53:15Z\ndestinations.platform.kratix.io        2023-01-22T11:53:15Z\ngitstatestores.platform.kratix.io      2023-01-22T11:53:15Z\npromisereleases.platform.kratix.io     2023-01-22T11:53:15Z\npromises.platform.kratix.io            2023-01-22T11:53:15Z\nworkplacements.platform.kratix.io      2023-01-22T11:53:15Z\nworks.platform.kratix.io               2023-01-22T11:53:15Z\n"})}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"What are CRDs?"}),(0,s.jsx)(t.p,{children:"A Custom Resource (CR) is an extension of the Kubernetes API that is not\nnecessarily available in a default Kubernetes installation. It represents a\ncustomisation of a particular Kubernetes installation."}),(0,s.jsx)(t.p,{children:"A Custom Resource Definition (CRD) is the object you create to teach your\nKubernetes cluster about this new API."}),(0,s.jsx)(t.p,{children:"Kratix comes with multiple API extensions (CRDs), as you can see above."}),(0,s.jsxs)(t.p,{children:["Check the Kubernetes documentation for further details on ",(0,s.jsx)(t.a,{href:"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/",children:"Custom\nResources"}),"\nand ",(0,s.jsx)(t.a,{href:"https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/",children:"Custom Resources\nDefinition"}),"."]})]}),"\n",(0,s.jsx)(t.p,{children:"Verify the Kratix deployment:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM get deployments --namespace kratix-platform-system\n"})}),"\n",(0,s.jsx)(t.p,{children:"The above command will give an output similar to:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell-session",children:"NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE\nkratix-platform-controller-manager   1/1     1            1           1h\n"})}),"\n",(0,s.jsx)(t.p,{children:"You can now tell Kratix which repositories it will use to deploy and manage the\nworkloads."}),"\n",(0,s.jsx)(t.h3,{id:"statestore-setup",children:"Create the Kratix State Store"}),"\n",(0,s.jsx)(t.p,{children:"The State Store represents the various backing storage options to which Kratix\ncan write. When registering a worker cluster with Kratix, you will need to\nspecify the state store you intend to use. Kratix will then write to the\nspecified state store when scheduling workloads for deployment on that cluster."}),"\n",(0,s.jsxs)(t.p,{children:["Create a new State Store that points to the MinIO bucket created in the ",(0,s.jsx)(t.a,{href:"./part-0/intro",children:"prerequisites"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"cat << EOF | kubectl --context $PLATFORM apply -f -\napiVersion: platform.kratix.io/v1alpha1\nkind: BucketStateStore\nmetadata:\n  name: default\nspec:\n  endpoint: minio.kratix-platform-system.svc.cluster.local\n  insecure: true\n  bucketName: kratix\n  secretRef:\n    name: minio-credentials\n    namespace: default\nEOF\n"})}),"\n",(0,s.jsx)(t.p,{children:"The above command will give an output similar to:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell-session",children:"bucketstatestore.platform.kratix.io/default created\n"})}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"More on the Kratix State Store"}),(0,s.jsx)(t.p,{children:"The State Store document contains the configuration needed to access the actual\nbacking storage."}),(0,s.jsxs)(t.p,{children:["In the example above, you created a new ",(0,s.jsx)(t.code,{children:"BucketStateStore"})," as a MinIO bucket\nhas been provisioned for storage, but you could use any other S3-compatible\nstorage like Amazon S3 and Google Cloud Storage."]}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"spec"})," includes the details needed to access that specific kind of State\nStore. On the example above, you configured the ",(0,s.jsx)(t.code,{children:"endpoint"})," to the cluster address\nof the MinIO server you deployed on the platform cluster. Since MinIO is running\nin-cluster and without TLS enabled, it is necessary to set ",(0,s.jsx)(t.code,{children:"insecure"})," to true."]}),(0,s.jsxs)(t.p,{children:["You can see the MinIO service on the ",(0,s.jsx)(t.code,{children:"kratix-platform-system"}),":"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM --namespace kratix-platform-system get service minio\n"})}),(0,s.jsx)(t.p,{children:"The above command will give an output similar to:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell-session",children:"NAME    TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE\nminio   NodePort   10.96.96.166   <none>        80:31337/TCP   17h\n"})}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"bucketName"})," refers to the actual bucket on the MinIO server. The bucket needs\nto exist prior to Kratix trying to use it. As a part of setting up MinIO you\nran a Job to create the base ",(0,s.jsx)(t.code,{children:"kratix"})," bucket."]}),(0,s.jsxs)(t.p,{children:["Finally, ",(0,s.jsx)(t.code,{children:"secretRef"})," points to a secret, in the same namespace as the State\nStore, containing the credentials to access the store. For ",(0,s.jsx)(t.code,{children:"BucketStateStore"}),",\nKratix expects to find an ",(0,s.jsx)(t.code,{children:"accessKeyID"})," and a ",(0,s.jsx)(t.code,{children:"secretAccessKey"})," when resolving\nthe secret. As part of the MinIO deployment, you also created the necessary secret:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM describe secret minio-credentials\n"})}),(0,s.jsx)(t.p,{children:"The above command will give an output similar to:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell-session",children:"Name:         minio-credentials\nNamespace:    default\nLabels:       <none>\nAnnotations:  <none>\n\nType:  Opaque\n\nData\n====\naccessKeyID:      10 bytes\nsecretAccessKey:  10 bytes\n"})}),(0,s.jsxs)(t.p,{children:["For further details on State Stores, check the ",(0,s.jsx)(t.a,{href:"/main/reference/statestore/intro",children:"State Store documentation\npage"})]})]}),"\n",(0,s.jsx)(t.p,{children:"At this point, your environment looks like this (with a few components omitted for clarity):"}),"\n","\n",(0,s.jsxs)("figure",{className:"diagram",children:[(0,s.jsx)("img",{className:"medium",src:o,alt:"Deployed resources with State Store"}),(0,s.jsx)("figcaption",{children:"Current environment: with Bucket State Store"})]}),"\n",(0,s.jsxs)(t.p,{children:["Although Kratix now knows about the State Store, it's not currently aware of any place that the workloads can actually run: there's no ",(0,s.jsx)(t.em,{children:"Destination"})," registered with the platform cluster."]}),"\n",(0,s.jsx)(t.h3,{id:"destination-setup",children:"Register the Worker cluster as a Destination"}),"\n",(0,s.jsxs)(t.p,{children:["In Kratix terms, a ",(0,s.jsx)(t.em,{children:"Destination"})," is any system ",(0,s.jsx)(t.em,{children:"converging"})," on the state\ndeclared by Kratix."]}),"\n",(0,s.jsx)(t.p,{children:"You have already created a worker cluster as part of the prerequisites. You will now register this cluster as a Destination."}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"Note that the order of operations here is not important; you could have registered the worker as a Destination first, and then created the worker cluster. Kratix would have scheduled to the State Store path representing the worker cluster, and the state would eventually be applied to a worker."})}),"\n",(0,s.jsx)(t.p,{children:"It's important to note that Kratix makes no assumptions about the Destinations themselves. Although Destinations are often Kubernetes clusters, they may be any system that can interpret whatever state is being declared as desired."}),"\n",(0,s.jsx)(t.p,{children:"For example, you may write a Promise that tells Kratix to declare Terraform\nplans as desired state, and a Destination may be a system applying these\nplans as they are written to the State Store."}),"\n",(0,s.jsxs)(t.p,{children:["To register the worker cluster, create a ",(0,s.jsx)(t.code,{children:"Destination"})," object on your platform cluster:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"cat <<EOF | kubectl --context $PLATFORM apply --filename -\napiVersion: platform.kratix.io/v1alpha1\nkind: Destination\nmetadata:\n   name: worker-cluster\n   labels:\n    environment: dev\nspec:\n   stateStoreRef:\n      name: default\n      kind: BucketStateStore\nEOF\n"})}),"\n",(0,s.jsx)(t.p,{children:"The above command will give an output similar to:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell-session",children:"destinations.platform.kratix.io/worker-cluster created\n"})}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"Destinations in detail"}),(0,s.jsx)(t.p,{children:"The Kratix Destination resource is the representation of a system that workloads can be scheduled to. Those systems are usually other Kubernetes clusters, but can be any system that can interpret the declared state."}),(0,s.jsxs)(t.p,{children:["The only required field is ",(0,s.jsx)(t.code,{children:"spec.stateStoreRef"}),", which contains a reference to a State Store present in the platform. In this example, it points to the ",(0,s.jsx)(t.code,{children:"default"}),"\nobject you created on the previous step. The ",(0,s.jsx)(t.code,{children:"spec.StateStoreRef.kind"})," specifies the kind of State Store being used by this Destination."]}),(0,s.jsxs)(t.p,{children:["This means that different Destinations can use different backing storage. For example, you can have a set of Destinations backed by Git, while another set of Destinations can be backed by a Bucket. Further configuration options pertaining to paths are also available both in the ",(0,s.jsx)(t.a,{href:"../main/reference/statestore/intro",children:"State Store"})," and the ",(0,s.jsx)(t.a,{href:"../main/reference/destinations/intro",children:"Destination object"}),"."]})]}),"\n",(0,s.jsx)(t.p,{children:"With the Destinations registered, Kratix now has a place where it can run workloads!"}),"\n",(0,s.jsx)(t.p,{children:"In fact, as soon as a new Destination is registered, Kratix writes a test document to the State Store. You can use this test to validate that the entire system is wired up correctly."}),"\n",(0,s.jsxs)(t.p,{children:["First, check the MinIO ",(0,s.jsx)(t.code,{children:"kratix"})," bucket:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"mc ls -r kind\n"})}),"\n",(0,s.jsx)(t.p,{children:"The above command will give an output similar to:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell-session",children:"[2024-01-01 15:00:00 GMT]   131B STANDARD kratix/kratix-write-probe.txt\n[2024-01-01 15:00:00 GMT]   116B STANDARD kratix/worker-cluster/dependencies/kratix-canary-namespace.yaml\n[2024-01-01 15:00:00 GMT]   206B STANDARD kratix/worker-cluster/resources/kratix-canary-configmap.yaml\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can also inspect the contents of the test documents. For example, take the ",(0,s.jsx)(t.code,{children:"kratix-canary-namespace.yaml"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"mc cat kind/kratix/worker-cluster/dependencies/kratix-canary-namespace.yaml\n"})}),"\n",(0,s.jsx)(t.p,{children:"The above command will give an output similar to:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Namespace\nmetadata:\n  creationTimestamp: null\n  name: kratix-worker-system\nspec: {}\nstatus: {}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Since your worker cluster is already listening to this path within the bucket, you should see Flux automatically creating the namespace on the worker cluster as soon as it detects the change:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kubectl --context $WORKER get namespace kratix-worker-system\n"})}),"\n",(0,s.jsx)(t.p,{children:"It may take a few minutes, but the above command will give an output similar to:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell-session",children:"NAME                   STATUS   AGE\nkratix-worker-system   Active   1m\n"})}),"\n",(0,s.jsx)(t.p,{children:"You environment now looks like this:"}),"\n","\n",(0,s.jsxs)("figure",{className:"diagram",children:[(0,s.jsx)("img",{className:"large",src:l,alt:"Deployed resources with Destination"}),(0,s.jsx)("figcaption",{children:"Flux reconciled and created the test resources"})]}),"\n",(0,s.jsx)(t.p,{children:"Kratix is now fully installed and configured, and can start deploying Promises and resources to your clusters."}),"\n",(0,s.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(t.p,{children:"Your platform is ready to receive Promises! Well done!"}),"\n",(0,s.jsx)(t.p,{children:"To recap the steps you took:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"\u2705\xa0\xa0Installed Kratix on the platform cluster"}),"\n",(0,s.jsx)(t.li,{children:"\u2705\xa0\xa0Told Kratix about the MinIO bucket, as a Bucket State Store"}),"\n",(0,s.jsx)(t.li,{children:"\u2705\xa0\xa0Told Kratix about the worker cluster, as a Destination"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"-congratulations",children:"\ud83c\udf89 Congratulations"}),"\n",(0,s.jsxs)(t.p,{children:["\u2705 Kratix is now installed and configured! ",(0,s.jsx)("br",{}),"\n\ud83d\udc49\ud83c\udffe ",(0,s.jsx)(t.a,{href:"./installing-a-promise",children:"Next you will deploy your first Promise"}),"."]})]})}function x(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(6540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);