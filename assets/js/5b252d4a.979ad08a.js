"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[922],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(96540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}},99210:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"ske/installing-ske/ske-health-agent","title":"SKE Health Agent","description":"Documentation about the SKE Health Agent","source":"@site/docs/ske/01-installing-ske/40-ske-health-agent.mdx","sourceDirName":"ske/01-installing-ske","slug":"/ske/installing-ske/ske-health-agent","permalink":"/ske/installing-ske/ske-health-agent","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/ske/01-installing-ske/40-ske-health-agent.mdx","tags":[],"version":"current","sidebarPosition":40,"frontMatter":{"title":"SKE Health Agent","description":"Documentation about the SKE Health Agent"},"sidebar":"skeSidebar","previous":{"title":"Migrating from Kratix to SKE","permalink":"/ske/installing-ske/migrating-from-kratix"},"next":{"title":"SKE GUI","permalink":"/ske/installing-ske/ske-gui"}}');var a=n(74848),i=n(28453);const r={title:"SKE Health Agent",description:"Documentation about the SKE Health Agent"},l=void 0,o={},h=[{value:"Features",id:"features",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Install",id:"install",level:2},{value:"Configure values",id:"configure-values",level:3},{value:"The SKE license",id:"the-ske-license",level:3},{value:"Image registry for Air-gapped Environments",id:"image-registry-for-air-gapped-environments",level:3},{value:"Deploy the agent",id:"deploy-the-agent",level:3},{value:"Set up access to the State Store",id:"set-up-access-to-the-state-store",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"The SKE Health Agent is a health check agent to be installed in Kubernetes Destinations\nwhere health checks can be executed."}),"\n",(0,a.jsxs)(t.p,{children:["The Agent is released separately from SKE. Its releases can be found ",(0,a.jsx)(t.a,{href:"../releases/ske-health-agent",children:"here"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,a.jsx)(t.p,{children:"The Agent will:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Schedule the execution of Health Check Workflows from the Destination"}),"\n",(0,a.jsx)(t.li,{children:"Persist the data from a health check into a state store"}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,a.jsx)(t.p,{children:"The Agent will write the health information to a state store.\nThe Platform cluster must have a GitOps agent listening to the state store,\nso the resource health can be applied back to the Platform cluster."}),"\n",(0,a.jsx)(t.h2,{id:"install",children:"Install"}),"\n",(0,a.jsxs)(t.p,{children:["The health agent is released separately from SKE. Its releases can be found\n",(0,a.jsx)(t.a,{href:"/ske/releases/ske-health-agent",children:"in the SKE Health Agent release page"}),"\nand it can be installed using the ",(0,a.jsx)(t.a,{href:"https://github.com/syntasso/helm-charts/tree/main/k8s-health-agent",children:"helm chart"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"To install the agent using the Helm chart, start by adding the Syntasso Helm repository:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"helm repo add syntasso https://syntasso.github.io/helm-charts\nhelm repo update\n"})}),"\n",(0,a.jsx)(t.h3,{id:"configure-values",children:"Configure values"}),"\n",(0,a.jsx)(t.p,{children:"Helm can accept values via the values file. Any configuration should be placed in a values.yaml file\nthat is then passed in to the helm install command."}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["You can see all available configuration in the\n",(0,a.jsx)(t.a,{href:"https://github.com/syntasso/helm-charts/blob/main/k8s-health-agent/values.yaml",children:"helm chart repository"}),"."]})}),"\n",(0,a.jsx)(t.h3,{id:"the-ske-license",children:"The SKE license"}),"\n",(0,a.jsx)(t.p,{children:"SKE Health Agent images are hosted in a private registry. To access these images, you will need to authenticate using\nthe token you have been provided with by Syntasso."}),"\n",(0,a.jsxs)(t.p,{children:["In your values file, you can set the ",(0,a.jsx)(t.code,{children:"skeLicense"})," field to the license token provided to you by Syntasso."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"skeLicense: LICENSE # provided to you by Syntasso\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"warning",children:(0,a.jsx)(t.p,{children:"For the SKE Health Agent to work, you will need to make sure that your Destination cluster can access the Image Registry."})}),"\n",(0,a.jsx)(t.h3,{id:"image-registry-for-air-gapped-environments",children:"Image registry for Air-gapped Environments"}),"\n",(0,a.jsx)(t.p,{children:"You may want to manage the agent images within your own environment either due to air-gapped requirements\nor other security measures."}),"\n",(0,a.jsx)(t.p,{children:"To do this, you will need to set up image mirroring and configure the SKE Health Agent chart to pull image\nfrom your own registry."}),"\n",(0,a.jsx)(t.p,{children:"You must ensure that images listed below are mirrored to your own image registry and tagged according to the version:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"registry.syntasso.io/syntasso/k8s-health-agent"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"registry.syntasso.io/syntasso/health-check-adapter"})}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["You can then customise ",(0,a.jsx)(t.code,{children:"imageRegistry.host"})," in your values file:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:'# Configuration for the image registry\n# Update these values if you are using a private image registry\nimageRegistry:\n  host: "my-org.registry.io"\n# ...\n'})}),"\n",(0,a.jsx)(t.h3,{id:"deploy-the-agent",children:"Deploy the agent"}),"\n",(0,a.jsx)(t.p,{children:"Next, install the agent by running:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"helm install health-agent syntasso/k8s-health-agent --values values.yaml\n"})}),"\n",(0,a.jsx)(t.h3,{id:"set-up-access-to-the-state-store",children:"Set up access to the State Store"}),"\n",(0,a.jsx)(t.p,{children:"You will need to create a ConfigMap and Secret with the credentials to access the state store.\nThe format will depend on the type os state store you wish to use.\nThe agent currently support two different types of state stores: S3-compatible buckets and Git repositories."}),"\n",(0,a.jsx)(t.p,{children:"To configure a Git repository, create a ConfigMap and Secret with the following content:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: health-state-store-config\n  namespace: k8s-health-agent-system\ndata:\n  stateStoreKind: "GitStateStore"\n  url: # address\n  secretName: <secret name>\n  branch: # optional (default: main)\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret name>\n  namespace: k8s-health-agent-system\nstringData:\n  # for basicAuth\n  username: # username\n  password: # password / API Token\n'})}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"ssh"})," method for authentication is not currently supported."]})}),"\n",(0,a.jsx)(t.p,{children:"To configure a S3-compatible bucket, create a ConfigMap and Secret with the following content:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: health-state-store-config \n  namespace: k8s-health-agent-system\ndata:\n  stateStoreKind: "BucketStateStore"\n  endpoint: # address\n  bucketName: # bucket name\n  authMethod: # accessKey or IAM (default: accessKey)\n  secretName: <secret name> # required for accessKey\n  path: # path within the bucket; optional\n  insecure: # true or false (default: false); optional\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret name>\n  namespace: k8s-health-agent-system\ntype: kubernetes.io/basic-auth\nstringData:\n  accessKeyID: # accessKey ID\n  secretAccessKey: # secret access key\n'})}),"\n",(0,a.jsx)(t.admonition,{type:"warning",children:(0,a.jsxs)(t.p,{children:["The configuration should be created ",(0,a.jsx)(t.em,{children:"after"})," installing agent, otherwise the namespace will not exist."]})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);