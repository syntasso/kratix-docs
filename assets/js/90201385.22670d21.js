"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[1003],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var a=t(96540);const s={},o=a.createContext(s);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(o.Provider,{value:n},e.children)}},50220:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"ske/integrations/backstage/generator-promise","title":"SKE Component Promise","description":"Documentation for how to use the SKE Component Promise","source":"@site/docs/ske/10-integrations/10-backstage/07-generator-promise.mdx","sourceDirName":"ske/10-integrations/10-backstage","slug":"/ske/integrations/backstage/generator-promise","permalink":"/ske/integrations/backstage/generator-promise","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/ske/10-integrations/10-backstage/07-generator-promise.mdx","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"SKE Component Promise","description":"Documentation for how to use the SKE Component Promise","sidebar_label":"SKE Component Promise"},"sidebar":"skeSidebar","previous":{"title":"SKE Backstage Generator","permalink":"/ske/integrations/backstage/generator"},"next":{"title":"Backstage Development Image","permalink":"/ske/integrations/backstage/backstage-development-image"}}');var s=t(74848),o=t(28453);const i={title:"SKE Component Promise",description:"Documentation for how to use the SKE Component Promise",sidebar_label:"SKE Component Promise"},r=void 0,c={},l=[{value:"Component updates with multiple Pipelines",id:"component-updates-with-multiple-pipelines",level:2},{value:"Requesting Backstage Components",id:"requesting-backstage-components",level:3},{value:"Scheduling Backstage Components",id:"scheduling-backstage-components",level:3},{value:"Generate a single Backstage catalog",id:"generate-a-single-backstage-catalog",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.admonition,{title:"Deprecated",type:"warning",children:[(0,s.jsx)(n.p,{children:"The SKE Backstage Component Promise is now deprecated and its documentation will be removed soon."}),(0,s.jsx)(n.p,{children:"The functionality it provides is now available by default with v0.14.0 version\nof the Backstage Plugins and SKE version 0.21.0."})]}),"\n",(0,s.jsx)(n.p,{children:"The SKE Backstage Component Promise provides additional functionality to the SKE\nBackstage integration by offloading management of Backstage Components and\nTemplates files from your Promises. The Promise enables the following features:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Allow updates to the Backstage Component and Templates while a Pipeline is still running."}),"\n",(0,s.jsxs)(n.li,{children:["Enables the combination of multiple Backstage Components and Templates into a single\n",(0,s.jsx)(n.code,{children:"catalog-info.yaml"})," file. For some Backstage integrations, such as GitLab,\nthis is a requirement."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You can install the Promise via ",(0,s.jsx)(n.code,{children:"kubectl"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"kubectl apply -f https://syntasso-enterprise-releases.s3.eu-west-2.amazonaws.com/promises/ske-backstage-component-promise.yaml\n"})}),"\n",(0,s.jsx)(n.h2,{id:"component-updates-with-multiple-pipelines",children:"Component updates with multiple Pipelines"}),"\n",(0,s.jsx)(n.p,{children:"If your Promise or Resource workflow contains multiple Pipelines, you may wish to update\nthe associated Component in Backstage at the end of each Pipeline. For example, the\nResource status could be updated in every Pipeline to convey the latest information about\nthe Resource to the requester in Backstage."}),"\n",(0,s.jsxs)(n.p,{children:["To do this, run the SKE Backstage Generator as normal, then create a\nrequest to the SKE Backstage Component Promise within the next pipeline container. In this example the image\n",(0,s.jsx)(n.code,{children:"ghcr.io/syntasso/kratix-marketplace/create-backstage-component-request:v0.1.0"})," is responsible for generating a SKE\nBackstage Component Promise request:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'  # ...\n  workflows:\n    resource:\n      configure:\n      - apiVersion: platform.kratix.io/v1alpha1\n        kind: Pipeline\n        metadata:\n          name: resource-configure\n        spec:\n          #highlight-start\n          # rbac required by new create-backstage-component-request image\n          rbac:\n            permissions:\n              - apiGroups: ["syntasso.io"]\n                verbs: ["*"]\n                resources: ["backstagecomponents"]\n          #highlight-end\n          containers:\n          - image: ghcr.io/syntasso/kratix-marketplace/jenkins-configure-pipeline:v0.1.0\n            name: jenkins-resource-pipeline\n          - image: registry.syntasso.io/syntasso/ske-backstage-generator:VERSION\n            name: ske-backstage-generator\n          #highlight-start\n          - image:  ghcr.io/syntasso/kratix-marketplace/create-backstage-component-request:v0.1.0\n            name: create-backstage-component-request\n          #highlight-end\n    promise:\n      configure:\n      - apiVersion: platform.kratix.io/v1alpha1\n        kind: Pipeline\n        metadata:\n          name: promise-configure\n        spec:\n          #highlight-start\n          rbac:\n            permissions:\n              - apiGroups: ["syntasso.io"]\n                verbs: ["*"]\n                resources: ["backstagecomponents"]\n          #highlight-end\n          containers:\n          - image: ghcr.io/syntasso/kratix-marketplace/jenkins-configure-pipeline:v0.1.0\n            name: jenkins-promise-pipeline\n          - image: registry.syntasso.io/syntasso/ske-backstage-generator:VERSION\n            name: ske-backstage-generator\n          #highlight-start\n          - image:  ghcr.io/syntasso/kratix-marketplace/create-backstage-component-request:v0.1.0\n            name: create-backstage-component-request\n          #highlight-end\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The versions of the ",(0,s.jsx)(n.code,{children:"ske-backstage-generator"})," image used in your Promise specification and\nthe ",(0,s.jsx)(n.code,{children:"ske-backstage-generator"})," image in the SKE Backstage Component Promise must match"]})}),"\n",(0,s.jsx)(n.h3,{id:"requesting-backstage-components",children:"Requesting Backstage Components"}),"\n",(0,s.jsxs)(n.p,{children:["When creating the ",(0,s.jsx)(n.code,{children:"BackstageComponent"})," requests you need to ensure that you set the\ncorrect ",(0,s.jsx)(n.code,{children:".metadata.ownerReferences"})," on the resource to ensure it is deleted when the\nresource/promise is deleted. An example of this is shown below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: syntasso.io/v1alpha1\nkind: BackstageComponent\nmetadata:\n  name: <unique-name>\n  namespace: <same namespace as the request (kratix-platform-system for promises)>\n  ownerReferences:\n  - apiVersion: <apiVersion of the parent object>\n    blockOwnerDeletion: false\n    controller: false\n    kind: <kind of the parent object>\n    name: <name of the parent object>\n    uid: <uid of the parent object>\nspec:\n- resources: |\n  ... # contents of /kratix/output/backstage/catalog-info.yaml\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"name"})," ",(0,s.jsx)(n.code,{children:"apiVersion"}),", ",(0,s.jsx)(n.code,{children:"kind"})," and ",(0,s.jsx)(n.code,{children:"uid"})," fields under ",(0,s.jsx)(n.code,{children:"ownerReferences"})," must equal\nthe parent object for this request, which is the ",(0,s.jsx)(n.code,{children:"/kratix/input/object.yaml"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"spec.resources"})," needs to be a string containing the Backstage Component/Template\nYAML files."]}),"\n",(0,s.jsx)(n.p,{children:"Running in this mode, the SKE Backstage Generator will not schedule the Backstage\ndocuments itself. Instead, it will delegate this responsibility to the SKE Backstage\nComponent Promise."}),"\n",(0,s.jsx)(n.p,{children:"This allows the Backstage Component document to be managed per-Resource, meaning Resource\nmetadata such as the status can be updated across multiple Pipelines."}),"\n",(0,s.jsxs)(n.p,{children:["After creating the ",(0,s.jsx)(n.code,{children:"BackstageComponent"})," request, you need to ensure your\npipeline does not also schedule the same document to the Backstage Destination.\nTo prevent this you can ",(0,s.jsx)(n.code,{children:"rm -rf /kratix/output/backstage"})," and remove the\n",(0,s.jsx)(n.code,{children:"dir: backstage"})," entry in your ",(0,s.jsx)(n.code,{children:"/kratix/metadata/destination-selectors.yaml"})," after\nmaking the request."]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Example bash pipeline script"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'              - image: ghcr.io/syntasso/kratix-pipeline-utility:v0.0.1\n                name: make-backstage-request\n                command: [ "sh" ]\n                args:\n                  - -c\n                  - |\n                    export name="$(yq eval \'.metadata.name\' /kratix/input/object.yaml)"\n                    export namespace="$(yq eval \'.metadata.namespace\' /kratix/input/object.yaml)"\n                    export promise_name=$KRATIX_PROMISE_NAME\n\n                    kind=$(yq eval \'.kind\' /kratix/input/object.yaml)\n                    api_version=$(yq eval \'.apiVersion\' /kratix/input/object.yaml)\n                    uid=$(yq eval \'.metadata.uid\' /kratix/input/object.yaml)\n                    concatenated_string="${promise_name}-${namespace}-${name}"\n                    hash=$(echo -n "$concatenated_string" | sha256sum | cut -c1-5)\n                    truncated_string=$(echo -n "$concatenated_string" | cut -c1-50)\n                    deterministic_name="${truncated_string}-${hash}"\n\n                    cd /kratix/output/\n\n                    cat <<EOF > rr.yaml\n                    apiVersion: syntasso.io/v1alpha1\n                    kind: BackstageComponent\n                    metadata:\n                      name: $deterministic_name\n                      namespace: $namespace\n                      ownerReferences:\n                      - apiVersion: $api_version\n                        blockOwnerDeletion: false\n                        controller: false\n                        kind: $kind\n                        name: $name\n                        uid: $uid\n                    spec: {}\n                    EOF\n\n                    # set .spec.resources equal to file contents of catalog-info.yaml\n                    yq eval \'.spec.resources = strload("backstage/catalog-info.yaml")\' -i rr.yaml\n                    kubectl apply -f rr.yaml\n                    rm -rf /kratix/output/rr.yaml /kratix/output/backstage/ /kratix/metadata/destination-selectors.yaml\n'})})]}),"\n",(0,s.jsx)(n.h3,{id:"scheduling-backstage-components",children:"Scheduling Backstage Components"}),"\n",(0,s.jsxs)(n.p,{children:["By default, ",(0,s.jsx)(n.code,{children:"BackstageComponent"})," requests are scheduled to your Backstage destination.\nIf you need to schedule a ",(0,s.jsx)(n.code,{children:"BackstageComponent"})," to a destination other than\nthe default Backstage destination with label ",(0,s.jsx)(n.code,{children:"environment: backstage"}),", you can set the\n",(0,s.jsx)(n.code,{children:".spec.destinationSelectors"})," on the resource to customize its scheduling behavior.\nAn example of this is shown below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: syntasso.io/v1alpha1\nkind: BackstageComponent\nmetadata:\n  name: A-NAME\n  namespace: NAMESPACE\nspec:\n  destinationSelectors:\n  - matchLabels:\n      environment: backstage-instance-one\n      team: billing\n- resources: |\n  ... # contents of /kratix/output/backstage/catalog-info.yaml\n"})}),"\n",(0,s.jsx)(n.h2,{id:"generate-a-single-backstage-catalog",children:"Generate a single Backstage catalog"}),"\n",(0,s.jsxs)(n.p,{children:["Using the SKE Backstage Component Promise, you can optionally choose to write a single\n",(0,s.jsx)(n.code,{children:"catalog-info.yaml"})," file for Backstage to read from, instead of the default behaviour of\none catalog file per Promise or resource request."]}),"\n",(0,s.jsx)(n.p,{children:"To do this, there are two steps required:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Configuring the SKE Backstage Generator to write all of the Backstage manifests in a\nsingle ",(0,s.jsx)(n.code,{children:"catalog-info.yaml"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Configuring all of your Promises to use the SKE Backstage Component Promise."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"First, apply the following config map to your Platform cluster:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\ndata:\n  allInOne: "true"\nkind: ConfigMap\nmetadata:\n  name: ske-backstage-component-promise-config\n  namespace: kratix-platform-system\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Then configure all of your Promises which use the SKE Backstage Generator to make a request\nto the SKE Backstage Component Promise within your Pipeline, as illustrated in the ",(0,s.jsx)(n.a,{href:"#component-updates-with-multiple-pipelines",children:"section\nabove"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["To ensure that a single ",(0,s.jsx)(n.code,{children:"catalog-info.yaml"})," file is created, you must ensure that ",(0,s.jsx)(n.strong,{children:"all"}),"\nof your Promises which use the SKE Backstage Generator are set up to make a request\nto the SKE Backstage Component Promise in ",(0,s.jsx)(n.strong,{children:"both"})," the Promise and Resource workflows."]})}),"\n",(0,s.jsxs)(n.p,{children:["Configuring the ",(0,s.jsx)(n.code,{children:"allInOne"})," field to ",(0,s.jsx)(n.code,{children:"true"})," will cause the SKE Backstage Component Promise\nto aggregate the Backstage Component and Template files for all Promises and Resources\ninto a single ",(0,s.jsx)(n.code,{children:"catalog-info.yaml"})," file in the Backstage Destination."]}),"\n",(0,s.jsxs)(n.p,{children:["With these changes, your SKE Backstage integration will result in a single\n",(0,s.jsx)(n.code,{children:"catalog-info.yaml"})," file being written to your Backstage Destination containing all of the\ngenerated Component and Template manifests."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}}}]);