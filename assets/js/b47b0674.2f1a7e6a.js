"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[8097],{5681:(e,t,n)=>{n.d(t,{Ay:()=>o,RM:()=>i});var a=n(4848),r=n(8453);const i=[{value:"Pre-requisites",id:"pre-requisites",level:4}];function s(e){const t={a:"a",code:"code",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h4,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsxs)("summary",{children:["You need an installation of Kratix for this section. ",(0,a.jsx)("strong",{children:"Click here"})," for instructions"]}),(0,a.jsx)(t.p,{children:"The simplest way to do so is by running the quick-start script from within the\nKratix directory. The script will create two KinD clusters, install, and\nconfigure Kratix."}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"./scripts/quick-start.sh --recreate\n"})}),(0,a.jsx)(t.p,{children:"You can run Kratix either with a multi-cluster or a single-cluster setup. The\ncommands on the remainder of this document assume that two environment variables\nare set:"}),(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"PLATFORM"})," representing the platform cluster Kubernetes context"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"WORKER"})," representing the worker cluster Kubernetes context"]}),"\n"]}),(0,a.jsx)(t.p,{children:"If you ran the quick-start script above, do:"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'export PLATFORM="kind-platform"\nexport WORKER="kind-worker"\n'})}),(0,a.jsx)(t.p,{children:"For single cluster setups, the two variables should be set to the same value.\nYou can find your cluster context by running:"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"kubectl config get-contexts\n"})}),(0,a.jsxs)(t.p,{children:["Refer back to ",(0,a.jsx)(t.a,{href:"../../category/installing-kratix",children:"Installing Kratix"})," for more\ndetails."]})]})]})}function o(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}},3492:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"main/guides/resource-health","title":"Surfacing health information","description":"A guide for Health checks","source":"@site/docs/main/04-guides/06-health-checks.mdx","sourceDirName":"main/04-guides","slug":"/main/guides/resource-health","permalink":"/main/guides/resource-health","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/main/04-guides/06-health-checks.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"description":"A guide for Health checks","title":"Surfacing health information","id":"resource-health"},"sidebar":"mainSidebar","previous":{"title":"Compound Promises","permalink":"/main/guides/compound-promises"},"next":{"title":"Writing a Promise","permalink":"/main/guides/writing-a-promise"}}');var r=n(4848),i=n(8453),s=n(5681);const o={description:"A guide for Health checks",title:"Surfacing health information",id:"resource-health"},l=void 0,h={},c=[...s.RM,{value:"The Health Record Status",id:"the-health-record-status",level:2},{value:"The HealthRecord CRD",id:"the-healthrecord-crd",level:2},{value:"Writing a HealthRecord in a Workflow",id:"writing-a-healthrecord-in-a-workflow",level:2},{value:"The HealthRecord generator workflow",id:"the-healthrecord-generator-workflow",level:3},{value:"The HealthRecord waiting workflow",id:"the-healthrecord-waiting-workflow",level:3},{value:"Applying the Promise",id:"applying-the-promise",level:2},{value:"Verifying the results",id:"verifying-the-results",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"In this guide, you will:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Learn about the ",(0,r.jsx)(t.code,{children:"healthRecord"})," status field"]}),"\n",(0,r.jsxs)(t.li,{children:["Learn about the ",(0,r.jsx)(t.code,{children:"HealthRecord"})," CRD"]}),"\n",(0,r.jsxs)(t.li,{children:["Write a Promise that can populate the ",(0,r.jsx)(t.code,{children:"healthRecord"})," via a HealthRecord"]}),"\n"]}),"\n","\n",(0,r.jsx)(s.Ay,{}),"\n",(0,r.jsx)(t.h2,{id:"the-health-record-status",children:"The Health Record Status"}),"\n",(0,r.jsxs)(t.p,{children:["Within the resource ",(0,r.jsx)(t.code,{children:"status"}),", Kratix understands the ",(0,r.jsx)(t.code,{children:"healthRecord"})," status field. In this field, Promise writers can describe the health of the resource. The field has the following format:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"status:\n  healthRecord:\n    state: healthy\n    lastRun: 1531958400\n    details:\n      key: value\n      another: value\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"state"})," subfield can have the following values:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"unknown: used to indicate that the state is not known"}),"\n",(0,r.jsx)(t.li,{children:"healthy: the resource is healthy and ready to use"}),"\n",(0,r.jsx)(t.li,{children:"unhealthy: the resource is unhealthy and should be investigated"}),"\n",(0,r.jsx)(t.li,{children:"degraded: the resource is operational, but its functionality may be affected"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"lastRun"})," field is a timestamp indicating the time the Health Check was last run. The timestamp is in seconds since the epoch."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"details"})," field is an optional field that can be used to provide additional details about the Health Check. The details are free-form and can be used to provide any information that may be relevant to the Health Check."]}),"\n",(0,r.jsx)(t.h2,{id:"the-healthrecord-crd",children:"The HealthRecord CRD"}),"\n",(0,r.jsxs)(t.p,{children:["Promise writers can use ",(0,r.jsx)(t.code,{children:"/kratix/metadata/status.yaml"})," to populate the ",(0,r.jsx)(t.code,{children:"healthRecord"})," status field. Alternatively, they can write a HealthRecord CR and schedule it to the Platform cluster in their Pipelines."]}),"\n",(0,r.jsx)(t.p,{children:"A HealthRecord details the result of a Health check. When a Health Record exists for a given Resource, Kratix will update the referenced resource status to reflect the data in the HealthRecord. It has the following format:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"apiVersion: platform.kratix.io/v1alpha1\nkind: HealthRecord\nmetadata:\n  name: healthrecord-example\ndata:\n  promiseRef:\n    name: promise-name\n  # A reference to the Resource Request the Health Check should be performed against  \n  resourceRef:\n    name: request-name\n    namespace: default\n  # The condition of the Health Check\n  #\xa0Can be unknown, ready, unhealthy, healthy or degraded\n  state: ready\n  # The timestamp of the last time the Heath Check was executed\n  lastRun: 1531958400\n  # Optional: any additional details\n  details:\n    example: data\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsx)(t.p,{children:"You can have extenal systems generating the HealthRecord CR and, via GitOps, continuously updating the health information of the resources in your Platform."})}),"\n",(0,r.jsx)(t.h2,{id:"writing-a-healthrecord-in-a-workflow",children:"Writing a HealthRecord in a Workflow"}),"\n",(0,r.jsxs)(t.p,{children:["Now that you understand the ",(0,r.jsx)(t.code,{children:"healthRecord"})," status and the HealthRecord CRD, let's see how to use them in a Workflow. For that, you will update the Redis Promise you can find in the Marketplace. Start by downloading the Promise YAML to your local machine:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"curl -Lo redis-promise.yaml https://raw.githubusercontent.com/syntasso/kratix-marketplace/main/redis/promise.yaml\n"})}),"\n",(0,r.jsx)(t.p,{children:"You are going to update the promise as follows:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The first workflow in ",(0,r.jsx)(t.code,{children:"resource.configure"})," will instantiate the Redis Promise. You will update it to also generate the HealthRecord."]}),"\n",(0,r.jsxs)(t.li,{children:["The second workflow will wait for the resource status ",(0,r.jsx)(t.code,{children:"healthRecord.state"})," to be equal to ",(0,r.jsx)(t.code,{children:"healthy"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"the-healthrecord-generator-workflow",children:"The HealthRecord generator workflow"}),"\n",(0,r.jsx)(t.p,{children:"To update the first workflow to also generate a HealthRecord, you will need to add a new container to the Workflow. This new container will apply a HealthRecord directly to the Platform cluster."}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["In this guide, we will use the ",(0,r.jsx)(t.code,{children:"kubectl"})," CLI to apply the HealthRecord directly. You could, instead, use the Kratix Workflow output directory and schedule it to the Platform cluster. See ",(0,r.jsx)(t.a,{href:"./compound-promises",children:"Compound Promise"})," for more details."]})}),"\n",(0,r.jsx)(t.p,{children:"The script will look like this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'namespace="$(yq \'.metadata.namespace // "default"\' /kratix/input/object.yaml)"\nresourceName="$(yq \'.metadata.name\' /kratix/input/object.yaml)"\n\ncat <<EOF > health-record.yaml\napiVersion: platform.kratix.io/v1alpha1\nkind: HealthRecord\nmetadata:\n  name: redis-${resourceName}\n  namespace: ${namespace}\ndata:\n  promiseRef:\n    name: redis\n  resourceRef:\n    name: ${resourceName}\n    namespace: ${namespace}\n  state: unhealthy\n  lastRun: $(date +%s)\n  details:\n    example: some-detail\nEOF\n\nkubectl apply --filename health-record.yaml\n'})}),"\n",(0,r.jsxs)(t.p,{children:["This script is available in the ",(0,r.jsx)(t.code,{children:"ghcr.io/kratix-docs/redis-health-checks:v0.1.0"})," image as ",(0,r.jsx)(t.code,{children:"generate-hr"}),"."]}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["For simplicity, we will not execute any real check to verify the health status of the Redis instance. Instead, we will simply generate a HealthRecord with an ",(0,r.jsx)(t.code,{children:"unhealthy"})," state (we will later update it to ",(0,r.jsx)(t.code,{children:"healthy"})," to illustrate the concept). In your use case, you may want to run some actual verification steps to assert the status of the created resource."]})}),"\n",(0,r.jsxs)(t.p,{children:["Since this workflow is using ",(0,r.jsx)(t.code,{children:"kubectl"})," to apply the HealthRecord, you must ensure that the right RBAC settings are defined in the promise."]}),"\n",(0,r.jsx)(t.p,{children:"Update your Promise to include the new container and the RBAC configuration:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  name: redis\n  labels:\n    kratix.io/promise-version: v0.1.0\nspec:\n  api: # omitted for brevity\n  workflows:\n    resource:\n      configure:\n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: instance-configure\n          spec:\n            #highlight-start\n            rbac:\n              permissions:\n                - apiGroups: ["platform.kratix.io"]\n                  resources: ["healthrecords"]\n                  verbs: ["get", "list", "create", "update", "patch"]\n            #highlight-end\n            containers:\n              - image: ghcr.io/syntasso/kratix-marketplace/redis-configure-pipeline:v0.1.0\n                name: redis-configure-pipeline\n              #highlight-start\n              - image: ghcr.io/syntasso/kratix-docs/redis-health-checks:v0.1.0\n                name: generate-healthrecord\n                command: [ "generate-hr" ]\n              #highlight-end\n    promise: # omitted for brevity\n'})}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsxs)(t.p,{children:["Make sure you add the container to the correct location in the Promise. The container needs to be added to the ",(0,r.jsx)(t.code,{children:"resource.configure"})," section, so that it is executed when a Resource Request is applied."]})}),"\n",(0,r.jsx)(t.h3,{id:"the-healthrecord-waiting-workflow",children:"The HealthRecord waiting workflow"}),"\n",(0,r.jsx)(t.p,{children:"Next, you will add a second workflow to wait for the resource to be healthy. The code will look like this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'namespace="$(yq \'.metadata.namespace // "default"\' /kratix/input/object.yaml)"\nresourceName="$(yq \'.metadata.name\' /kratix/input/object.yaml)"\n\nwhile true; do\n  state="$(kubectl get redis ${resourceName} --namespace ${namespace} -o jsonpath=\'{.status.healthRecord.state}\')"\n  if [[ ${state} == "healthy" ]]; then \n    break\n  fi\n  echo "Waiting for resource to be healthy, current state: ${state:-"unknown"}"\n  sleep 5\ndone\n\necho "Resource is healthy"\n'})}),"\n",(0,r.jsxs)(t.p,{children:["This script is available in the ",(0,r.jsx)(t.code,{children:"ghcr.io/kratix-docs/redis-health-checks:v0.1.0"})," image in the ",(0,r.jsx)(t.code,{children:"wait-healthy"})," binary."]}),"\n",(0,r.jsx)(t.p,{children:"Update the Promise with a new workflow executing this container:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  name: redis\n  labels:\n    kratix.io/promise-version: v0.1.0\nspec:\n  api: # omitted for brevity\n  workflows:\n    resource:\n      configure:\n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: instance-configure\n          spec:\n            rbac:\n              permissions:\n                - apiGroups: ["platform.kratix.io"]\n                  resources: ["healthrecords"]\n                  verbs: ["get", "list", "create", "update", "patch"]\n            containers:\n              - image: ghcr.io/syntasso/kratix-marketplace/redis-configure-pipeline:v0.1.0\n                name: redis-configure-pipeline\n              - image: ghcr.io/syntasso/kratix-docs/redis-health-checks:v0.1.0\n                name: generate-healthrecord\n                command: [ "generate-hr" ]\n        #highlight-start\n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: wait-status\n          spec:\n            containers:\n              - image: ghcr.io/syntasso/kratix-docs/redis-health-checks:v0.1.0\n                name: wait-healthy\n                command: [ "wait-healthy" ]\n        #highlight-end\n    promise: # omitted for brevity\n'})}),"\n",(0,r.jsx)(t.h2,{id:"applying-the-promise",children:"Applying the Promise"}),"\n",(0,r.jsx)(t.p,{children:"With the changes above, you can apply the Promise:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM apply -f redis-promise.yaml\n"})}),"\n",(0,r.jsx)(t.p,{children:"Create a new Redis instance:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM apply -f https://raw.githubusercontent.com/syntasso/kratix-marketplace/main/redis/resource-request.yaml\n"})}),"\n",(0,r.jsx)(t.h2,{id:"verifying-the-results",children:"Verifying the results"}),"\n",(0,r.jsxs)(t.p,{children:["You can now watch the workflow execution. The first workflow runs and generate a HealthRecord with the ",(0,r.jsx)(t.code,{children:"unhealthy"})," state. The second workflow starts and waits for the resource to be healthy. You can check the workflows:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"$ kubectl --context $PLATFORM get pods\nNAME                                                  READY   STATUS      RESTARTS   AGE\nkratix-redis-example-instance-configure-3c020-5xxpc   0/1     Completed   0          13s\nkratix-redis-example-wait-status-13b3f-2s7q7          0/1     Init:1/3    0          6s\n"})}),"\n",(0,r.jsx)(t.p,{children:"If you check the logs for the second workflow:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"$ kubectl --context $PLATFORM logs kratix-redis-example-wait-status-13b3f-2s7q7 -c wait-healthy\nWaiting for resource to be healthy, current state: unhealthy\nWaiting for resource to be healthy, current state: unhealthy\nWaiting for resource to be healthy, current state: unhealthy\nWaiting for resource to be healthy, current state: unhealthy\n...\n"})}),"\n",(0,r.jsx)(t.p,{children:"You can also check the HealthRecords:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"$ kubectl --context $PLATFORM get healthrecords redis-example -oyaml\napiVersion: platform.kratix.io/v1alpha1\ndata:\n  details:\n    example: some-detail\n  lastRun: 1737736375\n  promiseRef:\n    name: redis\n  resourceRef:\n    name: example\n    namespace: default\n  state: unhealthy\nkind: HealthRecord\nmetadata:\n  name: redis-example\n  namespace: default\n  # some details omitted for brevity\n"})}),"\n",(0,r.jsx)(t.p,{children:"The Redis resource itself should also include the Record in its status:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'$ kubectl --context $PLATFORM get redis.marketplace.kratix.io example -ojsonpath=\'{.status.healthRecord}\'\n{"details":{"example":"some-detail"},"lastRun":1737736375,"state":"unhealthy"}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Now edit the HealthRecord and mark it as ",(0,r.jsx)(t.code,{children:"healthy"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'kubectl patch healthrecord redis-example --patch \'{"data":{"state":"healthy"}}\' --type=merge\n'})}),"\n",(0,r.jsx)(t.p,{children:"If you check the workflow pods now, you should see the second workflow completed (it may take a couple of seconds):"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"$ kubectl --context $PLATFORM get pods\nNAME                                                  READY   STATUS      RESTARTS   AGE\nkratix-redis-example-instance-configure-3c020-5xxpc   0/1     Completed   0          1m20s\nkratix-redis-example-wait-status-13b3f-2s7q7          0/1     Completed   0          1m10s\n"})}),"\n",(0,r.jsx)(t.p,{children:'That means the Redis instance should now be reporting "healthy":'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'$ kubectl --context $PLATFORM get redis.marketplace.kratix.io example -ojsonpath=\'{.status.healthRecord}\'\n{"details":{"example":"some-detail"},"lastRun":1737736375,"state":"healthy"}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(t.p,{children:"HealthRecords offer a powerful way to directly surface health information about resources to platform users. They enable you to provide detailed insights into the state of your resources while signalling to the platform whether those resources are healthy or require attention."}),"\n",(0,r.jsx)(t.p,{children:"By integrating with GitOps tools, HealthRecords can serve as an API for external systems to update resource health statuses dynamically. For instance, tools like Kuberhealthy can be used to generate HealthRecords, which can then be stored in a GitOps repository. This approach allows seamless integration with the platform cluster, enabling real-time health status updates and improving visibility and management of resource health."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var a=n(6540);const r={},i=a.createContext(r);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);