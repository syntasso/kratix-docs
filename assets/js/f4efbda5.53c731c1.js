"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[4592],{28453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>l});var i=n(96540);const t={},o=i.createContext(t);function r(e){const s=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:s},e.children)}},48738:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"main/learn-more/status-conditions-events/promise-status-events","title":"Promise Status and Events","description":"Understand the status conditions and events of a Promise.","source":"@site/docs/main/05-learn-more/03-status-conditions-events/01-promise-status-events.mdx","sourceDirName":"main/05-learn-more/03-status-conditions-events","slug":"/main/learn-more/status-conditions-events/promise-status-events","permalink":"/main/learn-more/status-conditions-events/promise-status-events","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/main/05-learn-more/03-status-conditions-events/01-promise-status-events.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Promise Status and Events","description":"Understand the status conditions and events of a Promise.","id":"promise-status-events"},"sidebar":"mainSidebar","previous":{"title":"Status and Events","permalink":"/category/status-and-events"},"next":{"title":"Resource Status and Events","permalink":"/main/learn-more/status-conditions-events/resource-status-events"}}');var t=n(74848),o=n(28453);const r={title:"Promise Status and Events",description:"Understand the status conditions and events of a Promise.",id:"promise-status-events"},l=void 0,a={},c=[{value:"Conditions",id:"conditions",level:2},{value:"Common Promise Status Fields",id:"common-promise-status-fields",level:2},{value:"Events",id:"events",level:2}];function d(e){const s={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"Kratix follows the Kubernetes convention of using status and events to convey important information about a Promise.\nPromise Status describes what general condition the Promise is in and surfaces any error that has occurred."}),"\n",(0,t.jsx)(s.h2,{id:"conditions",children:"Conditions"}),"\n",(0,t.jsx)(s.p,{children:"A Promise exposes the following list of conditions:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"RequirementsFulfilled"})," \u2013 Kratix has installed any required Promises declared by the Promise."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"ConfigureWorkflowCompleted"})," \u2013 all configure workflow pipelines executed successfully."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"WorksSucceeded"})," \u2013 all Works created for the Promise has completed."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Available"})," \u2013 Promise is ready to accept Resource requests."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Reconciled"})," \u2013 Promise has been successfully reconciled; set to true when all the above conditions are all true."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Example Promise conditions from ",(0,t.jsx)(s.code,{children:"kubectl get promise <name> -o yaml"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",children:'status:\n  conditions:\n  - lastTransitionTime: "2025-06-23T14:02:27Z"\n    message: Requirements fulfilled\n    reason: RequirementsInstalled\n    status: "True"\n    type: RequirementsFulfilled\n  - lastTransitionTime: "2025-06-23T14:07:23Z"\n    message: Pipelines completed\n    reason: PipelinesExecutedSuccessfully\n    status: "True"\n    type: ConfigureWorkflowCompleted\n  - lastTransitionTime: "2025-06-23T14:02:40Z"\n    message: All works associated with this promise are ready\n    reason: WorksSucceeded\n    status: "True"\n    type: WorksSucceeded\n  - lastTransitionTime: "2025-06-23T14:07:26Z"\n    message: Ready to fulfil resource requests\n    reason: PromiseAvailable\n    status: "True"\n    type: Available\n  - lastTransitionTime: "2025-06-23T14:07:26Z"\n    message: Reconciled\n    reason: Reconciled\n    status: "True"\n    type: Reconciled\n'})}),"\n",(0,t.jsx)(s.p,{children:"Inspect the current Promise status at any time with:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"kubectl describe promise <name>\n"})}),"\n",(0,t.jsx)(s.h2,{id:"common-promise-status-fields",children:"Common Promise Status Fields"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"apiVersion"})," \u2013 Shows the API version that this Promise is serving requests at."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"kind"})," \u2013 Shows the Kind that this Promise is serving."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"lastAvailableTime"})," \u2013 When this Promise becomes available."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"status"})," \u2013 Whether the Promise is ready to accept Resource requests; can be set to 'Available' or 'Unavailable'."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"workflows"})," - The number of Resource configure workflow pipelines"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"workflowsSucceeded"})," - The number of Resource configure workflow pipelines that have completed successfully"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"workflowsFailed"}),"- The number of Resource configure workflow pipelines that have failed"]}),"\n"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",children:'status:\n  apiVersion: test.kratix.io/v1alpha1\n  kind: Redis\n  lastAvailableTime: "2025-06-23T15:34:32Z"\n  status: Available\n  conditions:\n  ...\n'})}),"\n",(0,t.jsx)(s.h2,{id:"events",children:"Events"}),"\n",(0,t.jsx)(s.p,{children:"Events record important moments in the Promise lifecycle such as when requirements are installed,\nif the configure pipeline is running and when the Promise becomes available."}),"\n",(0,t.jsx)(s.p,{children:"They can be viewed by running:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"kubectl describe promise <name>\n"})}),"\n",(0,t.jsx)(s.p,{children:"Example Promise events:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"kubectl describe promise <name>\n...\nEvents:\n  Type    Reason                      Age                    From               Message\n  ----    ------                      ----                   ----               -------\n  Normal  PipelineStarted             7m53s                  PromiseController  Configure Pipeline started: promise-configure\n  Normal  Available                   7m43s (x2 over 7m43s)  PromiseController  Promise is available\n  Normal  WorksSucceeded              7m43s                  PromiseController  All works associated with this promise are ready\n  Normal  ReconcileSucceeded          7m43s                  PromiseController  Successfully reconciled\n  Normal  ConfigureWorkflowCompleted  7m38s (x2 over 7m43s)  PromiseController  All workflows completed\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Successful events will be of type ",(0,t.jsx)(s.code,{children:"Normal"})," whereas errors will be published as ",(0,t.jsx)(s.code,{children:"Warning"})," events.\nThese events are useful for understanding the progression of the Promise and troubleshooting failures."]})]})}function u(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);