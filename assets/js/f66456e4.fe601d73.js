"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[1320],{5296:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ske/installing-ske/upgrades","title":"Upgrades","description":"Upgrading your SKE instance","source":"@site/docs/ske/01-installing-ske/20-upgrades.mdx","sourceDirName":"ske/01-installing-ske","slug":"/ske/installing-ske/upgrades","permalink":"/ske/installing-ske/upgrades","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/ske/01-installing-ske/20-upgrades.mdx","tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"title":"Upgrades","description":"Upgrading your SKE instance"},"sidebar":"skeSidebar","previous":{"title":"Air-gapped installation","permalink":"/ske/installing-ske/air-gapped"},"next":{"title":"Backup and restore","permalink":"/ske/installing-ske/backup-and-restore"}}');var r=a(4848),t=a(8453);const i={title:"Upgrades",description:"Upgrading your SKE instance"},l=void 0,o={},d=[{value:"Via Helm",id:"via-helm",level:2},{value:"Upgrade the Operator",id:"upgrade-the-operator",level:3},{value:"Upgrade the SKE instance",id:"upgrade-the-ske-instance",level:3},{value:"Via the Manifests",id:"via-the-manifests",level:2},{value:"Upgrade the SKE Operator",id:"upgrade-the-ske-operator",level:3},{value:"Upgrade the SKE instance",id:"upgrade-the-ske-instance-1",level:3},{value:"Upgrade checks",id:"upgrade-checks",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Similar to the ",(0,r.jsx)(n.a,{href:"./advanced-install",children:"installation process"}),", you can upgrade your SKE instance via Helm or the manifests directly."]}),"\n",(0,r.jsx)(n.h2,{id:"via-helm",children:"Via Helm"}),"\n",(0,r.jsx)(n.h3,{id:"upgrade-the-operator",children:"Upgrade the Operator"}),"\n",(0,r.jsx)(n.p,{children:"To verify the version of the Operator installed, run the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"helm list\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should see the following output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell-session",children:"NAME            NAMESPACE    [...]    CHART                   APP VERSION\nske-operator    default      [...]    ske-operator-0.8.0      v0.1.1\n"})}),"\n",(0,r.jsx)(n.p,{children:"To check the available versions of the Operator, run the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"helm search repo syntasso/ske-operator --versions\n"})}),"\n",(0,r.jsx)(n.p,{children:"To upgrade, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"helm upgrade ske-operator syntasso/ske-operator \\\n  --version <CHART VERSION> --values values.yaml\n"})}),"\n",(0,r.jsx)(n.h3,{id:"upgrade-the-ske-instance",children:"Upgrade the SKE instance"}),"\n",(0,r.jsx)(n.p,{children:"To upgrade the SKE instance, you can apply a new version to the Kratix CRD:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: platform.syntasso.io/v1alpha1\nkind: Kratix\nmetadata:\n  name: my-kratix\nspec:\n  version: latest # Or new desired version\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.p,{children:["If you set the ",(0,r.jsx)(n.code,{children:"spec.version"})," to ",(0,r.jsx)(n.code,{children:"latest"}),", the SKE Operator may automatically\nupgrade your Kratix instance to the latest compatible version of SKE, whenever a\nnew version is available and a reconciliation loop is triggered."]}),(0,r.jsx)(n.p,{children:"At this moment, the SKE Operator will not automatically check for new versions."})]}),"\n",(0,r.jsx)(n.p,{children:"By default, the SKE Operator will perform the following steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Validate that the current Kratix installation is in a healthy state."}),"\n",(0,r.jsx)(n.li,{children:"Upgrade your Kratix Deployment to the next compatible version."}),"\n",(0,r.jsx)(n.li,{children:"Wait for the Kratix Deployment to become healthy (ready and available)."}),"\n",(0,r.jsx)(n.li,{children:"Repeat the above steps until the desired version is reached."}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.p,{children:"The Operator will stop the upgrade process if:"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"A new major is reached, or"}),"\n",(0,r.jsx)(n.li,{children:"No valid upgrade path is found."}),"\n"]}),(0,r.jsx)(n.p,{children:"Patch versions on the same minor can be upgraded without restrictions."}),(0,r.jsx)(n.p,{children:"Downgrades are not currently supported by the SKE Operator."})]}),"\n",(0,r.jsx)(n.h2,{id:"via-the-manifests",children:"Via the Manifests"}),"\n",(0,r.jsx)(n.h3,{id:"upgrade-the-ske-operator",children:"Upgrade the SKE Operator"}),"\n",(0,r.jsx)(n.p,{children:"To upgrade the SKE Operator, you can apply the new manifest directly:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f http://s3.eu-west-2.amazonaws.com/syntasso-enterprise-releases/ske-operator/<NEW-VERSION>/ske-operator-distribution.yaml\n"})}),"\n",(0,r.jsx)(n.h3,{id:"upgrade-the-ske-instance-1",children:"Upgrade the SKE instance"}),"\n",(0,r.jsx)(n.p,{children:"To upgrade the SKE instance, you can apply a new version of the Kratix CRD:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: platform.syntasso.io/v1alpha1\nkind: Kratix\nmetadata:\n  name: my-kratix\nspec:\n  version: v0.100.0 # New desired version\n"})}),"\n",(0,r.jsx)(n.h3,{id:"upgrade-checks",children:"Upgrade checks"}),"\n",(0,r.jsx)(n.p,{children:"The SKE Operator will perform pre-upgrade checks as part of the upgrade flow."}),"\n",(0,r.jsxs)(n.p,{children:["To skip these checks, you can add the ",(0,r.jsx)(n.code,{children:"ske.syntasso.io/skip-all-upgrade-checks"}),"\nlabel when updating your ",(0,r.jsx)(n.code,{children:".spec.version"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: platform.syntasso.io/v1alpha1\nkind: Kratix\nmetadata:\n  name: my-kratix\n  #highlight-start\n  labels:\n    ske.syntasso.io/skip-all-upgrade-checks: "true"\n  #highlight-end\nspec:\n  version: v0.100.0 # New desired version\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"Skipping checks can be useful when you need to upgrade SKE while its current state is\nunhealthy."})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>l});var s=a(6540);const r={},t=s.createContext(r);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);