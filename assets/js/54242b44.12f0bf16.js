"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[1210],{14782:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"main/reference/statestore/gitstatestore","title":"GitStateStore","description":"Documentation for the Kratix `GitStateStore`` Custom Resource","source":"@site/docs/main/03-reference/14-statestore/02-gitstatestore.md","sourceDirName":"main/03-reference/14-statestore","slug":"/main/reference/statestore/gitstatestore","permalink":"/main/reference/statestore/gitstatestore","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/main/03-reference/14-statestore/02-gitstatestore.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"Documentation for the Kratix `GitStateStore`` Custom Resource","title":"GitStateStore","sidebar_label":"GitStateStore","id":"gitstatestore"},"sidebar":"mainSidebar","previous":{"title":"State Stores","permalink":"/main/reference/statestore/intro"},"next":{"title":"BucketStateStore","permalink":"/main/reference/statestore/bucketstatestore"}}');var i=n(74848),a=n(28453);const o={description:"Documentation for the Kratix `GitStateStore`` Custom Resource",title:"GitStateStore",sidebar_label:"GitStateStore",id:"gitstatestore"},r="GitStateStore",d={},c=[{value:"Auth",id:"auth",level:2},{value:"SSH",id:"ssh",level:3},{value:"GitHub",id:"github",level:4},{value:"GitLab",id:"gitlab",level:4},{value:"Basic Auth",id:"basic-auth",level:3},{value:"GitHub",id:"github-1",level:4},{value:"GitLab",id:"gitlab-1",level:4},{value:"AWS CodeCommit",id:"aws-codecommit",level:4},{value:"Github App",id:"github-app",level:3},{value:"Status",id:"status",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"gitstatestore",children:"GitStateStore"})}),"\n",(0,i.jsx)(t.p,{children:"Kratix supports writing to Git repositories. See below for the API documentation:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"apiVersion: platform.kratix.io/v1alpha1\nkind: GitStateStore\nmetadata:\n  name: default\nspec:\n  # The branch to write to: optional, defaults to main\n  branch: main\n  # The top-level path in the git repository to write to: optional\n  path: destinations/\n  # Valid options: basicAuth, ssh, and githubApp; defaults to basicAuth\n  authMethod: basicAuth\n  # Optional\n  gitAuthor:\n    # The name of the author to use when committing: optional, defaults to kratix\n    name: kratix\n    # The email of the author to use when committing: optional, defaults to empty\n    email:\n  # Required\n  secretRef:\n    # The name and namespace of the secret to use to authenticate: required\n    name: git-credentials\n    namespace: default\n  # The address of the git repository. If auth method is basic auth or githubApp, use `http`/`https` format: required\n  # if your using ssh auth then ensure its of the format git@github.com:<org>/<repo>.git\n  url: https://github.com/syntasso/kratix-repo\n"})}),"\n",(0,i.jsx)(t.h2,{id:"auth",children:"Auth"}),"\n",(0,i.jsxs)(t.p,{children:["Kratix uses the credentials contained in the ",(0,i.jsx)(t.code,{children:"secretRef"})," to authenticate with the\nGit storage. Kratix currently supports using ",(0,i.jsx)(t.code,{children:"basicAuth"}),", ",(0,i.jsx)(t.code,{children:"ssh"})," or ",(0,i.jsx)(t.code,{children:"githubApp"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"ssh",children:"SSH"}),"\n",(0,i.jsxs)(t.p,{children:["When ",(0,i.jsx)(t.code,{children:"authMethod"})," is equal to ",(0,i.jsx)(t.code,{children:"ssh"})," Kratix will check the secret for ",(0,i.jsx)(t.code,{children:"sshPrivateKey"})," and ",(0,i.jsx)(t.code,{children:"knownHosts"}),"\nto authenticate. The secret should be in the following format:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Secret\nmetadata:\n  name: # name\n  namespace: # namespace\ntype: Opaque\ndata:\n  sshPrivateKey: # base64 encoded private key\n  knownHosts: # base64 encoded known hosts\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Kratix supports ",(0,i.jsx)(t.strong,{children:"any"})," Git provider that supports ssh auth. Depending on the provider\nyou are using you may be able to use an per-repo ssh key in-place of user's ssh key.\nSee below for further details."]}),"\n",(0,i.jsx)(t.h4,{id:"github",children:"GitHub"}),"\n",(0,i.jsxs)(t.p,{children:["GitHub supports per-repo ssh keys using ",(0,i.jsx)(t.a,{href:"https://docs.github.com/en/rest/deploy-keys/deploy-keys?apiVersion=2022-11-28",children:"deploy keys"}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"gitlab",children:"GitLab"}),"\n",(0,i.jsxs)(t.p,{children:["GitLab supports per-repo ssh keys using ",(0,i.jsx)(t.a,{href:"https://docs.gitlab.com/ee/user/project/deploy_keys/",children:"deploy keys"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"basic-auth",children:"Basic Auth"}),"\n",(0,i.jsxs)(t.p,{children:["When ",(0,i.jsx)(t.code,{children:"authMethod"})," is equal to ",(0,i.jsx)(t.code,{children:"basicAuth"})," Kratix will check the secret for ",(0,i.jsx)(t.code,{children:"username"}),"\nand ",(0,i.jsx)(t.code,{children:"password"})," to authenticate. The secret should be in the following format:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Secret\nmetadata:\n  name: # name\n  namespace: # namespace\ntype: Opaque\ndata:\n  username: # base64 encoded username\n  password: # base64 encoded password\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Kratix supports ",(0,i.jsx)(t.strong,{children:"any"})," Git provider that supports basic auth. Depending on the provider\nyou are using you may be able to use an access token in-place of an actual password.\nSee below for further details."]}),"\n",(0,i.jsx)(t.h4,{id:"github-1",children:"GitHub"}),"\n",(0,i.jsxs)(t.p,{children:["GitHub supports using ",(0,i.jsx)(t.a,{href:"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token",children:"personal access tokens"}),"\ninstead of user passwords for authenticating with GitHub. Create a personal access token\nwith read and write permissions to the repository. Populate the ",(0,i.jsx)(t.code,{children:"username"})," and ",(0,i.jsx)(t.code,{children:"password"}),"\nfields with the GitHub username and token value."]}),"\n",(0,i.jsx)(t.h4,{id:"gitlab-1",children:"GitLab"}),"\n",(0,i.jsxs)(t.p,{children:["GitLab supports using ",(0,i.jsx)(t.a,{href:"https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html",children:"project access tokens"}),"\ninstead of user passwords for authenticating with GitLab. Create a project access token\nwith read and write permissions to the repository. The token is created on the project, and is therefore\nnot related to any individual user. Populate the ",(0,i.jsx)(t.code,{children:"username"})," field with any value and\nthe ",(0,i.jsx)(t.code,{children:"password"})," field with the token value."]}),"\n",(0,i.jsx)(t.h4,{id:"aws-codecommit",children:"AWS CodeCommit"}),"\n",(0,i.jsxs)(t.p,{children:["AWS CodeCommit supports using ",(0,i.jsx)(t.a,{href:"https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html?icmpid=docs_acc_console_connect_np#setting-up-gc-iam",children:"basic\nauth"}),"\nto authenticate with the repository. Populate the ",(0,i.jsx)(t.code,{children:"username"})," and ",(0,i.jsx)(t.code,{children:"password"}),"\nfield with the values generated for the HTTPS Git credentials."]}),"\n",(0,i.jsx)(t.h3,{id:"github-app",children:"Github App"}),"\n",(0,i.jsxs)(t.p,{children:["When ",(0,i.jsx)(t.code,{children:"authMethod"})," is set to ",(0,i.jsx)(t.code,{children:"githubApp"}),", Kratix uses a GitHub App installation for authentication.\nThe referenced Secret must contain the ",(0,i.jsx)(t.code,{children:"appID"}),", ",(0,i.jsx)(t.code,{children:"installationID"}),", and ",(0,i.jsx)(t.code,{children:"privateKey"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Secret\nmetadata:\n  name: # name\n  namespace: # namespace\ntype: Opaque\nstringData:\n  appID: "<GitHub App ID>"\n  installationID: "<Installation ID>"\n  privateKey: |\n    -----BEGIN RSA PRIVATE KEY-----\n    ...\n    -----END RSA PRIVATE KEY-----\n'})}),"\n",(0,i.jsx)(t.p,{children:"Kratix authenticates to GitHub using a short-lived installation access token, generated via your GitHub App credentials.\nIt automatically refreshes this token before expiry and no manual token rotation is required."}),"\n",(0,i.jsxs)(t.p,{children:["You can find the ",(0,i.jsx)(t.code,{children:"appID"})," in your GitHub App settings. To get the ",(0,i.jsx)(t.code,{children:"installationID"}),", use ",(0,i.jsx)(t.a,{href:"https://docs.github.com/en/rest/apps/apps?apiVersion=2022-11-28#list-installations-for-the-authenticated-app",children:"the GitHub REST API"}),".\nEnsure your GitHub App has ",(0,i.jsx)(t.strong,{children:"Contents (Read & Write)"})," permission to the target repository."]}),"\n",(0,i.jsxs)(t.p,{children:["For more information about installing GitHub Apps, see ",(0,i.jsx)(t.a,{href:"https://docs.github.com/en/developers/apps/managing-github-apps/installing-github-apps",children:"Installing GitHub Apps"}),"."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Require a different method of authentication? Get in touch with us at\n",(0,i.jsx)(t.a,{href:"mailto:feedback@syntasso.io?subject=Kratix%20Feedback",children:"feedback@syntasso.io"}),"\nor ",(0,i.jsx)(t.a,{href:"https://github.com/syntasso/kratix/issues/new",children:"open a GitHub Issue"}),"."]})}),"\n",(0,i.jsx)(t.h2,{id:"status",children:"Status"}),"\n",(0,i.jsxs)(t.p,{children:["The status of the GitStateStore can be ",(0,i.jsx)(t.code,{children:"Ready"})," or ",(0,i.jsx)(t.code,{children:"NotReady"})," based on Kratix's availability to write to the State Store."]}),"\n",(0,i.jsxs)(t.p,{children:["A condition of type ",(0,i.jsx)(t.code,{children:"Ready"})," is also provided to enable waiting for the State Store to be ready."]}),"\n",(0,i.jsx)(t.p,{children:"An example is provided below showing a GitStateStore coming online, including events detailing any status changes."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'$ kubectl describe gitstatestores.platform.kratix.io default\nName:         default\n...\nStatus:\n  Conditions:\n    Last Transition Time:  2025-03-05T12:53:12Z\n    Message:               State store is ready\n    Reason:                StateStoreReady\n    Status:                True\n    Type:                  Ready\n  Status:                  Ready\nEvents:\n  Type     Reason    Age    From                     Message\n  ----     ------    ----   ----                     -------\n  Warning  NotReady  2m44s  GitStateStoreController  GitStateStore "default" is not ready: Error writing test file: Get "https://172.18.0.2:31333/gitea_admin/kratix/info/refs?service=git-upload-pack": dial tcp 172.18.0.2:31333: connect: connection refused\n  Warning  NotReady  2m32s  GitStateStoreController  GitStateStore "default" is not ready: Error writing test file: repository not found: Repository not found\n  Normal   Ready     2m21s  GitStateStoreController  GitStateStore "default" is ready\n'})})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(96540);const i={},a=s.createContext(i);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);