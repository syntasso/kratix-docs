"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[3009],{28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var s=r(96540);const i={},n=s.createContext(i);function o(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(n.Provider,{value:t},e.children)}},76260:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"main/learn-more/kratix-resources","title":"Kratix Internal Objects","description":"Learn more about the objects Kratix creates when a Promise or Resource is requested.","source":"@site/docs/main/05-learn-more/02-kratix-resources.mdx","sourceDirName":"main/05-learn-more","slug":"/main/learn-more/kratix-resources","permalink":"/main/learn-more/kratix-resources","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/main/05-learn-more/02-kratix-resources.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Kratix Internal Objects","description":"Learn more about the objects Kratix creates when a Promise or Resource is requested.","id":"kratix-resources"},"sidebar":"mainSidebar","previous":{"title":"Kratix and Backstage","permalink":"/main/learn-more/how-kratix-complements/backstage"},"next":{"title":"Controlling Kratix with labels","permalink":"/main/learn-more/controlling-with-labels"}}');var i=r(74848),n=r(28453);const o=r.p+"assets/images/promise-objects-diagram-86abb7e9b9153608af634b9660da6fd8.jpg",a={title:"Kratix Internal Objects",description:"Learn more about the objects Kratix creates when a Promise or Resource is requested.",id:"kratix-resources"},c=void 0,l={},h=[{value:"Workflow Execution Objects",id:"workflow-execution-objects",level:2},{value:"ConfigMap",id:"configmap",level:3},{value:"ServiceAccount",id:"serviceaccount",level:3},{value:"RBAC Objects",id:"rbac-objects",level:3},{value:"Dynamic Controller RBAC",id:"dynamic-controller-rbac",level:4},{value:"The Workflow SA RBAC",id:"the-workflow-sa-rbac",level:4},{value:"Job and Pod",id:"job-and-pod",level:3},{value:"Output Objects",id:"output-objects",level:2},{value:"Works",id:"works",level:3},{value:"WorkPlacement",id:"workplacement",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Whenever a new Promise is installed, or a new Resource is requested, Kratix creates a series of Kubernetes Objects to complete the installation or to fulfill the Promise."}),"\n",(0,i.jsx)(t.p,{children:"In this page, we explore what those objects are."}),"\n",(0,i.jsx)(t.p,{children:"There are two categories of Objects that Kratix creates:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"The Objects it needs to execute the Workflows."}),"\n",(0,i.jsx)(t.li,{children:"The Objects that represent the Workflows output."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The diagram below shows all of the Objects Kratix creates. We dive deeper into what they are used for later."}),"\n","\n",(0,i.jsxs)("figure",{className:"diagram",children:[(0,i.jsx)("img",{className:"large",src:o,alt:"A diagram showing all the Kubernetes objects created when a Promise is installed"}),(0,i.jsx)("figcaption",{children:"Kubernetes Objects created by Kratix"})]}),"\n",(0,i.jsx)(t.h2,{id:"workflow-execution-objects",children:"Workflow Execution Objects"}),"\n",(0,i.jsx)(t.p,{children:"To execute the Workflows, Kratix creates the following objects:"}),"\n",(0,i.jsx)(t.h3,{id:"configmap",children:"ConfigMap"}),"\n",(0,i.jsx)(t.p,{children:"As you can see in the diagram above, Kratix adds a series of containers to the Pod that will be used to run the Workflow. This ConfigMap contains the information those containers need to schedule works according to the destination selectors found in the Promise."}),"\n",(0,i.jsxs)(t.p,{children:["You can find all Kratix-created ConfigMaps by filtering them using the ",(0,i.jsx)(t.code,{children:"kratix.io/promise-name"})," label."]}),"\n",(0,i.jsx)(t.h3,{id:"serviceaccount",children:"ServiceAccount"}),"\n",(0,i.jsxs)(t.p,{children:["To run the workflows, Kratix creates a ",(0,i.jsx)(t.a,{href:"https://kubernetes.io/docs/concepts/security/service-accounts/",children:"Service Account"})," in the Resource namespace (or in the ",(0,i.jsx)(t.code,{children:"kratix-platform-system"})," for Promise workflows). This Service Account is used by the Job to run the Workflow. If the ",(0,i.jsx)(t.code,{children:"spec.rbac.serviceAccount"})," is set in your Workflow, Kratix does not create the Service Account and uses the one you provide."]}),"\n",(0,i.jsx)(t.p,{children:"The Service Account is created the first time a Resource is requested in a particular namespace, and is deleted when the last Resource is removed from that namespace."}),"\n",(0,i.jsxs)(t.p,{children:["You can find all Kratix-created Service Accounts by filtering them using the ",(0,i.jsx)(t.code,{children:"kratix.io/promise-name"})," label."]}),"\n",(0,i.jsx)(t.h3,{id:"rbac-objects",children:"RBAC Objects"}),"\n",(0,i.jsx)(t.h4,{id:"dynamic-controller-rbac",children:"Dynamic Controller RBAC"}),"\n",(0,i.jsxs)(t.p,{children:["When a Promise is installed, Kratix spins up a dynamic controller to watch for Resource Requests on the Promise API. To ensure the Kratix Controller itself has the permissions to manage the Resources, it creates a Cluster Role (with permissions on the Promise CRD) and binds it to the Kratix Controller Service Account via a Cluster Role Binding. You can read more about Kubernetes RBAC in the ",(0,i.jsx)(t.a,{href:"https://kubernetes.io/docs/reference/access-authn-authz/rbac/",children:"Kubernetes documentation"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["You can find the Cluster Role and Cluster Role Binding by filtering them with the ",(0,i.jsx)(t.code,{children:"kratix.io/promise-name"})," label."]}),"\n",(0,i.jsx)(t.h4,{id:"the-workflow-sa-rbac",children:"The Workflow SA RBAC"}),"\n",(0,i.jsxs)(t.p,{children:["To execute the Workflow, Kratix also gives the Workflow Service Account the right permissions. For that, it creates Roles and Role Bindings. Those objects are created in the same namespace as the Resource (or in the ",(0,i.jsx)(t.code,{children:"kratix-platform-system"})," namespace for Promise workflows)."]}),"\n",(0,i.jsxs)(t.p,{children:["On certain occasions, Kratix also creates Cluster Roles and Cluster Role Bindings to enable the Workflow to access cluster-wide resources. This only happens when the Workflow itself requests ",(0,i.jsx)(t.a,{href:"/main/reference/workflows#rbac",children:"custom RBAC permissions"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"job-and-pod",children:"Job and Pod"}),"\n",(0,i.jsxs)(t.p,{children:["Kratix creates one ",(0,i.jsx)(t.a,{href:"https://kubernetes.io/docs/concepts/workloads/controllers/job/",children:"Job"})," per Pipeline defined in the ",(0,i.jsx)(t.code,{children:"workflows"})," section. Promise workflows always run in the ",(0,i.jsx)(t.code,{children:"kratix-platform-system"})," namespace, while Resource workflows run in the same namespace as the Resource."]}),"\n",(0,i.jsx)(t.p,{children:"The Jobs Kratix creates have a series of labels that allow you to filter them by Promise and Resource:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"kratix.io/promise-name"})," contains the Promise name."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"kratix.io/pipeline-name"})," contains the name of the workflow this job belongs to."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"kratix.io/workflow-type"})," contains the type of workflow, either ",(0,i.jsx)(t.code,{children:"promise"})," or ",(0,i.jsx)(t.code,{children:"resource"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"kratix.io/workflow-action"})," contains the type of action this workflow is performing, either ",(0,i.jsx)(t.code,{children:"configure"})," or ",(0,i.jsx)(t.code,{children:"delete"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Once a Job is created, Kubernetes creates an associated ",(0,i.jsx)(t.a,{href:"https://kubernetes.io/docs/concepts/workloads/pods/",children:"Pod"})," to execute the containers specified in the Pipeline. If you inspect the Pod, you'll see the containers defined in the Promise document, along with a few additional containers injected by Kratix. These includes:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"reader"}),": this container is responsible for injecting the Resource object into the ",(0,i.jsx)(t.code,{children:"/kratix/input"})," directory."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"work-creator"}),": this container is responsible for creating the Work associated with the Workflow. See more about the Work in the next section."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"status-writer"}),": this container uses the ",(0,i.jsx)(t.code,{children:"/kratix/metadata/status.yaml"})," file to update the Resource status."]}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Apart from the ",(0,i.jsx)(t.code,{children:"status-writer"}),", all containers are actually set as ",(0,i.jsx)(t.code,{children:"initContainers"})," to guarantee that they run in the right order."]})}),"\n",(0,i.jsxs)(t.p,{children:["Kratix creates a new Job every time a new workflow needs to be executed. You can control the number of Jobs that Kratix keeps by setting ",(0,i.jsx)(t.code,{children:"numberOfJobsToKeep"})," in the ",(0,i.jsx)(t.a,{href:"/main/reference/kratix-config/config",children:"Kratix Config"})," document.\nYou can also configure how many times a failing workflow Job is retried by setting ",(0,i.jsx)(t.code,{children:"backoffLimit"})," in the same ConfigMap. Kratix does not provide a default value for this field."]}),"\n",(0,i.jsx)(t.h2,{id:"output-objects",children:"Output Objects"}),"\n",(0,i.jsx)(t.h3,{id:"works",children:"Works"}),"\n",(0,i.jsxs)(t.p,{children:["One of the last containers executed as part of a Workflow is the ",(0,i.jsx)(t.code,{children:"work-creator"}),". This container is responsible for creating the Work associated with the Workflow. A Work is a Kratix Object that represents the output of the Workflow, i.e., it contains the documents that containers in the Pipeline persist into ",(0,i.jsx)(t.code,{children:"/kratix/output"})," as part of its execution. The Work is created in the same namespace as the Resource (or in the ",(0,i.jsx)(t.code,{children:"kratix-platform-system"})," namespace for Promise workflows)."]}),"\n",(0,i.jsx)(t.p,{children:"The Work Object contains a similar set of labels as to the Job."}),"\n",(0,i.jsxs)(t.p,{children:["Once a Work is created, Kratix runs its scheduler. The scheduler examines the Work Object and determines which ",(0,i.jsx)(t.a,{href:"/main/reference/destinations/intro",children:"Destination"})," should receive which parts of the Work, since a single Work can contain multiple documents that can be scheduled to multiple destinations. Once a suitable Destination is found, Kratix creates a WorkPlacement object to associate the Work with that Destination."]}),"\n",(0,i.jsx)(t.h3,{id:"workplacement",children:"WorkPlacement"}),"\n",(0,i.jsxs)(t.p,{children:["The WorkPlacement is the last piece of the puzzle. It associates a part of the Work with a Destination. A single Work can spawn multiple WorkPlacements, depending on the ",(0,i.jsx)(t.a,{href:"/main/reference/destinations/multidestination-management",children:"scheduling rules for the Promise"}),". Once a WorkPlacement is created, Kratix writes the associated documents to the ",(0,i.jsx)(t.a,{href:"/main/reference/statestore/intro",children:"State Store"})," that backs the selected Destination."]}),"\n",(0,i.jsx)(t.p,{children:"It has a similar set of labels as the Work Object."}),"\n",(0,i.jsx)(t.p,{children:"On Resource deletion, all Works and the WorkPlacements associated with it are deleted."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(t.p,{children:"Kratix creates and manages a set of Kubernetes Objects to execute Workflows and handle their outputs whenever a Promise is applied or Resource is requested. Understanding these objects and their relationships is key to troubleshooting and extending Kratix functionality."}),"\n",(0,i.jsx)(t.p,{children:"For more information on how these objects interact or how to customize their behavior, see the following resources:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/main/reference/workflows",children:"Workflows Reference"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/main/reference/destinations/intro",children:"Destinations"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/main/reference/statestore/intro",children:"State Store"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/main/reference/kratix-config/config",children:"Configuration"})}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["If you have further questions, check out our ",(0,i.jsx)(t.a,{href:"/main/faq",children:"FAQ"})," or reach out to the Kratix community."]})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);