"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[4031],{4108:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"sept-2024-product-update","metadata":{"permalink":"/blog/sept-2024-product-update","source":"@site/blog/2024-09-24-product-update/index.mdx","title":"September Product Update","description":"Kratix CLI++, Permissions, and Backstage","date":"2024-09-24T00:00:00.000Z","tags":[{"inline":true,"label":"kratix","permalink":"/blog/tags/kratix"},{"inline":true,"label":"product update","permalink":"/blog/tags/product-update"},{"inline":true,"label":"backstage","permalink":"/blog/tags/backstage"}],"readingTime":4.71,"hasTruncateMarker":true,"authors":[{"name":"Cat Morris","title":"Product Manager @ Syntasso","url":"https://github.com/catmo-syntasso","imageURL":"https://github.com/catmo-syntasso.png","key":"cat"}],"frontMatter":{"slug":"sept-2024-product-update","title":"September Product Update","description":"Kratix CLI++, Permissions, and Backstage","authors":["cat"],"tags":["kratix","product update","backstage"]},"unlisted":false},"content":"import ReactPlayer from \'react-player\';\\n\\nHi friends \ud83d\ude0a I\'m Cat, Product Manager here at Syntasso, and I\'ve been listening\\nto you, our avid followers. \\"Cat, we love Kratix, and we love your team; we want\\nan update!\\" I hear you scream, so here I am, delivering this top-quality\\ncontent. You\'re welcome.\\n\\nGiven that this is our first Kratix Product Update\u2122 (not really \u2122), I wanted to\\nshout about some of the great work the team has done over the last few months,\\nso we\'re going back a bit further than we usually will\u2026 Indulge me; it was my\\nbirthday this month.\\n\\n## TL;DR\\n\\n<ReactPlayer wrapper=\\"p\\" height={200} playing={true} muted={true} loop={true} url=\\"https://media0.giphy.com/media/Emg9qPKR5hquI/giphy.mp4\\" />\\n\\nIf you only have 10 seconds spare to read this blog, these are the features you\\nneed to know about:\\n\\n* We have two CLIs now! One for building promises and one for installing SKE (Syntasso Kratix Enterprise)\\n* Setting permissions just got a little bit easier\\n* If you like Backstage, you\u2019ll like what we\u2019re up to\\n\\n\x3c!-- truncate --\x3e\\n\\n## Big stuff for the fans of Kratix\\n\\n<ReactPlayer height={200} playing={true} muted={true} loop={true} url=\\"https://media0.giphy.com/media/yGEbmgiCJYu3u/giphy.mp4\\" />\\n\\n### Kratix Promise building CLI\\n\\nLike all good tools for developers, we needed a CLI - and one that is more than\\njust a rat nest of bash scripts*. It\'s now even easier to quickly whip together\\na Promise from scratch, or your existing **operators** and **helm charts**.\\n\\n\\nIt\'s unbelievably easy to get started. Head over to our kratix-cli repo,\\ndownload the latest release and go wild. You can read up on the tool in our docs\\nas well!\\n\\nimport CLIDemo from \'./cli-demo.mp4\';\\n\\n<p align=\\"center\\">\\n<ReactPlayer wrapper=\\"span\\" controls url={CLIDemo} />\\n</p>\\n\\n> _That\'s sweet!_\\n>\\n> \u2014 an actual quote from a customer trying out the new CLI.\\n\\n\\n*no offence meant to rats, their nests, or bash scripts that resemble said nests\\n\\n\\n### SKE Operator\\n\\nOur enterprise product, [Syntasso Kratix Enterprise\\n(SKE)](https://www.syntasso.io/pricing), comes with a bunch of cool features\\nthat makes it mega easy to get started, including integrations with Backstage,\\nTerraform Enterprise and now, super speedy installation via our [helm\\nchart](https://docs.kratix.io/ske/kratix/helm-installation) and the\\n[ske-cli](https://docs.kratix.io/ske/kratix/ske-cli-installation).\\n\\nThis will pull in some really cool stuff - it can help manage  upgrading Kratix,\\ncheck if those upgrades worked, and help you with rollbacks.\\n\\nIf you want to try it out, ping us an email at kratix@syntasso.io, and we\u2019ll\\nhook you up \ud83d\ude0e\\n\\nimport SKECli from \'./ske-cli.mp4\';\\n\\n<ReactPlayer wrapper=\\"span\\" muted={true} controls url={SKECli} />\\n\\n## Neat stuff (because security should not be YOLO!)\\n\\n<ReactPlayer height={200} playing={true} muted={true} loop={true} url=\\"https://media4.giphy.com/media/HHWdyVKaKJfI8qqJKU/giphy.mp4\\" />\\n\\n### Security uplift\\n\\nSo security is hard. We\u2019ve made this a little bit easier in two ways.\\n\\n#### RBAC permissions for your pipelines\\n\\nYou can set the RBAC permissions you want all your pipelines to have in the promise spec. There are a few ways you can do this depending on your use of service accounts and namespaces, so check out our docs.\\n\\nThis will give you as the promise writer more control of the permissions of your pipelines without having to manually set things up after applying a promise.\\n\\n```yaml\\nplatform: platform.kratix.io/v1alpha1\\nkind: Promise\\nmetadata:\\n  name: env\\nspec:\\n  ...\\n  workflows:\\n    resource:\\n      configure:\\n      - apiVersion: platform.kratix.io/v1alpha1\\n        kind: Pipeline\\n        metadata:\\n          name: slack-notify\\n        spec:\\n          rbac:\\n            permissions:\\n              - apiGroups: [\\"\\"]\\n                verbs: [\\"*\\"]\\n                resources: [\\"secrets\\"]\\n              - apiGroups: [\\"batch\\"]\\n                verbs: [\\"get\\"]\\n                resources: [\\"jobs\\"]\\n                resourceName: [\\"my-job\\"]\\n        ...\\n```\\n\\n#### Security Contexts for Your Pods\\n\\nBy default, Kratix-owned pods have security contexts set with all the privileges they need. Any containers provided by a Promise author got NOTHING. I didn\u2019t say Kratix was a fair project.\\n\\nBut we have just got a little fairer. You can now set security contexts for your own pods by specifying it in the container spec. Perhaps more excitingly, you can now specify a global default security context in the Kratix ConfigMap in the kratix-platform-system. Fire Configure and forget \ud83d\udd25\\n\\n```yaml\\napiVersion: v1\\nkind: ConfigMap\\nmetadata:\\n  name: kratix\\n  namespace: kratix-platform-system\\ndata:\\n  config: |\\n    workflows:\\n      defaultContainerSecurityContext:\\n        # Security context fields, e.g.:\\n        runAsNonRoot: false\\n```\\n\\n> _I think it is much better_ \ud83d\udc4d\\n>\\n> \u2014 Another actual customer quote.\\n\\n## More control over Backstage (with Kratix)\\n\\nIf you know anything about Syntasso, it\'s that we love Backstage. We even did a\\nwebinar with one of their product managers, the insightful Seve Kim.\\n\\nWe believe Kratix and Backstage work so beautifully together that our SKE\\noffering comes bundled with plugins that make managing Promises and Resources\\nfrom Backstage a joyful experience. This month, we\'ve given users even more\\ncontrol in two ways.\\n\\nPromise authors can now provide an \\"info\\" field as part of the Promise spec that\\nwill show up on your component page. This field supports markdown and has far\\ntoo much space to let your users know whatever will make their day a little\\neasier.\\n\\nWe have also made the first page of requesting a resource more configurable - we\\nknow not every end user will understand what their \\"namespace\\" should be (even\\nthough it is very important for knowing where we should put that resource!!) so\\nyou can configure that to whatever makes sense for your team. You can even go\\nfull abstraction and get rid of it entirely and pre-populate it with whatever\\nyou want. The sky\'s the limit.\\n\\n```mdx-code-block\\nimport Backstage from \\"./backstage.webp\\"\\n```\\n\\n<figure className=\\"diagram\\">\\n  <img className=\\"large\\" src={Backstage} alt=\\"Screenshot of a Kratix Backstage entity\\" />\\n\\n  <figcaption>Backstage and Kratix: Best of friends</figcaption>\\n</figure>\\n\\n## Useful Kratix resources\\nYou should find the following resources helpful for your Kratix exploration:\\n\\n* [Kratix Github](https://github.com/syntasso/kratix)\\n* [Syntasso Kratix Enterprise homepage](https://www.syntasso.io/)\\n\\nShout out to the team at Port ([getport.io](http://getport.io/)) and Traefik\\n([traefik.io](http://traefik.io/)) for their awesome product update blogs, which\\nserved as inspiration for this post."}]}}')}}]);