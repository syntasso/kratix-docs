"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[556],{3685:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"main/reference/promises/intro","title":"Promise Custom Resource","description":"Documentation for the Kratix Promise Custom Resource","source":"@site/docs/main/03-reference/11-promises/01-intro.md","sourceDirName":"main/03-reference/11-promises","slug":"/main/reference/promises/intro","permalink":"/main/reference/promises/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/syntasso/kratix-docs/tree/main/docs/main/03-reference/11-promises/01-intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Promise Custom Resource","sidebar_label":"Introduction","description":"Documentation for the Kratix Promise Custom Resource"},"sidebar":"mainSidebar","previous":{"title":"Reference","permalink":"/category/reference"},"next":{"title":"Create","permalink":"/main/reference/promises/create"}}');var r=s(4848),o=s(8453);const t=s.p+"assets/images/promise-high-level-dab95e72822e9630ee52eb4be2a3ea6c.png",a={title:"Promise Custom Resource",sidebar_label:"Introduction",description:"Documentation for the Kratix Promise Custom Resource"},l="Promises",c={},d=[{value:"Use Case",id:"use-case",level:2},{value:"The Promise API",id:"the-promise-api",level:2},{value:"API",id:"api",level:3},{value:"Dependencies",id:"dependencies",level:3},{value:"Workflows",id:"workflows",level:3},{value:"Destination Rules",id:"destination-rules",level:3}];function m(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"promises",children:"Promises"})}),"\n",(0,r.jsxs)(n.p,{children:["At the core of Kratix are Promises. Promises are a set of instructions written in YAML that will produce a ",(0,r.jsx)(n.a,{href:"../resources/intro",children:"resource"})," whenever the Promise is invoked. This means that you can run software-as-a-service from your platform. A Promise consists of the dependencies it must setup before the Promise can be requested, an API description of how a user can request that Promise, the workflows that define how the provisioning takes place, and destination rules that allow the Promise Author to determine where resources should go."]}),"\n",(0,r.jsx)(n.p,{children:"This introduction is intended for platform engineers and people creating promises for use by the rest of their organisation."}),"\n","\n",(0,r.jsxs)("figure",{className:"diagram",children:[(0,r.jsx)("img",{className:"small",src:t,alt:"High level diagram of the parts of a Promise - API, Dependencies, Workflows and Destinations Rules"}),(0,r.jsx)("figcaption",{children:"High level diagram of the parts of a Promise - API, Dependencies, Workflows and Destinations Rules"})]}),"\n",(0,r.jsx)(n.h2,{id:"use-case",children:"Use Case"}),"\n",(0,r.jsx)(n.p,{children:"Consider the task of setting up development environments for application teams.\nThis task is usually repetitive and requires many cookie-cutter steps. It may\ninvolve wiring up Git repos, spinning up a CI/CD server, creating a PaaS to run\nthe applications, instructing CI/CD to listen to the Git repos and push\nsuccessful builds into the PaaS, and finally wiring applications to their\nrequired data services."}),"\n",(0,r.jsx)(n.p,{children:"A Promise can encapsulate all the required steps and handle the toil of running\nthose low-level tasks. It can be designed as a single Promise that does it all,\nor it can be a collection of Promises that, combined, deliver the desired\nfunctionality."}),"\n",(0,r.jsxs)(n.p,{children:["To see Promises in-action, check out the guides: ",(0,r.jsx)(n.a,{href:"../../guides/installing-a-promise",children:"Installing a Promise"})," and ",(0,r.jsx)(n.a,{href:"../../guides/writing-a-promise",children:"Writing a Promise"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"the-promise-api",children:"The Promise API"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  # Name of the Promise; what the platform team will manage in the platform cluster\n  name: promise-name\n  labels:\n    # optional: the version of this promise\n    kratix.io/promise-version: v1.0.0\nspec:\n  # API that a Platform User will use to request a Resource from this Promise\n  api:\n    apiVersion: apiextensions.k8s.io/v1\n    kind: CustomResourceDefinition\n    # ... \n  # Array of Kubernetes resources to be scheduled to matching Workers\n  dependencies:\n    - apiVersion: apps/v1\n      kind: Deployment\n      metadata:\n        name: service-operator\n    -  #...\n    -  #...\n  # Ordered set of tasks to run during a Promise and Resource lifecycle\n  workflows:\n    # Tasks to be run only during the Promise lifecycle\n    promise:\n      # Tasks to be run only on creation, maintenance, or update of the Promise\n      configure:\n        # A Kratix provided Pipeline that runs an ordered set of OCI compliant images\n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: configure-promise\n          spec:\n            containers:\n              - name: pipeline-stage-0\n                image: myorg/pipeline-image-1 # Kubernetes defaults to docker.io\n              - name: pipeline-stage-1\n                image: ghcr.io/myorg/pipeline-image-2\n              -  #...\n      # Tasks to be run when a Promise is deleted\n      delete: \n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: delete-promise\n          spec:\n            containers:\n              - #...\n    # Tasks to be run only during the Resource lifecycle\n    resource:\n      # Tasks to be run only on creation, maintenance, or update of a Resource\n      configure:\n        # A Kratix provided Pipeline that runs an ordered set of OCI compliant images\n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: configure-resource\n          spec:\n            containers:\n              - name: pipeline-stage-0\n                image: myorg/pipeline-image-1 # Kubernetes defaults to docker.io\n              - name: pipeline-stage-1\n                image: ghcr.io/myorg/pipeline-image-2\n              -  #...\n      # Tasks to be run when a Resource is deleted\n      delete: \n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: delete-resource\n          spec:\n            containers:\n              - #...\n  # Check the scheduling docs for details\n  destinationSelectors:\n    - matchLabels:\n        # Arbitrary key/value pairs that will be used for scheduling\n        key: value\n  # A list of Promises that are required by the Promise\n  # All required Promises must be present and available for this promise to be made available\n  requiredPromises:\n    - name: required-promise-name\n      version: required-promise-version\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Learn more about the requiredPromises fields in the ",(0,r.jsx)(n.a,{href:"../../../workshop/part-ii/compound-promise#defining-promises-as-required-promises",children:"Compound Promise Workshop"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["It's also possible to install Promises via a Promise Release. Check the ",(0,r.jsx)(n.a,{href:"../promises/releases",children:"Promise Release"})," docs for details."]}),"\n",(0,r.jsx)(n.h3,{id:"api",children:"API"}),"\n",(0,r.jsxs)(n.p,{children:["When a platform engineer installs a Promise, Kratix creates a new API that application developers use to create and customise their resources using the available API options.\nWhen the API request is submitted to Kratix, the Promise uses the API options to create the resources as described in the Promise.",(0,r.jsx)(n.br,{}),"\n","For example, if the Promise describes a database, a Jenkins installation, and an update script, calling the Promise from the API will generate a new instance of all of those resources for the user.\nPromise APIs are Kubernetes Custom Resource Definitions (CRDs) under the hood. Kratix supports namespace-scoped CRDs only.\nYou can learn more about CRDs ",(0,r.jsx)(n.a,{href:"https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,r.jsx)(n.p,{children:"Dependencies are everything that the Promise relies on to function. A Kratix Promise can even be built on other Kratix Promises. A dependency is the pre-requisite software to create the resource and make it operational. A dependency might be a low-level resource such as a database, a pre-defined environment, a connection, a queue, or a bundle of related items that work together."}),"\n",(0,r.jsx)(n.h3,{id:"workflows",children:"Workflows"}),"\n",(0,r.jsx)(n.p,{children:"Workflows are the actions that must run in order to fulfil a Promise. They are a chain of containers that execute in sequence to fulfill the promise specifications, including responses to API specifications, notifications, business rules, and custom specifications."}),"\n",(0,r.jsx)(n.p,{children:"The Promise workflows are run as part of the Promise lifecycle, and the Resource workflows are run as part of the Resource lifecycle. Under both Promise and Resource workflows, Kratix supports two workflow types:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"configure"})," workflows runs when either the Promise or Resource is created, updated or reconciled."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"delete"})," workflow runs when either the Promise or Resource is deleted."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You can learn more about ",(0,r.jsx)(n.a,{href:"workflows",children:"Promise Workflows"})," and ",(0,r.jsx)(n.a,{href:"../resources/workflows",children:"Resource Workflows"})," in their respective docs."]}),"\n",(0,r.jsx)(n.h3,{id:"destination-rules",children:"Destination Rules"}),"\n",(0,r.jsxs)(n.p,{children:["Destination rules are defined in the ",(0,r.jsx)(n.code,{children:"destinationSelectors"})," section of the Promise spec. These are the rules that all the Promise will follow when determining where resources should go. Learn more about how to use destinationSelectors as part of ",(0,r.jsx)(n.a,{href:"../destinations/multidestination-management#promises",children:"multi-destination scheduling"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(6540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);